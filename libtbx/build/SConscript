import sys, os, os.path

class empty: pass

def touch_init(env, target, source):
  assert len(target) == 1
  print "Creating:", str(target[0])
  f = open(str(target[0]), "w")
  print >> f, """import sys
if (sys.platform == "linux2"):
  if (hasattr(sys, "setdlopenflags")):
    sys.setdlopenflags(0x100|0x2)
"""
  f.close()

def norm_join(head, tail):
  return os.path.normpath(os.path.join(head, tail))

env_etc = empty()
env_etc.compiler = ARGUMENTS.get("compiler", 0)
env_etc.touch_init = touch_init
env_etc.norm_join = norm_join

if (env_etc.compiler == 0):
  if (sys.platform == "win32"):
    env_etc.compiler = "win32_cl"
  elif (sys.platform.startswith("linux")):
    env_etc.compiler = "unix_gcc"
  elif (sys.platform.startswith("osf")):
    env_etc.compiler = "tru64_cxx"
  elif (sys.platform.startswith("irix")):
    env_etc.compiler = "irix_CC"
assert env_etc.compiler in (
  "win32_cl",
  #"win32_mwcc",
  "unix_gcc",
  "tru64_cxx",
  "irix_CC",
)

if (sys.platform == "win32"):
  env_etc.is_win32 = 1
  env_base = Environment(ENV=os.environ)
  env_etc.python_include = r"c:\Python22\include"
  env_etc.libs_python = ["python22"]
  env_etc.libpath_python = [r"c:\Python22\libs"]
  env_etc.extension_module_suffix = ".pyd"
  if (env_etc.compiler == "win32_cl"):
    env_base.Update(
      SHCXX="cl",
      SHLINK="link",
    )
    env_etc.cxxflags_base = Split("""
        /nologo
        /MD
        /GR /GX
        /Zm800
    """)
    env_etc.shlinkflags = "/nologo /incremental:no /dll"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
    env_etc.libm = []
  else:
    raise "Unknown compiler choice:", env_etc.compiler
else:
  env_etc.is_win32 = 0
  env_base = Environment(ENV=os.environ,
    # XXX hack to create a default configuration that we can customize
    tools=['g++', 'gnulink', 'ar'])
  if (env_etc.compiler == "irix_CC"): # XXX
    env_etc.python_include = "/yusr/pom1/rwgrosse/tools/irix/include/python2.2"
  else:
    env_etc.python_include = "/usr/local_cci/Python-2.2.1/include/python2.2"
  env_etc.libs_python = []
  env_etc.libpath_python = []
  env_etc.extension_module_suffix = ".so"
  env_etc.libm = ["m"]
  if (env_etc.compiler == "tru64_cxx"):
    env_base.Replace(
      CXX="cxx",
      LINK="cxx",
      SHCXX="cxx",
      SHLINK="cxx",
    )
    env_etc.cxxflags_base = Split("""
        -std strict_ansi
        -msg_display_number -msg_disable 186,450,1115
        -O2
        -DNDEBUG
    """)
    env_etc.shlinkflags_bpl="-shared -expect_unresolved 'Py*'" \
                           + " -expect_unresolved '_Py*'"
  elif (env_etc.compiler == "unix_gcc"):
    env_base.Replace(
      CXX="g++",
      LINK="g++",
      SHCXX="g++",
      SHLINK="g++",
    )
    env_etc.cxxflags_base = Split("""
      -fPIC
      -ftemplate-depth-50
      -w
      -g
    """)
    env_etc.shlinkflags_bpl="-shared"
  elif (env_etc.compiler == "irix_CC"):
    env_base.Replace(
      CXX="CC -LANG:std -n32 -mips4",
      LINK="CC -LANG:std -n32 -mips4 -LD_MSG:off=15,84",
      SHCXX="CC -LANG:std -n32 -mips4",
      SHLINK="CC -LANG:std -n32 -mips4",
    )
    env_etc.cxxflags_base = Split("""
        -I/yusr/pom1/rwgrosse/bpl2/boost/boost/compatibility/cpp_c_headers
        -woff 1001,1234,1311,1682,3439
        -O2 -OPT:Olimit=0
        -DNDEBUG
    """)
    env_etc.shlinkflags = "-shared -LD_MSG:off=15,84"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  else:
    raise "Unknown compiler choice:", env_etc.compiler
env_etc.cxxflags_bpl_defines_base = Split("""
    -DBOOST_PYTHON_DYNAMIC_LIB
    -DBOOST_PYTHON_V2
""")

env_etc.libtbx_build = os.environ["LIBTBX_BUILD"]
env_etc.libtbx_include = norm_join(env_etc.libtbx_build, "libtbx/include")
env_etc.libtbx_lib = norm_join(env_etc.libtbx_build, "libtbx")
env_etc.libtbx_boost = os.environ["LIBTBX_BOOST"]
env_etc.boost_include = env_etc.libtbx_boost

env_boost_python_ext = env_base.Copy(
  CPPPATH=[env_etc.libtbx_include,
           env_etc.boost_include,
           env_etc.python_include],
  CXXFLAGS=env_etc.cxxflags_base,
  SHCXXFLAGS=env_etc.cxxflags_base,
  SHLINKFLAGS=env_etc.shlinkflags_bpl,
  SHLIBPREFIX="",
  LIBPATH=["#/libtbx"] + env_etc.libpath_python,
  LIBS=["bpl"] + env_etc.libs_python + env_etc.libm,
)
env_boost_python_ext.Append(SHCXXFLAGS=env_etc.cxxflags_bpl_defines_base)
env_boost_python_ext.Replace(SHLIBSUFFIX=env_etc.extension_module_suffix)

Export("env_base", "env_etc", "env_boost_python_ext")
