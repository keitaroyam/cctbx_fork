import sys, os, os.path

class empty: pass

def set_python_include_and_libs(env_etc):
  if (sys.platform == "win32"):
    env_etc.python_include = sys.prefix + r"\include"
    env_etc.libs_python = ["python" + sys.version[0] + sys.version[2]]
    env_etc.libpath_python = [sys.prefix + r"\libs"]
  else:
    env_etc.python_include = sys.prefix + "/include/python" + sys.version[0:3]
    env_etc.libs_python = []
    env_etc.libpath_python = []

def touch_init(env, target, source):
  assert len(target) == 1
  print "Creating:", str(target[0])
  open(str(target[0]), "w").close()

def norm_join(head, tail):
  return os.path.normpath(os.path.join(head, tail))

env_etc = empty()
env_etc.compiler = ARGUMENTS.get("compiler", 0)
env_etc.release_build = ARGUMENTS.get("release_build", 0)
env_etc.debug_build = ARGUMENTS.get("debug_build", 0)
env_etc.no_boost_python = ARGUMENTS.get("no_boost_python", 0)
env_etc.no_prelink = ARGUMENTS.get("no_prelink", 0)
env_etc.touch_init = touch_init
env_etc.norm_join = norm_join

if (env_etc.compiler == 0):
  if (sys.platform == "win32"):
    env_etc.compiler = "win32_cl"
  elif (sys.platform.startswith("linux")):
    env_etc.compiler = "unix_gcc"
  elif (sys.platform.startswith("osf")):
    env_etc.compiler = "tru64_cxx"
  elif (sys.platform.startswith("irix")):
    env_etc.compiler = "irix_CC"
  elif (sys.platform.startswith("darwin")):
    env_etc.compiler = "darwin_c++"
assert env_etc.compiler in (
  "win32_cl",
  #"win32_mwcc",
  "unix_gcc",
  "tru64_cxx",
  "irix_CC",
  "darwin_c++",
)

if (sys.platform == "win32"):
  env_etc.static_libraries = 1
  env_etc.static_bpl = 0
  env_base = Environment(ENV=os.environ)
  set_python_include_and_libs(env_etc)
  env_etc.extension_module_suffix = ".pyd"
  if (env_etc.compiler == "win32_cl"):
    env_base.Update(
      SHCC="cl",
      SHCXX="cl",
      SHLINK="link",
    )
    env_etc.cxxflags_base = Split("""
        /nologo
        /MD
        /GR /GX
        /Zm800
    """)
    env_etc.ccflags_base = Split("""
        /nologo
        /MD
        /Zm800
    """)
    env_etc.shlinkflags = "/nologo /incremental:no /dll"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
    env_etc.libm = []
  else:
    raise "Unknown compiler choice:", env_etc.compiler
else:
  env_base = Environment(
    ENV=os.environ,
    tools=['gcc','g++','gnulink','ar'],
    PROGSUFFIX=".exe")
  set_python_include_and_libs(env_etc)
  env_etc.extension_module_suffix = ".so"
  env_etc.libm = ["m"]
  if (env_etc.compiler == "tru64_cxx"):
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    cxx = "cxx"#-model ansi"
    env_base.Replace(
      CC="cc",
      SHCC="cc",
      CXX=cxx,
      LINK=cxx,
      SHCXX=cxx,
      SHLINK=cxx,
    )
    env_etc.cxxflags_base = Split("""
        -std strict_ansi
        -msg_display_number -msg_disable 186,450,1115
        -tlocal
    """)
    env_etc.ccflags_base = Split("""
        -std strict_ansi
        -msg_display_number -msg_disable 186,450,1115
    """)
    if (not env_etc.debug_build):
      opts = ["-DNDEBUG", "-O2"]
    else:
      opts = ["-O0"]
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    env_etc.shlinkflags = "-shared -expect_unresolved 'Py*'" \
                        + " -expect_unresolved '_Py*'"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "unix_gcc"):
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    env_base.Replace(
      CC="gcc",
      SHCC="gcc",
      CXX="g++",
      LINK="g++",
      SHCXX="g++",
      SHLINK="g++",
    )
    env_etc.cxxflags_base = Split("""
      -fPIC
      -ftemplate-depth-100
      -w
    """)
    env_etc.ccflags_base = Split("""
      -w
    """)
    if (env_etc.release_build):
      opts = ["-DNDEBUG", "-O3"]
    else:
      opts = ["-O0", "-fno-inline"]
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    env_etc.shlinkflags = "-shared"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "irix_CC"):
    env_etc.static_libraries = 0
    env_etc.static_bpl = 0
    cxx = "CC -n32 -mips4 -LANG:std"
    if (env_etc.no_prelink):
      cxx += " -LANG:pch=OFF -no_prelink -ptused" \
           + " -FE:template_in_elf_section" \
           + " -FE:eliminate_duplicate_inline_copies"
    env_base.Replace(
      CC="cc",
      SHCC="cc",
      CXX=cxx,
      LINK=cxx + " -LD_MSG:off=15,84",
      SHCXX=cxx,
      SHLINK=cxx,
    )
    env_etc.cxxflags_base = Split("""
        -I%s/boost/compatibility/cpp_c_headers
        -woff 1001,1234,1311,1682,3439
    """ % (os.environ["LIBTBX_BOOST"],))
    env_etc.ccflags_base = Split("""
    """)
    if (not env_etc.debug_build):
      opts = ["-DNDEBUG", "-O2", "-OPT:Olimit=0"]
    else:
      opts = ["-O0"]
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    env_etc.shlinkflags = "-shared -LD_MSG:off=15,84"
    env_etc.shlinkflags_bpl = env_etc.shlinkflags
  elif (env_etc.compiler == "darwin_c++"):
    env_etc.static_libraries = 1
    env_etc.static_bpl = 0
    env_base.Replace(
      CC="cc",
      SHCC="cc",
      CXX="c++",
      LINK="c++",
      SHCXX="c++",
      SHLINK="c++",
      SHLIBSUFFIX=".dylib",
    )
    env_etc.cxxflags_base = Split("""
        -fno-common
        -no-cpp-precomp
        -ftemplate-depth-100
        -Wno-long-double
    """)
    env_etc.ccflags_base = Split("""
    """)
    if (env_etc.release_build):
      opts = ["-DNDEBUG", "-O3"]
    else:
      opts = ["-O0", "-fno-inline"]
    env_etc.cxxflags_base.extend(opts)
    env_etc.ccflags_base.extend(opts)
    env_etc.shlinkflags = "-dynamiclib"
    env_etc.shlinkflags_bpl = "-bundle -flat_namespace -undefined warning"
  else:
    raise "Unknown compiler choice:", env_etc.compiler

env_etc.cxxflags_bpl_defines_base = Split("""
    -DBOOST_PYTHON_MAX_ARITY=12
    -DBOOST_PYTHON_MAX_BASES=2
""")

env_etc.libtbx_build = os.environ["LIBTBX_BUILD"]
env_etc.libtbx_include = norm_join(env_etc.libtbx_build, "libtbx/include")
env_etc.libtbx_lib = norm_join(env_etc.libtbx_build, "libtbx")
env_etc.libtbx_boost = os.environ["LIBTBX_BOOST"]
env_etc.boost_include = env_etc.libtbx_boost

env_boost_python_ext = env_base.Copy(
  CPPPATH=[env_etc.libtbx_include,
           env_etc.boost_include,
           env_etc.python_include],
  CXXFLAGS=env_etc.cxxflags_base,
  CCFLAGS=env_etc.ccflags_base,
  SHCXXFLAGS=env_etc.cxxflags_base,
  SHLINKFLAGS=env_etc.shlinkflags_bpl,
  SHLIBPREFIX="",
  LIBPATH=["#libtbx"] + env_etc.libpath_python,
  LIBS=["boost_python"] + env_etc.libs_python + env_etc.libm,
)
env_boost_python_ext.Append(SHCXXFLAGS=env_etc.cxxflags_bpl_defines_base)
env_boost_python_ext.Replace(SHLIBSUFFIX=env_etc.extension_module_suffix)

Export("env_base", "env_etc", "env_boost_python_ext")
