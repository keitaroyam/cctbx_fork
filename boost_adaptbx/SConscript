import md5
import sys
Import("env_base", "env_etc")
env_etc.boost_dist = env_etc.libtbx_env.dist_path("boost")
env_etc.boost_include = env_etc.boost_dist
if (not env_etc.no_boost_python):
  env_etc.cxxflags_bpl_defines_base = ["-DBOOST_PYTHON_MAX_BASES=2"]
  env_no_includes_boost_python_ext = env_base.Copy(
    CXXFLAGS=env_etc.cxxflags_base,
    CCFLAGS=env_etc.ccflags_base,
    SHCXXFLAGS=env_etc.cxxflags_base,
    SHLINKFLAGS=env_etc.shlinkflags_bpl,
    SHLIBPREFIX="",
    LIBPATH=["#libtbx"] + env_etc.libpath_python,
    LIBS=["boost_python"] + env_etc.libs_python + env_etc.libm,
  )
  env_no_includes_boost_python_ext.Append(
    SHCXXFLAGS=env_etc.cxxflags_bpl_defines_base)
  env_no_includes_boost_python_ext.Replace(
    SHLIBSUFFIX=env_etc.extension_module_suffix)
  Export("env_no_includes_boost_python_ext")
  env_pure_boost_python_ext = env_no_includes_boost_python_ext.Copy()
  env_etc.include_registry.append(
    env=env_pure_boost_python_ext,
    paths=[env_etc.boost_include,
           env_etc.python_include])
  env_boost_python_ext = env_pure_boost_python_ext.Copy()
  env_etc.include_registry.prepend(
    env=env_boost_python_ext,
    paths=[env_etc.libtbx_include])
  Export("env_boost_python_ext")

  env_pure_boost_python_ext.SharedLibrary(
    target="#libtbx/boost_python_meta_ext",
    source="meta_ext.cpp")

  env_pure_boost_python_ext.SharedLibrary(
    target="#libtbx/boost_rational_ext",
    source="rational_ext.cpp")

  import os, os.path
  env = env_base.Copy(
    LIBS=env_etc.libs_python,
    LIBPATH=env_etc.libpath_python,
  )
  env.Replace(SHCXXFLAGS=env_etc.cxxflags_base)
  env.Append(SHCXXFLAGS=env_etc.cxxflags_bpl_defines_base)
  env.Append(SHCXXFLAGS="-DBOOST_PYTHON_SOURCE")
  env.Replace(SHLINKFLAGS=env_etc.shlinkflags)
  env.Replace(CXXFLAGS=env_etc.cxxflags_base)
  env.Append(CXXFLAGS=env_etc.cxxflags_bpl_defines_base)
  env.Append(CXXFLAGS="-DBOOST_PYTHON_SOURCE")
  env.Replace(LINKFLAGS=env_etc.shlinkflags)
  env_etc.include_registry.append(
    env=env,
    paths=[env_etc.boost_include, env_etc.python_include])

  if (env_etc.compiler == "darwin_c++"):
    env.Replace(SHLINK="libtbx.mac_os_x_ld_bpl_dll")
    env.Prepend(SHLINKFLAGS=["c++", "-framework", "Python"])
  elif (env_etc.compiler == "darwin_gcc"):
    env.Replace(SHLINK="libtbx.mac_os_x_ld_bpl_dll")
    env.Prepend(SHLINKFLAGS=["g++", "-framework", env_etc.python_framework])

  jamfile_path = os.path.normpath(os.path.join(
    env_etc.boost_dist, "libs/python/build/Jamfile"))

  try:  #appropriate for Boost.Python snapshot on 2003-Feb-25
    jamfile_all =   open(str(jamfile_path), "r").read()
    jam_rhs = jamfile_all.split("local sources =")[1]
    jam_middle = jam_rhs.split(";")[0]
    jamfile_lines = jam_middle.split("\n")
    jamfile_lines = [line.strip() for line in jamfile_lines]
    while jamfile_lines.count("")>0:
      jamfile_lines.remove("")
    bpl_dll_sources = []
    for line in jamfile_lines:
      bpl_dll_sources.append(os.path.join("#boost/libs/python/build/../src", line))
    assert len(bpl_dll_sources) > 0

  except:  #appropriate for previous Boost release 1.29.0
    jamfile_lines = [
      line.strip() for line in open(str(jamfile_path), "r").readlines()]
    for i in xrange(len(jamfile_lines)):
      line = jamfile_lines[i]
      if (line == "dll boost_python"):
        assert jamfile_lines[i+1] == ":"
        jamfile_lines = jamfile_lines[i+2:]
        break
    bpl_dll_sources = []
    for i in xrange(len(jamfile_lines)):
      line = jamfile_lines[i]
      if (line == ":"): break
      if (line):
        bpl_dll_sources.append(os.path.join("#boost/libs/python/build", line))

  assert len(bpl_dll_sources) > 0

  if (env_etc.static_bpl):
    env.StaticLibrary(target="#libtbx/boost_python", source=bpl_dll_sources)
  else:
    env.SharedLibrary(target="#libtbx/boost_python", source=bpl_dll_sources)

  if (int(ARGUMENTS.get("boost_python_tests", 0))):
    jamfile_path = os.path.normpath(os.path.join(
      env_etc.boost_dist, "libs/python/test/Jamfile"))
    jamfile = " ".join(
      [line.rstrip() for line in open(jamfile_path).readlines()])
    m = md5.new()
    m.update(jamfile)
    # based on boost/libs/python/test/Jamfile revision 1.72
    jamfile_md5 = "79b309f870c9e8c43d0b8aa3e0b61544"
    if (m.hexdigest() != jamfile_md5):
      print "boost/libs/python/test/Jamfile has changed"
      print "New md5 signature:", m.hexdigest()
      raise RuntimeError, "Jamfile md5 mismatch."
    bpl_tests = Split("""
staticmethod
shared_ptr
polymorphism
auto_ptr
minimal
args
numpy
enum
exception_translator
test_pointer_adoption
operators
callbacks
defaults
object
list
long
dict
tuple
str
virtual_functions
back_reference
implicit
data_members
ben_scott1
bienstman1
bienstman2
bienstman3
multi_arg_constructor
extract
opaque
pickle1
pickle2
pickle3
nested
docstring
bienstman4
bienstman5
test_builtin_converters,builtin_converters,test_builtin_converters
cltree,cltree,test_cltree
m1,m1,newtest
m2,m2,newtest
iterator,iterator_ext,iterator
input_iterator,input_iterator,iterator
crossmod_exception_a,crossmod_exception_a,crossmod_exception
crossmod_exception_b,crossmod_exception_b,crossmod_exception
vector_indexing_suite
return_arg
keywords,keywords,keywords_test
properties
map_indexing_suite
injected
""")
    Import("env_boost_python_ext")
    all_tst = []
    for bpl_test in bpl_tests:
      if (bpl_test[0] == "#"):
        print "Warning: disabled Boost.Python test:", bpl_test
        continue
      flds = bpl_test.split(",")
      assert len(flds) in (1,3)
      if (len(flds) == 1):
        src = bpl_test
        pyd = bpl_test + "_ext"
        tst = bpl_test
      else:
        src = flds[0]
        pyd = flds[1]
        tst = flds[2]
      if (not tst in all_tst):
        all_tst.append(tst)
      env_pure_boost_python_ext.SharedLibrary(
        target="#libtbx/%s" % pyd,
        source="#boost/libs/python/test/%s.cpp" % src,
      )
    if (sys.platform == "win32"):
      boost_python_run_tests = \
        "%s\\boost_python_run_tests.bat" % env_etc.libtbx_env.LIBTBX_BUILD
      f = open(boost_python_run_tests, "w")
      for tst in all_tst:
        print >> f, "call python %%BOOST_DIST%%/libs/python/test/%s.py" % tst
      f.close()
    else:
      boost_python_run_tests = \
        "%s/boost_python_run_tests.csh" % env_etc.libtbx_env.LIBTBX_BUILD
      f = open(boost_python_run_tests, "w")
      print >> f, "#! /bin/csh -f"
      print >> f, "set verbose"
      for tst in all_tst:
        print >> f, "python $BOOST_DIST/libs/python/test/%s.py" % tst
      f.close()
      os.chmod(boost_python_run_tests, 0755)
