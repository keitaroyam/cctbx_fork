/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : cif.g
 *     -                            On : 2011-09-15 11:54:09
 *     -                for the parser : cifParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "cifParser.h"
/* ----------------------------------------- */

/** CIF Version 1.1 Working specification grammar

Translated from the grammar defined at

http://www.iucr.org/resources/cif/spec/version1.1/cifsyntax#bnf

A compiled version of the parser, with C language target, but contains
C++ code in the actions, therefore the output files must be renamed to *.cpp

Richard Gildea
April 2010
*/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define         CTX     ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef  SCOPE_TYPE
#undef  SCOPE_STACK
#undef  SCOPE_TOP
#define SCOPE_TYPE(scope)   pcifParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pcifParser_##scope##Stack
#define SCOPE_TOP(scope)    ctx->pcifParser_##scope##Top
#define SCOPE_SIZE(scope)               ctx->pcifParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)        (ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef      PARSER
#undef      RECOGNIZER
#undef      HAVEPARSEDRULE
#undef          MEMOIZE
#undef      INPUT
#undef      STRSTREAM
#undef      HASEXCEPTION
#undef      EXCEPTION
#undef      MATCHT
#undef      MATCHANYT
#undef      FOLLOWSTACK
#undef      FOLLOWPUSH
#undef      FOLLOWPOP
#undef      PRECOVER
#undef      PREPORTERROR
#undef      LA
#undef      LT
#undef      CONSTRUCTEX
#undef      CONSUME
#undef      MARK
#undef      REWIND
#undef      REWINDLAST
#undef      PERRORRECOVERY
#undef      HASFAILED
#undef      FAILEDFLAG
#undef      RECOVERFROMMISMATCHEDSET
#undef      RECOVERFROMMISMATCHEDELEMENT
#undef          INDEX
#undef      ADAPTOR
#undef          SEEK
#undef      RULEMEMO
#undef          DBG

#define     PARSER                              ctx->pParser
#define     RECOGNIZER                          PARSER->rec
#define     PSRSTATE                            RECOGNIZER->state
#define     HAVEPARSEDRULE(r)                   RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define     MEMOIZE(ri,si)                      RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define     INPUT                               PARSER->tstream
#define     STRSTREAM                           INPUT
#define     ISTREAM                             INPUT->istream
#define     INDEX()                             ISTREAM->index(INPUT->istream)
#define     HASEXCEPTION()                      (PSRSTATE->error == ANTLR3_TRUE)
#define     EXCEPTION                           PSRSTATE->exception
#define     MATCHT(t, fs)                       RECOGNIZER->match(RECOGNIZER, t, fs)
#define     MATCHANYT()                         RECOGNIZER->matchAny(RECOGNIZER)
#define     FOLLOWSTACK                         PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define     FOLLOWPUSH(x)
#define     FOLLOWPOP()
#else
#define     FOLLOWPUSH(x)                       FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define     FOLLOWPOP()                         FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define     PRECOVER()                          RECOGNIZER->recover(RECOGNIZER)
#define     PREPORTERROR()                      RECOGNIZER->reportError(RECOGNIZER)
#define     LA(n)                               INPUT->istream->_LA(ISTREAM, n)
#define     LT(n)                               INPUT->_LT(INPUT, n)
#define     CONSTRUCTEX()                       RECOGNIZER->exConstruct(RECOGNIZER)
#define     CONSUME()                           ISTREAM->consume(ISTREAM)
#define     MARK()                              ISTREAM->mark(ISTREAM)
#define     REWIND(m)                           ISTREAM->rewind(ISTREAM, m)
#define     REWINDLAST()                        ISTREAM->rewindLast(ISTREAM)
#define     SEEK(n)                             ISTREAM->seek(ISTREAM, n)
#define     PERRORRECOVERY                      PSRSTATE->errorRecovery
#define     FAILEDFLAG                          PSRSTATE->failed
#define     HASFAILED()                         (FAILEDFLAG == ANTLR3_TRUE)
#define     BACKTRACKING                        PSRSTATE->backtracking
#define     RECOVERFROMMISMATCHEDSET(s)         RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define     RECOVERFROMMISMATCHEDELEMENT(e)     RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define         RULEMEMO                                                PSRSTATE->ruleMemo
#define         DBG                                                             RECOGNIZER->debugger


#define         TOKTEXT(tok, txt)                               tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define     UP      ANTLR3_TOKEN_UP
#define     DOWN    ANTLR3_TOKEN_DOWN
#define     EOR     ANTLR3_TOKEN_EOR
#define     INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a cifParser_parse scope set
 */
static pcifParser_parse_SCOPE   pcifParser_parsePush(pcifParser ctx);
static void ANTLR3_CDECL parseFree(pcifParser_parse_SCOPE scope);
/* ----------------------------------------------------------------------------- */


/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL parseFree(pcifParser_parse_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a cifParser parse scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code:
 * \code
 *   ctx->pcifParser_parseTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as:
 * \code
 *   void ANTLR3_CDECL myfunc( pcifParser_parse_SCOPE ptr).
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 *
 */
static pcifParser_parse_SCOPE
pcifParser_parsePush(pcifParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pcifParser_parse_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pcifParser_parseStack->size(ctx->pcifParser_parseStack) > ctx->pcifParser_parseStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pcifParser_parse_SCOPE)ctx->pcifParser_parseStack->get(ctx->pcifParser_parseStack, ctx->pcifParser_parseStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pcifParser_parse_SCOPE) ANTLR3_MALLOC(sizeof(cifParser_parse_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pcifParser_parseStack->push(ctx->pcifParser_parseStack, newAttributes, (void (*)(void *))parseFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pcifParser_parseStack_limit++;

        /* Return value is the pointer to the new entry, which may be used locally
         * without de-referencing via the context.
     */
    return  newAttributes;
}







/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   cifParserTokenNames[38+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "ANY_PRINT_CHAR",
        (pANTLR3_UINT8) "CHAR_STRING",
        (pANTLR3_UINT8) "CIF",
        (pANTLR3_UINT8) "COMMENTS",
        (pANTLR3_UINT8) "DATA_",
        (pANTLR3_UINT8) "DATA_BLOCK",
        (pANTLR3_UINT8) "DATA_BLOCK_HEADING",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "DOUBLE_QUOTE",
        (pANTLR3_UINT8) "DOUBLE_QUOTED_STRING",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "GLOBAL_",
        (pANTLR3_UINT8) "INAPPLICABLE",
        (pANTLR3_UINT8) "INTEGER",
        (pANTLR3_UINT8) "LOOP",
        (pANTLR3_UINT8) "LOOP_",
        (pANTLR3_UINT8) "NON_BLANK_CHAR",
        (pANTLR3_UINT8) "NON_BLANK_CHAR_",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "NUMERIC",
        (pANTLR3_UINT8) "ORDINARY_CHAR",
        (pANTLR3_UINT8) "SAVE",
        (pANTLR3_UINT8) "SAVE_",
        (pANTLR3_UINT8) "SAVE_FRAME_HEADING",
        (pANTLR3_UINT8) "SEMI_COLON_TEXT_FIELD",
        (pANTLR3_UINT8) "SINGLE_QUOTE",
        (pANTLR3_UINT8) "SINGLE_QUOTED_STRING",
        (pANTLR3_UINT8) "STOP_",
        (pANTLR3_UINT8) "TAG",
        (pANTLR3_UINT8) "TAG_VALUE_PAIR",
        (pANTLR3_UINT8) "TEXT_LEAD_CHAR",
        (pANTLR3_UINT8) "UNKNOWN",
        (pANTLR3_UINT8) "UNQUOTED_STRING",
        (pANTLR3_UINT8) "UNSIGNED_INTEGER",
        (pANTLR3_UINT8) "WHITESPACE",
        (pANTLR3_UINT8) "'\\u001a'"
       };


/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pcifParser_parseStack
 */
void
pcifParser_parsePop(pcifParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
        // If the user supplied the scope entries with a free function,then call it first
        //
    if  (SCOPE_TOP(parse)->free != NULL)
        {
        SCOPE_TOP(parse)->free(SCOPE_TOP(parse));
        }

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pcifParser_parseStack_limit--;
    SCOPE_TOP(parse) = (pcifParser_parse_SCOPE)(ctx->pcifParser_parseStack->get(ctx->pcifParser_parseStack, ctx->pcifParser_parseStack_limit - 1));
}



// Forward declare the locally static matching functions we have generated.
//
static
 cifParser_parse_return
        parse    (pcifParser ctx, bool strict_);
static
 cifParser_cif_return
        cif    (pcifParser ctx);
static
 cifParser_loop_body_return
        loop_body    (pcifParser ctx);
static
 cifParser_save_frame_return
        save_frame    (pcifParser ctx);
static
 cifParser_data_items_return
        data_items    (pcifParser ctx);
static
 cifParser_data_block_heading_return
        data_block_heading    (pcifParser ctx);
static
 cifParser_data_block_return
        data_block    (pcifParser ctx);
static
 cifParser_loop_header_return
        loop_header    (pcifParser ctx);
static
 cifParser_value_return
        value    (pcifParser ctx);
static
 cifParser_char_string_return
        char_string    (pcifParser ctx);
static
 cifParser_text_field_return
        text_field    (pcifParser ctx);
static void     cifParserFree(pcifParser ctx);
static void     cifParserReset (pcifParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static  void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "cif.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
        return fileName;
}
/** \brief Create a new cifParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcifParser
cifParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
        // See if we can create a new parser with the standard constructor
        //
        return cifParserNewSSD(instream, NULL);
}

/** \brief Create a new cifParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcifParser
cifParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pcifParser ctx;         /* Context structure we will build and return   */

    ctx = (pcifParser) ANTLR3_CALLOC(1, sizeof(cifParser));

    if  (ctx == NULL)
    {
                // Failed to allocate memory for parser context
                //
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in cifParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser            = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our cifParser interface
     */
    ctx->parse  = parse;
    ctx->cif    = cif;
    ctx->loop_body      = loop_body;
    ctx->save_frame     = save_frame;
    ctx->data_items     = data_items;
    ctx->data_block_heading     = data_block_heading;
    ctx->data_block     = data_block;
    ctx->loop_header    = loop_header;
    ctx->value  = value;
    ctx->char_string    = char_string;
    ctx->text_field     = text_field;
    ctx->free                   = cifParserFree;
    ctx->reset                  = cifParserReset;
    ctx->getGrammarFileName     = getGrammarFileName;

    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pcifParser_parsePush     = pcifParser_parsePush;
    ctx->pcifParser_parseStack    = antlr3StackNew(0);
    ctx->pcifParser_parseStack_limit    = 0;
    ctx->pcifParser_parseTop      = NULL;



ADAPTOR = ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);

ctx->vectors    = antlr3VectorFactoryNew(0);
      PARSER->super = (void *)ctx;

    /* Install the token table
     */
    PSRSTATE->tokenNames   = cifParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
cifParserReset (pcifParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 cifParserFree(pcifParser ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pcifParser_parseStack->free(ctx->pcifParser_parseStack);



ctx->vectors->close(ctx->vectors);
/* We created the adaptor so we must free it
 */
ADAPTOR->free(ADAPTOR);
        // Free this parser
        //
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return cifParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_cif_in_parse135  */
static  ANTLR3_BITWORD FOLLOW_cif_in_parse135_bits[]    = { ANTLR3_UINT64_LIT(0x0000020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_cif_in_parse135       = { FOLLOW_cif_in_parse135_bits, 1      };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EOF_in_parse138  */
static  ANTLR3_BITWORD FOLLOW_EOF_in_parse138_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EOF_in_parse138       = { FOLLOW_EOF_in_parse138_bits, 1      };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_41_in_parse142  */
static  ANTLR3_BITWORD FOLLOW_41_in_parse142_bits[]     = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_41_in_parse142        = { FOLLOW_41_in_parse142_bits, 1       };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMENTS_in_cif162  */
static  ANTLR3_BITWORD FOLLOW_COMMENTS_in_cif162_bits[] = { ANTLR3_UINT64_LIT(0x0000000000020402) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMENTS_in_cif162    = { FOLLOW_COMMENTS_in_cif162_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_block_in_cif165  */
static  ANTLR3_BITWORD FOLLOW_data_block_in_cif165_bits[]       = { ANTLR3_UINT64_LIT(0x0000000000020402) };
static  ANTLR3_BITSET_LIST FOLLOW_data_block_in_cif165  = { FOLLOW_data_block_in_cif165_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_loop_body184  */
static  ANTLR3_BITWORD FOLLOW_value_in_loop_body184_bits[]      = { ANTLR3_UINT64_LIT(0x0000002042040022) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_loop_body184 = { FOLLOW_value_in_loop_body184_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SAVE_FRAME_HEADING_in_save_frame198  */
static  ANTLR3_BITWORD FOLLOW_SAVE_FRAME_HEADING_in_save_frame198_bits[]        = { ANTLR3_UINT64_LIT(0x0000000400200000) };
static  ANTLR3_BITSET_LIST FOLLOW_SAVE_FRAME_HEADING_in_save_frame198   = { FOLLOW_SAVE_FRAME_HEADING_in_save_frame198_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_items_in_save_frame200  */
static  ANTLR3_BITWORD FOLLOW_data_items_in_save_frame200_bits[]        = { ANTLR3_UINT64_LIT(0x0000000408200000) };
static  ANTLR3_BITSET_LIST FOLLOW_data_items_in_save_frame200   = { FOLLOW_data_items_in_save_frame200_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SAVE_in_save_frame203  */
static  ANTLR3_BITWORD FOLLOW_SAVE_in_save_frame203_bits[]      = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SAVE_in_save_frame203 = { FOLLOW_SAVE_in_save_frame203_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TAG_in_data_items228  */
static  ANTLR3_BITWORD FOLLOW_TAG_in_data_items228_bits[]       = { ANTLR3_UINT64_LIT(0x0000002042040020) };
static  ANTLR3_BITSET_LIST FOLLOW_TAG_in_data_items228  = { FOLLOW_TAG_in_data_items228_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_data_items230  */
static  ANTLR3_BITWORD FOLLOW_value_in_data_items230_bits[]     = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_data_items230        = { FOLLOW_value_in_data_items230_bits, 1       };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_header_in_data_items248  */
static  ANTLR3_BITWORD FOLLOW_loop_header_in_data_items248_bits[]       = { ANTLR3_UINT64_LIT(0x0000002042040020) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_header_in_data_items248  = { FOLLOW_loop_header_in_data_items248_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_body_in_data_items250  */
static  ANTLR3_BITWORD FOLLOW_loop_body_in_data_items250_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_body_in_data_items250    = { FOLLOW_loop_body_in_data_items250_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DATA_BLOCK_HEADING_in_data_block_heading273  */
static  ANTLR3_BITWORD FOLLOW_DATA_BLOCK_HEADING_in_data_block_heading273_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DATA_BLOCK_HEADING_in_data_block_heading273   = { FOLLOW_DATA_BLOCK_HEADING_in_data_block_heading273_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GLOBAL__in_data_block_heading279  */
static  ANTLR3_BITWORD FOLLOW_GLOBAL__in_data_block_heading279_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GLOBAL__in_data_block_heading279      = { FOLLOW_GLOBAL__in_data_block_heading279_bits, 1     };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_block_heading_in_data_block294  */
static  ANTLR3_BITWORD FOLLOW_data_block_heading_in_data_block294_bits[]        = { ANTLR3_UINT64_LIT(0x0000000420200002) };
static  ANTLR3_BITSET_LIST FOLLOW_data_block_heading_in_data_block294   = { FOLLOW_data_block_heading_in_data_block294_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_items_in_data_block298  */
static  ANTLR3_BITWORD FOLLOW_data_items_in_data_block298_bits[]        = { ANTLR3_UINT64_LIT(0x0000000420200002) };
static  ANTLR3_BITSET_LIST FOLLOW_data_items_in_data_block298   = { FOLLOW_data_items_in_data_block298_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_save_frame_in_data_block302  */
static  ANTLR3_BITWORD FOLLOW_save_frame_in_data_block302_bits[]        = { ANTLR3_UINT64_LIT(0x0000000420200002) };
static  ANTLR3_BITSET_LIST FOLLOW_save_frame_in_data_block302   = { FOLLOW_save_frame_in_data_block302_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LOOP__in_loop_header339  */
static  ANTLR3_BITWORD FOLLOW_LOOP__in_loop_header339_bits[]    = { ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_LOOP__in_loop_header339       = { FOLLOW_LOOP__in_loop_header339_bits, 1      };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TAG_in_loop_header341  */
static  ANTLR3_BITWORD FOLLOW_TAG_in_loop_header341_bits[]      = { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_TAG_in_loop_header341 = { FOLLOW_TAG_in_loop_header341_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INAPPLICABLE_in_value367  */
static  ANTLR3_BITWORD FOLLOW_INAPPLICABLE_in_value367_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INAPPLICABLE_in_value367      = { FOLLOW_INAPPLICABLE_in_value367_bits, 1     };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNKNOWN_in_value371  */
static  ANTLR3_BITWORD FOLLOW_UNKNOWN_in_value371_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_UNKNOWN_in_value371   = { FOLLOW_UNKNOWN_in_value371_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMERIC_in_value375  */
static  ANTLR3_BITWORD FOLLOW_NUMERIC_in_value375_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMERIC_in_value375   = { FOLLOW_NUMERIC_in_value375_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_char_string_in_value379  */
static  ANTLR3_BITWORD FOLLOW_char_string_in_value379_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_char_string_in_value379       = { FOLLOW_char_string_in_value379_bits, 1      };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_text_field_in_value383  */
static  ANTLR3_BITWORD FOLLOW_text_field_in_value383_bits[]     = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_text_field_in_value383        = { FOLLOW_text_field_in_value383_bits, 1       };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CHAR_STRING_in_char_string404  */
static  ANTLR3_BITWORD FOLLOW_CHAR_STRING_in_char_string404_bits[]      = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CHAR_STRING_in_char_string404 = { FOLLOW_CHAR_STRING_in_char_string404_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field415  */
static  ANTLR3_BITWORD FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field415_bits[]     = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field415        = { FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field415_bits, 1       };


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start parse
 * cif.g:63:1: parse[bool strict_] : cif ( EOF | '\\u001a' ) -> cif ;
 */
static cifParser_parse_return
parse(pcifParser ctx, bool strict_)
{
    cifParser_parse_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EOF2;
    pANTLR3_COMMON_TOKEN    char_literal3;
    cifParser_cif_return cif1;
    #undef      RETURN_TYPE_cif1
    #define     RETURN_TYPE_cif1 cifParser_cif_return

    pANTLR3_BASE_TREE EOF2_tree;
    pANTLR3_BASE_TREE char_literal3_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_41;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EOF;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_cif;
    /* Initialize rule variables
     */
    ctx->pcifParser_parseTop = pcifParser_parsePush(ctx);
    root_0 = NULL;

     (SCOPE_TOP(parse))->strict= strict_;
    EOF2       = NULL;
    char_literal3       = NULL;
    cif1.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    EOF2_tree   = NULL;
    char_literal3_tree   = NULL;

    stream_41   = NULL;
    #define CREATE_stream_41  if (stream_41 == NULL) {stream_41 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 41"); }
    stream_EOF   = NULL;
    #define CREATE_stream_EOF  if (stream_EOF == NULL) {stream_EOF = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EOF"); }
    stream_cif   = NULL;
    #define CREATE_stream_cif  if (stream_cif == NULL) {stream_cif = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule cif"); }

    retval.tree  = NULL;

    {
        // cif.g:67:3: ( cif ( EOF | '\\u001a' ) -> cif )
        // cif.g:67:5: cif ( EOF | '\\u001a' )
        {
            FOLLOWPUSH(FOLLOW_cif_in_parse135);
            cif1=cif(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparseEx;
            }

            CREATE_stream_cif; stream_cif->add(stream_cif, cif1.tree, NULL);

            // cif.g:67:9: ( EOF | '\\u001a' )
            {
                int alt1=2;
                switch ( LA(1) )
                {
                case EOF:
                        {
                                alt1=1;
                        }
                    break;
                case 41:
                        {
                                alt1=2;
                        }
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 1;
                    EXCEPTION->state        = 0;


                    goto ruleparseEx;

                }

                switch (alt1)
                {
                case 1:
                    // cif.g:67:10: EOF
                    {
                        EOF2 = (pANTLR3_COMMON_TOKEN) MATCHT(EOF, &FOLLOW_EOF_in_parse138);
                        if  (HASEXCEPTION())
                        {
                            goto ruleparseEx;
                        }

                        CREATE_stream_EOF; stream_EOF->add(stream_EOF, EOF2, NULL);


                    }
                    break;
                case 2:
                    // cif.g:67:16: '\\u001a'
                    {
                        char_literal3 = (pANTLR3_COMMON_TOKEN) MATCHT(41, &FOLLOW_41_in_parse142);
                        if  (HASEXCEPTION())
                        {
                            goto ruleparseEx;
                        }

                        CREATE_stream_41; stream_41->add(stream_41, char_literal3, NULL);


                    }
                    break;

                }
            }

            /* AST REWRITE
             * elements          : cif
             * token labels      :
             * rule labels       : retval
             * token list labels :
             * rule list labels  :
             */
            {
                pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                root_0                      = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                retval.tree    = root_0;
                // 67:37: -> cif
                {
                    ADAPTOR->addChild(ADAPTOR, root_0, stream_cif == NULL ? NULL : stream_cif->nextTree(stream_cif));

                }


                retval.tree = root_0; // set result root
                if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleparseEx; /* Prevent compiler warnings */
    ruleparseEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_41 != NULL) stream_41->free(stream_41);
        if (stream_EOF != NULL) stream_EOF->free(stream_EOF);
        if (stream_cif != NULL) stream_cif->free(stream_cif);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    pcifParser_parsePop(ctx);

    return retval;
}
/* $ANTLR end parse */

/**
 * $ANTLR start cif
 * cif.g:72:1: cif : ( COMMENTS )? ( data_block )* -> ( data_block )* ;
 */
static cifParser_cif_return
cif(pcifParser ctx)
{
    cifParser_cif_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMENTS4;
    cifParser_data_block_return data_block5;
    #undef      RETURN_TYPE_data_block5
    #define     RETURN_TYPE_data_block5 cifParser_data_block_return

    pANTLR3_BASE_TREE COMMENTS4_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMENTS;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_data_block;
    /* Initialize rule variables
     */

    root_0 = NULL;

    COMMENTS4       = NULL;
    data_block5.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    COMMENTS4_tree   = NULL;

    stream_COMMENTS   = NULL;
    #define CREATE_stream_COMMENTS  if (stream_COMMENTS == NULL) {stream_COMMENTS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMENTS"); }
    stream_data_block   = NULL;
    #define CREATE_stream_data_block  if (stream_data_block == NULL) {stream_data_block = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule data_block"); }

    retval.tree  = NULL;

    {
        // cif.g:73:3: ( ( COMMENTS )? ( data_block )* -> ( data_block )* )
        // cif.g:73:5: ( COMMENTS )? ( data_block )*
        {
            // cif.g:73:5: ( COMMENTS )?
            {
                int alt2=2;
                switch ( LA(1) )
                {
                    case COMMENTS:
                        {
                                alt2=1;
                        }
                        break;
                }

                switch (alt2)
                {
                case 1:
                    // cif.g:73:5: COMMENTS
                    {
                        COMMENTS4 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMENTS, &FOLLOW_COMMENTS_in_cif162);
                        if  (HASEXCEPTION())
                        {
                            goto rulecifEx;
                        }

                        CREATE_stream_COMMENTS; stream_COMMENTS->add(stream_COMMENTS, COMMENTS4, NULL);


                    }
                    break;

                }
            }

            // cif.g:73:15: ( data_block )*

            for (;;)
            {
                int alt3=2;
                {
                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                    */
                    int LA3_0 = LA(1);
                    if ( (LA3_0 == DATA_BLOCK_HEADING))
                    {
                        alt3=1;
                    }
                    else if ( ((!(SCOPE_TOP(parse))->strict)) && (LA3_0 == GLOBAL_))
                    {
                        alt3=1;
                    }

                }
                switch (alt3)
                {
                case 1:
                    // cif.g:73:15: data_block
                    {
                        FOLLOWPUSH(FOLLOW_data_block_in_cif165);
                        data_block5=data_block(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto rulecifEx;
                        }

                        CREATE_stream_data_block; stream_data_block->add(stream_data_block, data_block5.tree, NULL);

                    }
                    break;

                default:
                    goto loop3; /* break out of the loop */
                    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


            /* AST REWRITE
             * elements          : data_block
             * token labels      :
             * rule labels       : retval
             * token list labels :
             * rule list labels  :
             */
            {
                pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                root_0                      = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                retval.tree    = root_0;
                // 73:27: -> ( data_block )*
                {
                    // cif.g:73:30: ( data_block )*
                    {
                        while ( (stream_data_block != NULL && stream_data_block->hasNext(stream_data_block))  )
                        {
                                ADAPTOR->addChild(ADAPTOR, root_0, stream_data_block == NULL ? NULL : stream_data_block->nextTree(stream_data_block));

                        }
                        if (stream_data_block != NULL) stream_data_block->reset(stream_data_block);

                    }

                }


                retval.tree = root_0; // set result root
                if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulecifEx; /* Prevent compiler warnings */
    rulecifEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_COMMENTS != NULL) stream_COMMENTS->free(stream_COMMENTS);
        if (stream_data_block != NULL) stream_data_block->free(stream_data_block);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end cif */

/**
 * $ANTLR start loop_body
 * cif.g:76:1: loop_body : ( value )+ ;
 */
static cifParser_loop_body_return
loop_body(pcifParser ctx)
{
    cifParser_loop_body_return retval;


    pANTLR3_BASE_TREE root_0;

    cifParser_value_return value6;
    #undef      RETURN_TYPE_value6
    #define     RETURN_TYPE_value6 cifParser_value_return


    /* Initialize rule variables
     */

    root_0 = NULL;

    value6.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;




    retval.tree  = NULL;

    {
        // cif.g:77:3: ( ( value )+ )
        // cif.g:77:5: ( value )+
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // cif.g:77:5: ( value )+
            {
                int cnt4=0;

                for (;;)
                {
                    int alt4=2;
                switch ( LA(1) )
                {
                case CHAR_STRING:
                case INAPPLICABLE:
                case NUMERIC:
                case SEMI_COLON_TEXT_FIELD:
                case UNKNOWN:
                        {
                                alt4=1;
                        }
                    break;

                }

                switch (alt4)
                {
                    case 1:
                        // cif.g:77:5: value
                        {
                            FOLLOWPUSH(FOLLOW_value_in_loop_body184);
                            value6=value(ctx);

                            FOLLOWPOP();
                            if  (HASEXCEPTION())
                            {
                                goto ruleloop_bodyEx;
                            }

                            ADAPTOR->addChild(ADAPTOR, root_0, value6.tree);

                        }
                        break;

                    default:

                        if ( cnt4 >= 1 )
                        {
                            goto loop4;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleloop_bodyEx;
                }
                cnt4++;
                }
                loop4: ;        /* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleloop_bodyEx; /* Prevent compiler warnings */
    ruleloop_bodyEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end loop_body */

/**
 * $ANTLR start save_frame
 * cif.g:80:1: save_frame : SAVE_FRAME_HEADING ( data_items )+ SAVE -> ^( SAVE SAVE_FRAME_HEADING ( data_items )+ ) ;
 */
static cifParser_save_frame_return
save_frame(pcifParser ctx)
{
    cifParser_save_frame_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SAVE_FRAME_HEADING7;
    pANTLR3_COMMON_TOKEN    SAVE9;
    cifParser_data_items_return data_items8;
    #undef      RETURN_TYPE_data_items8
    #define     RETURN_TYPE_data_items8 cifParser_data_items_return

    pANTLR3_BASE_TREE SAVE_FRAME_HEADING7_tree;
    pANTLR3_BASE_TREE SAVE9_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SAVE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SAVE_FRAME_HEADING;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_data_items;
    /* Initialize rule variables
     */

    root_0 = NULL;

    SAVE_FRAME_HEADING7       = NULL;
    SAVE9       = NULL;
    data_items8.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    SAVE_FRAME_HEADING7_tree   = NULL;
    SAVE9_tree   = NULL;

    stream_SAVE   = NULL;
    #define CREATE_stream_SAVE  if (stream_SAVE == NULL) {stream_SAVE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SAVE"); }
    stream_SAVE_FRAME_HEADING   = NULL;
    #define CREATE_stream_SAVE_FRAME_HEADING  if (stream_SAVE_FRAME_HEADING == NULL) {stream_SAVE_FRAME_HEADING = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SAVE_FRAME_HEADING"); }
    stream_data_items   = NULL;
    #define CREATE_stream_data_items  if (stream_data_items == NULL) {stream_data_items = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule data_items"); }

    retval.tree  = NULL;

    {
        // cif.g:81:3: ( SAVE_FRAME_HEADING ( data_items )+ SAVE -> ^( SAVE SAVE_FRAME_HEADING ( data_items )+ ) )
        // cif.g:81:5: SAVE_FRAME_HEADING ( data_items )+ SAVE
        {
            SAVE_FRAME_HEADING7 = (pANTLR3_COMMON_TOKEN) MATCHT(SAVE_FRAME_HEADING, &FOLLOW_SAVE_FRAME_HEADING_in_save_frame198);
            if  (HASEXCEPTION())
            {
                goto rulesave_frameEx;
            }

            CREATE_stream_SAVE_FRAME_HEADING; stream_SAVE_FRAME_HEADING->add(stream_SAVE_FRAME_HEADING, SAVE_FRAME_HEADING7, NULL);


            // cif.g:81:24: ( data_items )+
            {
                int cnt5=0;

                for (;;)
                {
                    int alt5=2;
                switch ( LA(1) )
                {
                case LOOP_:
                case TAG:
                        {
                                alt5=1;
                        }
                    break;

                }

                switch (alt5)
                {
                    case 1:
                        // cif.g:81:24: data_items
                        {
                            FOLLOWPUSH(FOLLOW_data_items_in_save_frame200);
                            data_items8=data_items(ctx);

                            FOLLOWPOP();
                            if  (HASEXCEPTION())
                            {
                                goto rulesave_frameEx;
                            }

                            CREATE_stream_data_items; stream_data_items->add(stream_data_items, data_items8.tree, NULL);

                        }
                        break;

                    default:

                        if ( cnt5 >= 1 )
                        {
                            goto loop5;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto rulesave_frameEx;
                }
                cnt5++;
                }
                loop5: ;        /* Jump to here if this rule does not match */
            }

            SAVE9 = (pANTLR3_COMMON_TOKEN) MATCHT(SAVE, &FOLLOW_SAVE_in_save_frame203);
            if  (HASEXCEPTION())
            {
                goto rulesave_frameEx;
            }

            CREATE_stream_SAVE; stream_SAVE->add(stream_SAVE, SAVE9, NULL);


            /* AST REWRITE
             * elements          : SAVE_FRAME_HEADING, SAVE, data_items
             * token labels      :
             * rule labels       : retval
             * token list labels :
             * rule list labels  :
             */
            {
                pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                root_0                      = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                retval.tree    = root_0;
                // 81:41: -> ^( SAVE SAVE_FRAME_HEADING ( data_items )+ )
                {
                    // cif.g:81:44: ^( SAVE SAVE_FRAME_HEADING ( data_items )+ )
                    {
                        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR,
                        stream_SAVE == NULL ? NULL : stream_SAVE->nextNode(stream_SAVE)
                        , root_1));

                        ADAPTOR->addChild(ADAPTOR, root_1,
                        stream_SAVE_FRAME_HEADING == NULL ? NULL : stream_SAVE_FRAME_HEADING->nextNode(stream_SAVE_FRAME_HEADING)
                        );

                        if ((stream_data_items == NULL || !stream_data_items->hasNext(stream_data_items))  )
                        {
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
                            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
                        }
                        else
                        {
                                while ( (stream_data_items->hasNext(stream_data_items))  ) {
                                        ADAPTOR->addChild(ADAPTOR, root_1, stream_data_items == NULL ? NULL : stream_data_items->nextTree(stream_data_items));

                                }
                                stream_data_items->reset(stream_data_items);

                        }
                        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                    }

                }


                retval.tree = root_0; // set result root
                if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulesave_frameEx; /* Prevent compiler warnings */
    rulesave_frameEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SAVE != NULL) stream_SAVE->free(stream_SAVE);
        if (stream_SAVE_FRAME_HEADING != NULL) stream_SAVE_FRAME_HEADING->free(stream_SAVE_FRAME_HEADING);
        if (stream_data_items != NULL) stream_data_items->free(stream_data_items);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end save_frame */

/**
 * $ANTLR start data_items
 * cif.g:84:1: data_items : ( TAG value -> ^( TAG_VALUE_PAIR TAG value ) | loop_header loop_body -> ^( LOOP loop_header loop_body ) );
 */
static cifParser_data_items_return
data_items(pcifParser ctx)
{
    cifParser_data_items_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    TAG10;
    cifParser_value_return value11;
    #undef      RETURN_TYPE_value11
    #define     RETURN_TYPE_value11 cifParser_value_return

    cifParser_loop_header_return loop_header12;
    #undef      RETURN_TYPE_loop_header12
    #define     RETURN_TYPE_loop_header12 cifParser_loop_header_return

    cifParser_loop_body_return loop_body13;
    #undef      RETURN_TYPE_loop_body13
    #define     RETURN_TYPE_loop_body13 cifParser_loop_body_return

    pANTLR3_BASE_TREE TAG10_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_TAG;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_loop_header;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_value;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_loop_body;
    /* Initialize rule variables
     */

    root_0 = NULL;

    TAG10       = NULL;
    value11.tree = NULL;

    loop_header12.tree = NULL;

    loop_body13.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    TAG10_tree   = NULL;

    stream_TAG   = NULL;
    #define CREATE_stream_TAG  if (stream_TAG == NULL) {stream_TAG = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token TAG"); }
    stream_loop_header   = NULL;
    #define CREATE_stream_loop_header  if (stream_loop_header == NULL) {stream_loop_header = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule loop_header"); }
    stream_value   = NULL;
    #define CREATE_stream_value  if (stream_value == NULL) {stream_value = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule value"); }
    stream_loop_body   = NULL;
    #define CREATE_stream_loop_body  if (stream_loop_body == NULL) {stream_loop_body = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule loop_body"); }

    retval.tree  = NULL;

    {
        {
            //  cif.g:85:3: ( TAG value -> ^( TAG_VALUE_PAIR TAG value ) | loop_header loop_body -> ^( LOOP loop_header loop_body ) )

            ANTLR3_UINT32 alt6;

            alt6=2;

            switch ( LA(1) )
            {
            case TAG:
                {
                        alt6=1;
                }
                break;
            case LOOP_:
                {
                        alt6=2;
                }
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto ruledata_itemsEx;

            }

            switch (alt6)
            {
                case 1:
                    // cif.g:85:6: TAG value
                    {
                        TAG10 = (pANTLR3_COMMON_TOKEN) MATCHT(TAG, &FOLLOW_TAG_in_data_items228);
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_itemsEx;
                        }

                        CREATE_stream_TAG; stream_TAG->add(stream_TAG, TAG10, NULL);


                        FOLLOWPUSH(FOLLOW_value_in_data_items230);
                        value11=value(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_itemsEx;
                        }

                        CREATE_stream_value; stream_value->add(stream_value, value11.tree, NULL);

                        /* AST REWRITE
                         * elements          : value, TAG
                         * token labels      :
                         * rule labels       : retval
                         * token list labels :
                         * rule list labels  :
                         */
                        {
                                pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                                stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                                root_0                      = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                                retval.tree    = root_0;
                                // 85:16: -> ^( TAG_VALUE_PAIR TAG value )
                                {
                                    // cif.g:85:19: ^( TAG_VALUE_PAIR TAG value )
                                    {
                                        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                                        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR,
                                        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TAG_VALUE_PAIR, (pANTLR3_UINT8)"TAG_VALUE_PAIR")
                                        , root_1));

                                        ADAPTOR->addChild(ADAPTOR, root_1,
                                        stream_TAG == NULL ? NULL : stream_TAG->nextNode(stream_TAG)
                                        );

                                        ADAPTOR->addChild(ADAPTOR, root_1, stream_value == NULL ? NULL : stream_value->nextTree(stream_value));

                                        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                                    }

                                }


                                retval.tree = root_0; // set result root
                                if (stream_retval != NULL) stream_retval->free(stream_retval);


                        }
                    }
                    break;
                case 2:
                    // cif.g:86:7: loop_header loop_body
                    {
                        FOLLOWPUSH(FOLLOW_loop_header_in_data_items248);
                        loop_header12=loop_header(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_itemsEx;
                        }

                        CREATE_stream_loop_header; stream_loop_header->add(stream_loop_header, loop_header12.tree, NULL);

                        FOLLOWPUSH(FOLLOW_loop_body_in_data_items250);
                        loop_body13=loop_body(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_itemsEx;
                        }

                        CREATE_stream_loop_body; stream_loop_body->add(stream_loop_body, loop_body13.tree, NULL);

                        /* AST REWRITE
                         * elements          : loop_body, loop_header
                         * token labels      :
                         * rule labels       : retval
                         * token list labels :
                         * rule list labels  :
                         */
                        {
                                pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                                stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                                root_0                      = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                                retval.tree    = root_0;
                                // 86:29: -> ^( LOOP loop_header loop_body )
                                {
                                    // cif.g:86:32: ^( LOOP loop_header loop_body )
                                    {
                                        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                                        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR,
                                        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, LOOP, (pANTLR3_UINT8)"LOOP")
                                        , root_1));

                                        ADAPTOR->addChild(ADAPTOR, root_1, stream_loop_header == NULL ? NULL : stream_loop_header->nextTree(stream_loop_header));

                                        ADAPTOR->addChild(ADAPTOR, root_1, stream_loop_body == NULL ? NULL : stream_loop_body->nextTree(stream_loop_body));

                                        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                                    }

                                }


                                retval.tree = root_0; // set result root
                                if (stream_retval != NULL) stream_retval->free(stream_retval);


                        }
                    }
                    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledata_itemsEx; /* Prevent compiler warnings */
    ruledata_itemsEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_TAG != NULL) stream_TAG->free(stream_TAG);
        if (stream_loop_header != NULL) stream_loop_header->free(stream_loop_header);
        if (stream_value != NULL) stream_value->free(stream_value);
        if (stream_loop_body != NULL) stream_loop_body->free(stream_loop_body);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end data_items */

/**
 * $ANTLR start data_block_heading
 * cif.g:89:1: data_block_heading : ( DATA_BLOCK_HEADING |{...}? => GLOBAL_ );
 */
static cifParser_data_block_heading_return
data_block_heading(pcifParser ctx)
{
    cifParser_data_block_heading_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    DATA_BLOCK_HEADING14;
    pANTLR3_COMMON_TOKEN    GLOBAL_15;

    pANTLR3_BASE_TREE DATA_BLOCK_HEADING14_tree;
    pANTLR3_BASE_TREE GLOBAL_15_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    DATA_BLOCK_HEADING14       = NULL;
    GLOBAL_15       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    DATA_BLOCK_HEADING14_tree   = NULL;
    GLOBAL_15_tree   = NULL;


    retval.tree  = NULL;

    {
        {
            //  cif.g:90:3: ( DATA_BLOCK_HEADING |{...}? => GLOBAL_ )

            ANTLR3_UINT32 alt7;

            alt7=2;

            {
                int LA7_0 = LA(1);
                if ( (LA7_0 == DATA_BLOCK_HEADING))
                {
                    alt7=1;
                }
                else if ( ((!(SCOPE_TOP(parse))->strict)) && (LA7_0 == GLOBAL_))
                {
                    alt7=2;
                }
                else
                {

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 7;
                    EXCEPTION->state        = 0;


                    goto ruledata_block_headingEx;

                }
            }
            switch (alt7)
            {
                case 1:
                    // cif.g:90:5: DATA_BLOCK_HEADING
                    {
                        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


                        DATA_BLOCK_HEADING14 = (pANTLR3_COMMON_TOKEN) MATCHT(DATA_BLOCK_HEADING, &FOLLOW_DATA_BLOCK_HEADING_in_data_block_heading273);
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_block_headingEx;
                        }

                        DATA_BLOCK_HEADING14_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, DATA_BLOCK_HEADING14));
                        ADAPTOR->addChild(ADAPTOR, root_0, DATA_BLOCK_HEADING14_tree);


                    }
                    break;
                case 2:
                    // cif.g:90:26: {...}? => GLOBAL_
                    {
                        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


                        if ( !((!(SCOPE_TOP(parse))->strict)) )
                        {
                                CONSTRUCTEX();
                                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                                EXCEPTION->message      = (void *)"!$parse::strict";
                                EXCEPTION->ruleName      = (void *)"data_block_heading";


                        }

                        GLOBAL_15 = (pANTLR3_COMMON_TOKEN) MATCHT(GLOBAL_, &FOLLOW_GLOBAL__in_data_block_heading279);
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_block_headingEx;
                        }

                        GLOBAL_15_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, GLOBAL_15));
                        ADAPTOR->addChild(ADAPTOR, root_0, GLOBAL_15_tree);


                    }
                    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruledata_block_headingEx; /* Prevent compiler warnings */
    ruledata_block_headingEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end data_block_heading */

/**
 * $ANTLR start data_block
 * cif.g:93:1: data_block : ( data_block_heading ( data_items | save_frame )* ) -> ^( DATA_BLOCK data_block_heading ( data_items )* ( save_frame )* ) ;
 */
static cifParser_data_block_return
data_block(pcifParser ctx)
{
    cifParser_data_block_return retval;


    pANTLR3_BASE_TREE root_0;

    cifParser_data_block_heading_return data_block_heading16;
    #undef      RETURN_TYPE_data_block_heading16
    #define     RETURN_TYPE_data_block_heading16 cifParser_data_block_heading_return

    cifParser_data_items_return data_items17;
    #undef      RETURN_TYPE_data_items17
    #define     RETURN_TYPE_data_items17 cifParser_data_items_return

    cifParser_save_frame_return save_frame18;
    #undef      RETURN_TYPE_save_frame18
    #define     RETURN_TYPE_save_frame18 cifParser_save_frame_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_save_frame;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_data_block_heading;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_data_items;
    /* Initialize rule variables
     */

    root_0 = NULL;

    data_block_heading16.tree = NULL;

    data_items17.tree = NULL;

    save_frame18.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    stream_save_frame   = NULL;
    #define CREATE_stream_save_frame  if (stream_save_frame == NULL) {stream_save_frame = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule save_frame"); }
    stream_data_block_heading   = NULL;
    #define CREATE_stream_data_block_heading  if (stream_data_block_heading == NULL) {stream_data_block_heading = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule data_block_heading"); }
    stream_data_items   = NULL;
    #define CREATE_stream_data_items  if (stream_data_items == NULL) {stream_data_items = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule data_items"); }

    retval.tree  = NULL;

    {
        // cif.g:94:3: ( ( data_block_heading ( data_items | save_frame )* ) -> ^( DATA_BLOCK data_block_heading ( data_items )* ( save_frame )* ) )
        // cif.g:94:5: ( data_block_heading ( data_items | save_frame )* )
        {
            // cif.g:94:5: ( data_block_heading ( data_items | save_frame )* )
            // cif.g:94:7: data_block_heading ( data_items | save_frame )*
            {
                FOLLOWPUSH(FOLLOW_data_block_heading_in_data_block294);
                data_block_heading16=data_block_heading(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruledata_blockEx;
                }

                CREATE_stream_data_block_heading; stream_data_block_heading->add(stream_data_block_heading, data_block_heading16.tree, NULL);

                // cif.g:94:26: ( data_items | save_frame )*

                for (;;)
                {
                    int alt8=3;
                    switch ( LA(1) )
                    {
                    case LOOP_:
                    case TAG:
                        {
                                alt8=1;
                        }
                        break;
                    case SAVE_FRAME_HEADING:
                        {
                                alt8=2;
                        }
                        break;

                    }

                    switch (alt8)
                    {
                        case 1:
                            // cif.g:94:28: data_items
                            {
                                FOLLOWPUSH(FOLLOW_data_items_in_data_block298);
                                data_items17=data_items(ctx);

                                FOLLOWPOP();
                                if  (HASEXCEPTION())
                                {
                                    goto ruledata_blockEx;
                                }

                                CREATE_stream_data_items; stream_data_items->add(stream_data_items, data_items17.tree, NULL);

                            }
                            break;
                        case 2:
                            // cif.g:94:41: save_frame
                            {
                                FOLLOWPUSH(FOLLOW_save_frame_in_data_block302);
                                save_frame18=save_frame(ctx);

                                FOLLOWPOP();
                                if  (HASEXCEPTION())
                                {
                                    goto ruledata_blockEx;
                                }

                                CREATE_stream_save_frame; stream_save_frame->add(stream_save_frame, save_frame18.tree, NULL);

                            }
                            break;

                        default:
                            goto loop8; /* break out of the loop */
                            break;
                    }
                }
                loop8: ; /* Jump out to here if this rule does not match */


            }


            /* AST REWRITE
             * elements          : data_block_heading, save_frame, data_items
             * token labels      :
             * rule labels       : retval
             * token list labels :
             * rule list labels  :
             */
            {
                pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                root_0                      = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                retval.tree    = root_0;
                // 95:5: -> ^( DATA_BLOCK data_block_heading ( data_items )* ( save_frame )* )
                {
                    // cif.g:95:8: ^( DATA_BLOCK data_block_heading ( data_items )* ( save_frame )* )
                    {
                        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR,
                        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DATA_BLOCK, (pANTLR3_UINT8)"DATA_BLOCK")
                        , root_1));

                        ADAPTOR->addChild(ADAPTOR, root_1, stream_data_block_heading == NULL ? NULL : stream_data_block_heading->nextTree(stream_data_block_heading));

                        // cif.g:95:40: ( data_items )*
                        {
                                while ( (stream_data_items != NULL && stream_data_items->hasNext(stream_data_items))  )
                                {
                                        ADAPTOR->addChild(ADAPTOR, root_1, stream_data_items == NULL ? NULL : stream_data_items->nextTree(stream_data_items));

                                }
                                if (stream_data_items != NULL) stream_data_items->reset(stream_data_items);

                        }

                        // cif.g:95:52: ( save_frame )*
                        {
                                while ( (stream_save_frame != NULL && stream_save_frame->hasNext(stream_save_frame))  )
                                {
                                        ADAPTOR->addChild(ADAPTOR, root_1, stream_save_frame == NULL ? NULL : stream_save_frame->nextTree(stream_save_frame));

                                }
                                if (stream_save_frame != NULL) stream_save_frame->reset(stream_save_frame);

                        }

                        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                    }

                }


                retval.tree = root_0; // set result root
                if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruledata_blockEx; /* Prevent compiler warnings */
    ruledata_blockEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_save_frame != NULL) stream_save_frame->free(stream_save_frame);
        if (stream_data_block_heading != NULL) stream_data_block_heading->free(stream_data_block_heading);
        if (stream_data_items != NULL) stream_data_items->free(stream_data_items);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end data_block */

/**
 * $ANTLR start loop_header
 * cif.g:98:1: loop_header : LOOP_ ( TAG )+ -> ^( LOOP_ ( TAG )+ ) ;
 */
static cifParser_loop_header_return
loop_header(pcifParser ctx)
{
    cifParser_loop_header_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LOOP_19;
    pANTLR3_COMMON_TOKEN    TAG20;

    pANTLR3_BASE_TREE LOOP_19_tree;
    pANTLR3_BASE_TREE TAG20_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LOOP_;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_TAG;

    /* Initialize rule variables
     */

    root_0 = NULL;

    LOOP_19       = NULL;
    TAG20       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    LOOP_19_tree   = NULL;
    TAG20_tree   = NULL;

    stream_LOOP_   = NULL;
    #define CREATE_stream_LOOP_  if (stream_LOOP_ == NULL) {stream_LOOP_ = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LOOP_"); }
    stream_TAG   = NULL;
    #define CREATE_stream_TAG  if (stream_TAG == NULL) {stream_TAG = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token TAG"); }

    retval.tree  = NULL;

    {
        // cif.g:99:3: ( LOOP_ ( TAG )+ -> ^( LOOP_ ( TAG )+ ) )
        // cif.g:99:5: LOOP_ ( TAG )+
        {
            LOOP_19 = (pANTLR3_COMMON_TOKEN) MATCHT(LOOP_, &FOLLOW_LOOP__in_loop_header339);
            if  (HASEXCEPTION())
            {
                goto ruleloop_headerEx;
            }

            CREATE_stream_LOOP_; stream_LOOP_->add(stream_LOOP_, LOOP_19, NULL);


            // cif.g:99:11: ( TAG )+
            {
                int cnt9=0;

                for (;;)
                {
                    int alt9=2;
                switch ( LA(1) )
                {
                case TAG:
                        {
                                alt9=1;
                        }
                    break;

                }

                switch (alt9)
                {
                    case 1:
                        // cif.g:99:11: TAG
                        {
                            TAG20 = (pANTLR3_COMMON_TOKEN) MATCHT(TAG, &FOLLOW_TAG_in_loop_header341);
                            if  (HASEXCEPTION())
                            {
                                goto ruleloop_headerEx;
                            }

                            CREATE_stream_TAG; stream_TAG->add(stream_TAG, TAG20, NULL);


                        }
                        break;

                    default:

                        if ( cnt9 >= 1 )
                        {
                            goto loop9;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleloop_headerEx;
                }
                cnt9++;
                }
                loop9: ;        /* Jump to here if this rule does not match */
            }

            /* AST REWRITE
             * elements          : TAG, LOOP_
             * token labels      :
             * rule labels       : retval
             * token list labels :
             * rule list labels  :
             */
            {
                pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                root_0                      = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                retval.tree    = root_0;
                // 99:16: -> ^( LOOP_ ( TAG )+ )
                {
                    // cif.g:99:19: ^( LOOP_ ( TAG )+ )
                    {
                        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR,
                        stream_LOOP_ == NULL ? NULL : stream_LOOP_->nextNode(stream_LOOP_)
                        , root_1));

                        if ((stream_TAG == NULL || !stream_TAG->hasNext(stream_TAG))  )
                        {
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
                            EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
                        }
                        else
                        {
                                while ( (stream_TAG->hasNext(stream_TAG))  ) {
                                        ADAPTOR->addChild(ADAPTOR, root_1,
                                        stream_TAG == NULL ? NULL : stream_TAG->nextNode(stream_TAG)
                                        );

                                }
                                stream_TAG->reset(stream_TAG);

                        }
                        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
                    }

                }


                retval.tree = root_0; // set result root
                if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleloop_headerEx; /* Prevent compiler warnings */
    ruleloop_headerEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LOOP_ != NULL) stream_LOOP_->free(stream_LOOP_);
        if (stream_TAG != NULL) stream_TAG->free(stream_TAG);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end loop_header */

/**
 * $ANTLR start value
 * cif.g:106:1: value : ( INAPPLICABLE | UNKNOWN | NUMERIC | char_string | text_field );
 */
static cifParser_value_return
value(pcifParser ctx)
{
    cifParser_value_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INAPPLICABLE21;
    pANTLR3_COMMON_TOKEN    UNKNOWN22;
    pANTLR3_COMMON_TOKEN    NUMERIC23;
    cifParser_char_string_return char_string24;
    #undef      RETURN_TYPE_char_string24
    #define     RETURN_TYPE_char_string24 cifParser_char_string_return

    cifParser_text_field_return text_field25;
    #undef      RETURN_TYPE_text_field25
    #define     RETURN_TYPE_text_field25 cifParser_text_field_return

    pANTLR3_BASE_TREE INAPPLICABLE21_tree;
    pANTLR3_BASE_TREE UNKNOWN22_tree;
    pANTLR3_BASE_TREE NUMERIC23_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    INAPPLICABLE21       = NULL;
    UNKNOWN22       = NULL;
    NUMERIC23       = NULL;
    char_string24.tree = NULL;

    text_field25.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    INAPPLICABLE21_tree   = NULL;
    UNKNOWN22_tree   = NULL;
    NUMERIC23_tree   = NULL;


    retval.tree  = NULL;

    {
        {
            //  cif.g:107:3: ( INAPPLICABLE | UNKNOWN | NUMERIC | char_string | text_field )

            ANTLR3_UINT32 alt10;

            alt10=5;

            switch ( LA(1) )
            {
            case INAPPLICABLE:
                {
                        alt10=1;
                }
                break;
            case UNKNOWN:
                {
                        alt10=2;
                }
                break;
            case NUMERIC:
                {
                        alt10=3;
                }
                break;
            case CHAR_STRING:
                {
                        alt10=4;
                }
                break;
            case SEMI_COLON_TEXT_FIELD:
                {
                        alt10=5;
                }
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 10;
                EXCEPTION->state        = 0;


                goto rulevalueEx;

            }

            switch (alt10)
            {
                case 1:
                    // cif.g:107:5: INAPPLICABLE
                    {
                        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


                        INAPPLICABLE21 = (pANTLR3_COMMON_TOKEN) MATCHT(INAPPLICABLE, &FOLLOW_INAPPLICABLE_in_value367);
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }

                        INAPPLICABLE21_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, INAPPLICABLE21));
                        ADAPTOR->addChild(ADAPTOR, root_0, INAPPLICABLE21_tree);


                    }
                    break;
                case 2:
                    // cif.g:107:20: UNKNOWN
                    {
                        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


                        UNKNOWN22 = (pANTLR3_COMMON_TOKEN) MATCHT(UNKNOWN, &FOLLOW_UNKNOWN_in_value371);
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }

                        UNKNOWN22_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, UNKNOWN22));
                        ADAPTOR->addChild(ADAPTOR, root_0, UNKNOWN22_tree);


                    }
                    break;
                case 3:
                    // cif.g:107:30: NUMERIC
                    {
                        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


                        NUMERIC23 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMERIC, &FOLLOW_NUMERIC_in_value375);
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }

                        NUMERIC23_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, NUMERIC23));
                        ADAPTOR->addChild(ADAPTOR, root_0, NUMERIC23_tree);


                    }
                    break;
                case 4:
                    // cif.g:107:40: char_string
                    {
                        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


                        FOLLOWPUSH(FOLLOW_char_string_in_value379);
                        char_string24=char_string(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }

                        ADAPTOR->addChild(ADAPTOR, root_0, char_string24.tree);

                    }
                    break;
                case 5:
                    // cif.g:107:54: text_field
                    {
                        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


                        FOLLOWPUSH(FOLLOW_text_field_in_value383);
                        text_field25=text_field(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }

                        ADAPTOR->addChild(ADAPTOR, root_0, text_field25.tree);

                    }
                    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

    if  (HASEXCEPTION())
    {
        /* catch(decl,action)
         */
        {


        }


    }
    else
    {
    }
    return retval;
}
/* $ANTLR end value */

/**
 * $ANTLR start char_string
 * cif.g:112:1: char_string : CHAR_STRING ;
 */
static cifParser_char_string_return
char_string(pcifParser ctx)
{
    cifParser_char_string_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    CHAR_STRING26;

    pANTLR3_BASE_TREE CHAR_STRING26_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    CHAR_STRING26       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    CHAR_STRING26_tree   = NULL;


    retval.tree  = NULL;

    {
        // cif.g:113:3: ( CHAR_STRING )
        // cif.g:113:5: CHAR_STRING
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            CHAR_STRING26 = (pANTLR3_COMMON_TOKEN) MATCHT(CHAR_STRING, &FOLLOW_CHAR_STRING_in_char_string404);
            if  (HASEXCEPTION())
            {
                goto rulechar_stringEx;
            }

            CHAR_STRING26_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, CHAR_STRING26));
            ADAPTOR->addChild(ADAPTOR, root_0, CHAR_STRING26_tree);


        }

    }

    // This is where rules clean up and exit
    //
    goto rulechar_stringEx; /* Prevent compiler warnings */
    rulechar_stringEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end char_string */

/**
 * $ANTLR start text_field
 * cif.g:115:1: text_field : SEMI_COLON_TEXT_FIELD ;
 */
static cifParser_text_field_return
text_field(pcifParser ctx)
{
    cifParser_text_field_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMI_COLON_TEXT_FIELD27;

    pANTLR3_BASE_TREE SEMI_COLON_TEXT_FIELD27_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    SEMI_COLON_TEXT_FIELD27       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    SEMI_COLON_TEXT_FIELD27_tree   = NULL;


    retval.tree  = NULL;

    {
        // cif.g:116:3: ( SEMI_COLON_TEXT_FIELD )
        // cif.g:116:5: SEMI_COLON_TEXT_FIELD
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            SEMI_COLON_TEXT_FIELD27 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMI_COLON_TEXT_FIELD, &FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field415);
            if  (HASEXCEPTION())
            {
                goto ruletext_fieldEx;
            }

            SEMI_COLON_TEXT_FIELD27_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SEMI_COLON_TEXT_FIELD27));
            ADAPTOR->addChild(ADAPTOR, root_0, SEMI_COLON_TEXT_FIELD27_tree);


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletext_fieldEx; /* Prevent compiler warnings */
    ruletext_fieldEx: ;
    retval.stop = LT(-1);


        retval.stop = LT(-1);

        retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
        ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end text_field */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
