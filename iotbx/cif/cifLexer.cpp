/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : cif.g
 *     -                            On : 2011-03-15 18:02:23
 *     -                 for the lexer : cifLexerLexer *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "cifLexer.h"
/* ----------------------------------------- */


/** String literals used by cifLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR     lit_1[]  = { 0x0D, 0x0A,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define         CTX     ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef  SCOPE_TYPE
#undef  SCOPE_STACK
#undef  SCOPE_TOP
#define SCOPE_TYPE(scope)   pcifLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pcifLexer_##scope##Stack
#define SCOPE_TOP(scope)    ctx->pcifLexer_##scope##Top
#define SCOPE_SIZE(scope)               ctx->pcifLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)        (ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))


/* Macros for accessing things in a lexer
 */
#undef      LEXER
#undef      RECOGNIZER
#undef      RULEMEMO
#undef      GETCHARINDEX
#undef      GETLINE
#undef      GETCHARPOSITIONINLINE
#undef      EMIT
#undef      EMITNEW
#undef      MATCHC
#undef      MATCHS
#undef      MATCHRANGE
#undef      LTOKEN
#undef      HASFAILED
#undef      FAILEDFLAG
#undef      INPUT
#undef      STRSTREAM
#undef      LA
#undef      HASEXCEPTION
#undef      EXCEPTION
#undef      CONSTRUCTEX
#undef      CONSUME
#undef      LRECOVER
#undef      MARK
#undef      REWIND
#undef      REWINDLAST
#undef      BACKTRACKING
#undef          MATCHANY
#undef          MEMOIZE
#undef          HAVEPARSEDRULE
#undef          GETTEXT
#undef          INDEX
#undef          SEEK
#undef          PUSHSTREAM
#undef          POPSTREAM
#undef          SETTEXT
#undef          SETTEXT8

#define     LEXER                                       ctx->pLexer
#define     RECOGNIZER                      LEXER->rec
#define         LEXSTATE                                RECOGNIZER->state
#define         TOKSOURCE                               LEXSTATE->tokSource
#define     GETCHARINDEX()                      LEXER->getCharIndex(LEXER)
#define     GETLINE()                           LEXER->getLine(LEXER)
#define     GETTEXT()                           LEXER->getText(LEXER)
#define     GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define     EMIT()                                      LEXSTATE->type = _type; LEXER->emit(LEXER)
#define     EMITNEW(t)                          LEXER->emitNew(LEXER, t)
#define     MATCHC(c)                           LEXER->matchc(LEXER, c)
#define     MATCHS(s)                           LEXER->matchs(LEXER, s)
#define     MATCHRANGE(c1,c2)       LEXER->matchRange(LEXER, c1, c2)
#define     MATCHANY()                          LEXER->matchAny(LEXER)
#define     LTOKEN                              LEXSTATE->token
#define     HASFAILED()                         (LEXSTATE->failed == ANTLR3_TRUE)
#define     BACKTRACKING                        LEXSTATE->backtracking
#define     FAILEDFLAG                          LEXSTATE->failed
#define     INPUT                                       LEXER->input
#define     STRSTREAM                           INPUT
#define         ISTREAM                                 INPUT->istream
#define         INDEX()                                 ISTREAM->index(ISTREAM)
#define         SEEK(n)                                 ISTREAM->seek(ISTREAM, n)
#define     EOF_TOKEN                           &(LEXSTATE->tokSource->eofToken)
#define     HASEXCEPTION()                      (LEXSTATE->error == ANTLR3_TRUE)
#define     EXCEPTION                           LEXSTATE->exception
#define     CONSTRUCTEX()                       RECOGNIZER->exConstruct(RECOGNIZER)
#define     LRECOVER()                          LEXER->recover(LEXER)
#define     MARK()                                      ISTREAM->mark(ISTREAM)
#define     REWIND(m)                           ISTREAM->rewind(ISTREAM, m)
#define     REWINDLAST()                        ISTREAM->rewindLast(ISTREAM)
#define         MEMOIZE(ri,si)                  RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define         HAVEPARSEDRULE(r)               RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define         PUSHSTREAM(str)                 LEXER->pushCharStream(LEXER, str)
#define         POPSTREAM()                             LEXER->popCharStream(LEXER)
#define         SETTEXT(str)                    LEXSTATE->text = str
#define         SKIP()                                  LEXSTATE->token = &(TOKSOURCE->skipToken)
#define         USER1                                   LEXSTATE->user1
#define         USER2                                   LEXSTATE->user2
#define         USER3                                   LEXSTATE->user3
#define         CUSTOM                                  LEXSTATE->custom
#define         RULEMEMO                                LEXSTATE->ruleMemo
#define         DBG                                             RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or 16 bit input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if     defined(ANTLR3_INLINE_INPUT_ASCII) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef ANTLR3_INLINE_INPUT_ASCII

/* 8 bit "ASCII" (actually any 8 bit character set) */

#  define           NEXTCHAR                    ((pANTLR3_UINT8)(INPUT->nextChar))
#  define           DATAP                               ((pANTLR3_UINT8)(INPUT->data))

# else

#  define           NEXTCHAR                    ((pANTLR3_UINT16)(INPUT->nextChar))
#  define           DATAP                               ((pANTLR3_UINT16)(INPUT->data))

# endif

# define            LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                                                                   \
{                                                                                                                                       \
    if  (NEXTCHAR < (DATAP + INPUT->sizeBuf))                                           \
    {                                                                                                                           \
                INPUT->charPositionInLine++;                                                            \
                if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
                {                                                                                                                       \
                        INPUT->line++;                                                                                  \
                        INPUT->charPositionInLine       = 0;                                            \
                        INPUT->currentLine              = (void *)(NEXTCHAR + 1);               \
                }                                                                                                                       \
                INPUT->nextChar = (void *)(NEXTCHAR + 1);                                       \
    }                                                                                                                           \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define     CONSUME()                           INPUT->istream->consume(INPUT->istream)
#define     LA(n)                                       INPUT->istream->_LA(INPUT->istream, n)

#endif
#define         TOKTEXT(tok, txt)                               tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define     UP      ANTLR3_TOKEN_UP
#define     DOWN    ANTLR3_TOKEN_DOWN
#define     EOR     ANTLR3_TOKEN_EOR
#define     INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void      mT__33    (pcifLexer ctx);
static ANTLR3_INLINE  void      mT__34    (pcifLexer ctx);
static ANTLR3_INLINE  void      mT__35    (pcifLexer ctx);
static ANTLR3_INLINE  void      mT__36    (pcifLexer ctx);
static ANTLR3_INLINE  void      mT__37    (pcifLexer ctx);
static ANTLR3_INLINE  void      mT__38    (pcifLexer ctx);
static ANTLR3_INLINE  void      mT__39    (pcifLexer ctx);
static ANTLR3_INLINE  void      mEOL    (pcifLexer ctx);
static ANTLR3_INLINE  void      mDOUBLE_QUOTE    (pcifLexer ctx);
static ANTLR3_INLINE  void      mSINGLE_QUOTE    (pcifLexer ctx);
static ANTLR3_INLINE  void      mORDINARY_CHAR    (pcifLexer ctx);
static ANTLR3_INLINE  void      mNON_BLANK_CHAR_    (pcifLexer ctx);
static ANTLR3_INLINE  void      mTEXT_LEAD_CHAR    (pcifLexer ctx);
static ANTLR3_INLINE  void      mANY_PRINT_CHAR    (pcifLexer ctx);
static ANTLR3_INLINE  void      mTAG    (pcifLexer ctx);
static ANTLR3_INLINE  void      mDATA_    (pcifLexer ctx);
static ANTLR3_INLINE  void      mSAVE_    (pcifLexer ctx);
static ANTLR3_INLINE  void      mLOOP_    (pcifLexer ctx);
static ANTLR3_INLINE  void      mGLOBAL_    (pcifLexer ctx);
static ANTLR3_INLINE  void      mSTOP_    (pcifLexer ctx);
static ANTLR3_INLINE  void      mDATA_BLOCK_HEADING    (pcifLexer ctx);
static ANTLR3_INLINE  void      mSAVE_FRAME_HEADING    (pcifLexer ctx);
static ANTLR3_INLINE  void      mSAVE    (pcifLexer ctx);
static ANTLR3_INLINE  void      mDIGIT    (pcifLexer ctx);
static ANTLR3_INLINE  void      mEXPONENT    (pcifLexer ctx);
static ANTLR3_INLINE  void      mINTEGER    (pcifLexer ctx);
static ANTLR3_INLINE  void      mFLOAT    (pcifLexer ctx);
static ANTLR3_INLINE  void      mUNSIGNED_INTEGER    (pcifLexer ctx);
static ANTLR3_INLINE  void      mUNQUOTED_STRING    (pcifLexer ctx);
static ANTLR3_INLINE  void      mSINGLE_QUOTED_STRING    (pcifLexer ctx);
static ANTLR3_INLINE  void      mDOUBLE_QUOTED_STRING    (pcifLexer ctx);
static ANTLR3_INLINE  void      mCHAR_STRING    (pcifLexer ctx);
static ANTLR3_INLINE  void      mSEMI_COLON_TEXT_FIELD    (pcifLexer ctx);
static ANTLR3_INLINE  void      mCOMMENTS    (pcifLexer ctx);
static ANTLR3_INLINE  void      mNON_BLANK_CHAR    (pcifLexer ctx);
static ANTLR3_INLINE  void      mWHITESPACE    (pcifLexer ctx);
static ANTLR3_INLINE  void      mTokens    (pcifLexer ctx);
static ANTLR3_INLINE ANTLR3_BOOLEAN     synpred1_cif    (pcifLexer ctx);
static ANTLR3_INLINE ANTLR3_BOOLEAN     synpred2_cif    (pcifLexer ctx);
static void     cifLexerFree(pcifLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
cifLexerFree  (pcifLexer ctx)
{
    LEXER->free(LEXER);

    ANTLR3_FREE(ctx);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "cif.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
        return fileName;
}

/** \brief Create a new lexer called cifLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pcifLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pcifLexer cifLexerNew
(pANTLR3_INPUT_STREAM instream)
{
        // See if we can create a new lexer with the standard constructor
        //
        return cifLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called cifLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pcifLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pcifLexer cifLexerNewSSD
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pcifLexer ctx; // Context structure we will build and return

    ctx = (pcifLexer) ANTLR3_CALLOC(1, sizeof(cifLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in cifLexer.h here so you can get a sense
     * of what goes where.
     */

    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer = antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);

    /* Check that we allocated the memory correctly
     */
    if  (ctx->pLexer == NULL)
    {
                ANTLR3_FREE(ctx);
                return  NULL;
    }
    /* Install the implementation of our cifLexer interface
     */
    ctx->mT__33 = mT__33;
    ctx->mT__34 = mT__34;
    ctx->mT__35 = mT__35;
    ctx->mT__36 = mT__36;
    ctx->mT__37 = mT__37;
    ctx->mT__38 = mT__38;
    ctx->mT__39 = mT__39;
    ctx->mEOL   = mEOL;
    ctx->mDOUBLE_QUOTE  = mDOUBLE_QUOTE;
    ctx->mSINGLE_QUOTE  = mSINGLE_QUOTE;
    ctx->mORDINARY_CHAR = mORDINARY_CHAR;
    ctx->mNON_BLANK_CHAR_       = mNON_BLANK_CHAR_;
    ctx->mTEXT_LEAD_CHAR        = mTEXT_LEAD_CHAR;
    ctx->mANY_PRINT_CHAR        = mANY_PRINT_CHAR;
    ctx->mTAG   = mTAG;
    ctx->mDATA_ = mDATA_;
    ctx->mSAVE_ = mSAVE_;
    ctx->mLOOP_ = mLOOP_;
    ctx->mGLOBAL_       = mGLOBAL_;
    ctx->mSTOP_ = mSTOP_;
    ctx->mDATA_BLOCK_HEADING    = mDATA_BLOCK_HEADING;
    ctx->mSAVE_FRAME_HEADING    = mSAVE_FRAME_HEADING;
    ctx->mSAVE  = mSAVE;
    ctx->mDIGIT = mDIGIT;
    ctx->mEXPONENT      = mEXPONENT;
    ctx->mINTEGER       = mINTEGER;
    ctx->mFLOAT = mFLOAT;
    ctx->mUNSIGNED_INTEGER      = mUNSIGNED_INTEGER;
    ctx->mUNQUOTED_STRING       = mUNQUOTED_STRING;
    ctx->mSINGLE_QUOTED_STRING  = mSINGLE_QUOTED_STRING;
    ctx->mDOUBLE_QUOTED_STRING  = mDOUBLE_QUOTED_STRING;
    ctx->mCHAR_STRING   = mCHAR_STRING;
    ctx->mSEMI_COLON_TEXT_FIELD = mSEMI_COLON_TEXT_FIELD;
    ctx->mCOMMENTS      = mCOMMENTS;
    ctx->mNON_BLANK_CHAR        = mNON_BLANK_CHAR;
    ctx->mWHITESPACE    = mWHITESPACE;
    ctx->mTokens        = mTokens;

    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx        = ctx;

    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);

    ctx->getGrammarFileName     = getGrammarFileName;
    ctx->free           = cifLexerFree;




           LEXER->super = (void *)ctx;


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    277:1: FLOAT : ( INTEGER EXPONENT | ( ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ ) | ( DIGIT )+ '.' ) ( EXPONENT )? );
 */
static const ANTLR3_INT32 dfa19_eot[6] =
    {
        -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa19_eof[6] =
    {
        -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa19_min[6] =
    {
        43, 46, 46, -1, 46, -1
    };
static const ANTLR3_INT32 dfa19_max[6] =
    {
        57, 57, 101, -1, 101, -1
    };
static const ANTLR3_INT32 dfa19_accept[6] =
    {
        -1, -1, -1, 2, -1, 1
    };
static const ANTLR3_INT32 dfa19_special[6] =
    {
        -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa19_T_empty       NULL

static const ANTLR3_INT32 dfa19_T0[] =
    {
        3, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
    };static const ANTLR3_INT32 dfa19_T1[] =
    {
        3, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5
    };static const ANTLR3_INT32 dfa19_T2[] =
    {
        3, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5
    };static const ANTLR3_INT32 dfa19_T3[] =
    {
        1, -1, 1, 3, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa19_transitions[] =
{
    dfa19_T3, dfa19_T0, dfa19_T2, dfa19_T_empty, dfa19_T1, dfa19_T_empty
};


/* Declare tracking structure for Cyclic DFA 19
 */
static
ANTLR3_CYCLIC_DFA cdfa19
    =   {
            19,             /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"277:1: FLOAT : ( INTEGER EXPONENT | ( ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ ) | ( DIGIT )+ '.' ) ( EXPONENT )? );",
            (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,        /* Default special state transition function    */
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa19_eot,      /* EOT table                            */
            dfa19_eof,      /* EOF table                            */
            dfa19_min,      /* Minimum tokens for each state    */
            dfa19_max,      /* Maximum tokens for each state    */
            dfa19_accept,       /* Accept table                     */
            dfa19_special,      /* Special transition states        */
            dfa19_transitions   /* Table of transition tables       */

        };
/* End of Cyclic DFA 19
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    278:24: ( ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ ) | ( DIGIT )+ '.' )
 */
static const ANTLR3_INT32 dfa17_eot[5] =
    {
        -1, -1, -1, 4, -1
    };
static const ANTLR3_INT32 dfa17_eof[5] =
    {
        -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_min[5] =
    {
        43, -1, 46, 48, -1
    };
static const ANTLR3_INT32 dfa17_max[5] =
    {
        57, -1, 57, 57, -1
    };
static const ANTLR3_INT32 dfa17_accept[5] =
    {
        -1, 1, -1, -1, 2
    };
static const ANTLR3_INT32 dfa17_special[5] =
    {
        -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa17_T_empty       NULL

static const ANTLR3_INT32 dfa17_T0[] =
    {
        3, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };static const ANTLR3_INT32 dfa17_T1[] =
    {
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };static const ANTLR3_INT32 dfa17_T2[] =
    {
        1, -1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa17_transitions[] =
{
    dfa17_T2, dfa17_T_empty, dfa17_T0, dfa17_T1, dfa17_T_empty
};


/* Declare tracking structure for Cyclic DFA 17
 */
static
ANTLR3_CYCLIC_DFA cdfa17
    =   {
            17,             /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"278:24: ( ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ ) | ( DIGIT )+ '.' )",
            (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,        /* Default special state transition function    */
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa17_eot,      /* EOT table                            */
            dfa17_eof,      /* EOF table                            */
            dfa17_min,      /* Minimum tokens for each state    */
            dfa17_max,      /* Maximum tokens for each state    */
            dfa17_accept,       /* Accept table                     */
            dfa17_special,      /* Special transition states        */
            dfa17_transitions   /* Table of transition tables       */

        };
/* End of Cyclic DFA 17
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | TAG | LOOP_ | GLOBAL_ | STOP_ | DATA_BLOCK_HEADING | SAVE_FRAME_HEADING | SAVE | FLOAT | UNSIGNED_INTEGER | CHAR_STRING | SEMI_COLON_TEXT_FIELD | COMMENTS | NON_BLANK_CHAR | WHITESPACE );
 */
static const ANTLR3_INT32 dfa34_eot[224] =
    {
        -1, -1, 44, 47, 49, 51, 52, 53, 42, 45, 45, 45, 45, 65, 70, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 45, 45, 45, 45, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, 108, -1, 45, -1, 45, -1, -1, -1,
        -1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, -1, 45, 65, 108, 45, -1, 124,
        124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
        124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
        124, -1, 124, 124, 124, -1, -1, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 108, 127, -1, 127, 108, -1, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 145, 127, 127, 148, 149, 127, -1, 127,
        127, -1, -1, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
        221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
        221, 221, 221, 221, 221, 221, 221, 221, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
        222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 223, -1,
        -1, -1
    };
static const ANTLR3_INT32 dfa34_eof[224] =
    {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa34_min[224] =
    {
        9, -1, 33, 33, 33, 33, 33, 33, 33, 79, 76, 65, 65, 33, 9, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 79, 76, 65, 65, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 9, 9, -1, -1, -1, -1, -1, 33, -1, 46, -1, 48, -1, -1, -1, -1,
        79, 79, 79, 79, 79, 86, 79, 86, 84, 84, -1, 43, 33, 33, 43, 0, 9, 9, 9,
        9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
        9, 9, 9, 9, 9, -1, 9, 9, 9, -1, -1, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, -1, 33, 33, -1, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, -1, 33, 33, -1, -1, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
        33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, -1, -1, -1
    };
static const ANTLR3_INT32 dfa34_max[224] =
    {
        126, -1, 126, 126, 126, 126, 126, 126, 126, 111, 108, 116, 97, 126, 126,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, 108, 116, 97, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 126, 126, -1, -1, -1, -1, -1, 126, -1, 101,
        -1, 57, -1, -1, -1, -1, 111, 111, 111, 111, 111, 118, 111, 118, 116, 116,
        -1, 57, 126, 126, 57, 0, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
        126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
        126, 126, 126, 126, 126, 126, 126, -1, 126, 126, 126, -1, -1, 57, 57, 112,
        112, 98, 98, 112, 112, 101, 101, 97, 97, 57, 126, 57, -1, 57, 126, -1,
        57, 95, 95, 97, 97, 95, 95, 95, 95, 95, 95, 126, 108, 108, 126, 126, 126,
        -1, 95, 95, -1, -1, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
        126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
        126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
        126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
        126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
        -1, -1, -1
    };
static const ANTLR3_INT32 dfa34_accept[224] =
    {
        -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 17,
        17, 17, 17, 17, 17, 17, 17, 17, -1, -1, -1, -1, 17, 17, 17, 17, 17, 17,
        17, 17, 17, -1, -1, 19, 20, 21, 2, 17, -1, 3, -1, 4, -1, 5, 6, 7, 8, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 19, 15, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 17,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9,
        -1, -1, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 13, 12, 10
    };
static const ANTLR3_INT32 dfa34_special[224] =
    {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 19,
        16, 17, 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 26, 27, 24, 25, 23, 21,
        22, 34, 36, 30, 32, 28, 35, 33, 31, 29, 0, -1, 1, 2, 3, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa34_T_empty       NULL

static const ANTLR3_INT32 dfa34_T0[] =
    {
        103, 103, -1, -1, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, 103, 71, 106, 98, 99, 72, 73, 105, 74, 75, 76,
        77, 78, 79, 80, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 104, 84,
        85, 86, 87, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
        89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 101, 91, 102, 92, 100,
        93, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
        90, 90, 90, 90, 90, 90, 90, 90, 90, 94, 95, 96, 97
    };static const ANTLR3_INT32 dfa34_T1[] =
    {
        54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
        54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
        54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
        54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
        54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
        54, 54, 54, 54
    };static const ANTLR3_INT32 dfa34_T2[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 143
    };static const ANTLR3_INT32 dfa34_T3[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136
    };static const ANTLR3_INT32 dfa34_T4[] =
    {
        117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118
    };static const ANTLR3_INT32 dfa34_T5[] =
    {
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 50, 45, 48, 48, 48,
        48, 48, 48, 48, 48, 48, 48, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45
    };static const ANTLR3_INT32 dfa34_T6[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45
    };static const ANTLR3_INT32 dfa34_T7[] =
    {
        60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61
    };static const ANTLR3_INT32 dfa34_T8[] =
    {
        150, 177, 179, 180, 151, 152, 178, 153, 154, 155, 156, 157, 158, 159,
        160, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 162, 184, 163, 164,
        165, 166, 167, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
        168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 182,
        170, 183, 171, 181, 172, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
        169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
        169, 173, 174, 175, 176
    };static const ANTLR3_INT32 dfa34_T9[] =
    {
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46,
        46, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        109, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 110, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45
    };static const ANTLR3_INT32 dfa34_T10[] =
    {
        185, 212, 214, 215, 186, 187, 213, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 197, 219, 198, 199,
        200, 201, 202, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
        203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 217,
        205, 218, 206, 216, 207, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
        204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
        204, 208, 209, 210, 211
    };static const ANTLR3_INT32 dfa34_T11[] =
    {
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46,
        46, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45
    };static const ANTLR3_INT32 dfa34_T12[] =
    {
        63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64
    };static const ANTLR3_INT32 dfa34_T13[] =
    {
        46, 46, 46, 46, 46, 46, 46, 46, 46, 46
    };static const ANTLR3_INT32 dfa34_T14[] =
    {
        55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56
    };static const ANTLR3_INT32 dfa34_T15[] =
    {
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45
    };static const ANTLR3_INT32 dfa34_T16[] =
    {
        57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58
    };static const ANTLR3_INT32 dfa34_T17[] =
    {
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 68, 45, 67, 67, 67,
        67, 67, 67, 67, 67, 67, 67, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        66, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 69, 45, 45, 45,
        45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
        45, 45, 45, 45
    };static const ANTLR3_INT32 dfa34_T18[] =
    {
        45, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127
    };static const ANTLR3_INT32 dfa34_T19[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 142
    };static const ANTLR3_INT32 dfa34_T20[] =
    {
        121, -1, 123, -1, -1, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122
    };static const ANTLR3_INT32 dfa34_T21[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 125, -1, 128, -1, -1, 126, 126,
        126, 126, 126, 126, 126, 126, 126, 126
    };static const ANTLR3_INT32 dfa34_T22[] =
    {
        45, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127
    };static const ANTLR3_INT32 dfa34_T23[] =
    {
        45, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
        127, 127, 127, 127
    };static const ANTLR3_INT32 dfa34_T24[] =
    {
        43, 43, -1, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1,
        -1, -1, -1, -1, -1, 43, 15, 40, 41, 42, 16, 17, 39, 6, 7, 18, 5, 19, 4,
        2, 20, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 21, 14, 22, 23, 24, 3, 25,
        30, 30, 30, 12, 30, 30, 10, 30, 30, 30, 30, 9, 30, 30, 30, 30, 30, 30,
        11, 30, 30, 30, 30, 30, 30, 30, 42, 32, 42, 33, 8, 34, 31, 31, 31, 29,
        31, 31, 27, 31, 31, 31, 31, 26, 31, 31, 31, 31, 31, 31, 28, 31, 31, 31,
        31, 31, 31, 31, 35, 36, 37, 38
    };static const ANTLR3_INT32 dfa34_T25[] =
    {
        -1
    };static const ANTLR3_INT32 dfa34_T26[] =
    {
        50, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 69
    };static const ANTLR3_INT32 dfa34_T27[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, 122,
        122, 122, 122, 122, 122, 122, 122, 122
    };static const ANTLR3_INT32 dfa34_T28[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 126, 126,
        126, 126, 126, 126, 126, 126, 126, 126
    };static const ANTLR3_INT32 dfa34_T29[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 130
    };static const ANTLR3_INT32 dfa34_T30[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 139
    };static const ANTLR3_INT32 dfa34_T31[] =
    {
        111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112
    };static const ANTLR3_INT32 dfa34_T32[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 132
    };static const ANTLR3_INT32 dfa34_T33[] =
    {
        113, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 114
    };static const ANTLR3_INT32 dfa34_T34[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 147
    };static const ANTLR3_INT32 dfa34_T35[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    };static const ANTLR3_INT32 dfa34_T36[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 220
    };static const ANTLR3_INT32 dfa34_T37[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 133, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, 134
    };static const ANTLR3_INT32 dfa34_T38[] =
    {
        115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 116
    };static const ANTLR3_INT32 dfa34_T39[] =
    {
        119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120
    };static const ANTLR3_INT32 dfa34_T40[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 137, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138
    };static const ANTLR3_INT32 dfa34_T41[] =
    {
        45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, 144
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa34_transitions[] =
{
    dfa34_T24, dfa34_T_empty, dfa34_T11, dfa34_T15, dfa34_T5, dfa34_T5,
    dfa34_T15, dfa34_T15, dfa34_T1, dfa34_T14, dfa34_T16, dfa34_T7, dfa34_T12,
    dfa34_T17, dfa34_T0, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty,
    dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty,
    dfa34_T_empty, dfa34_T_empty, dfa34_T14, dfa34_T16, dfa34_T7, dfa34_T12,
    dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty,
    dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T6,
    dfa34_T6, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty,
    dfa34_T_empty, dfa34_T9, dfa34_T_empty, dfa34_T26, dfa34_T_empty, dfa34_T13,
    dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty, dfa34_T31,
    dfa34_T31, dfa34_T33, dfa34_T33, dfa34_T38, dfa34_T4, dfa34_T38, dfa34_T4,
    dfa34_T39, dfa34_T39, dfa34_T_empty, dfa34_T20, dfa34_T17, dfa34_T9,
    dfa34_T20, dfa34_T25, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0,
    dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0,
    dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0,
    dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0,
    dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T_empty,
    dfa34_T0, dfa34_T0, dfa34_T0, dfa34_T_empty, dfa34_T_empty, dfa34_T21,
    dfa34_T21, dfa34_T29, dfa34_T29, dfa34_T32, dfa34_T32, dfa34_T37, dfa34_T37,
    dfa34_T3, dfa34_T3, dfa34_T40, dfa34_T40, dfa34_T27, dfa34_T18, dfa34_T27,
    dfa34_T_empty, dfa34_T28, dfa34_T23, dfa34_T_empty, dfa34_T28, dfa34_T30,
    dfa34_T30, dfa34_T35, dfa34_T35, dfa34_T19, dfa34_T19, dfa34_T2, dfa34_T2,
    dfa34_T41, dfa34_T41, dfa34_T22, dfa34_T34, dfa34_T34, dfa34_T22, dfa34_T8,
    dfa34_T10, dfa34_T_empty, dfa34_T36, dfa34_T36, dfa34_T_empty, dfa34_T_empty,
    dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8,
    dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8,
    dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8,
    dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8,
    dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8, dfa34_T8,
    dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10,
    dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10,
    dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10,
    dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10,
    dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10, dfa34_T10,
    dfa34_T22, dfa34_T_empty, dfa34_T_empty, dfa34_T_empty
};

static ANTLR3_INT32 dfa34_sst(pcifLexer ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;

    _s      = s;
    switch  (s)
    {
        case 0:

        {
            ANTLR3_UINT32 LA34_102;

            ANTLR3_MARKER index34_102;


                LA34_102 = LA(1);


            index34_102 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_102 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_102 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_102 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_102 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_102 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_102 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_102 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_102 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_102 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_102 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_102 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_102 >= '0') && (LA34_102 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_102 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_102 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_102 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_102 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_102 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_102 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_102 >= 'A') && (LA34_102 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_102 >= 'a') && (LA34_102 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_102 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_102 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_102 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_102 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_102 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_102 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_102 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_102 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_102 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_102 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_102 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_102 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_102 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_102 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_102 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_102 >= '\t') && (LA34_102 <= '\n')) || LA34_102 == '\r' || LA34_102 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_102);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 1:

        {
            ANTLR3_UINT32 LA34_104;

            ANTLR3_MARKER index34_104;


                LA34_104 = LA(1);


            index34_104 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_104 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_104 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_104 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_104 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_104 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_104 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_104 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_104 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_104 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_104 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_104 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_104 >= '0') && (LA34_104 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_104 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_104 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_104 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_104 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_104 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_104 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_104 >= 'A') && (LA34_104 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_104 >= 'a') && (LA34_104 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_104 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_104 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_104 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_104 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_104 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_104 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_104 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_104 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_104 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_104 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_104 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_104 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_104 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_104 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_104 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_104 >= '\t') && (LA34_104 <= '\n')) || LA34_104 == '\r' || LA34_104 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_104);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 2:

        {
            ANTLR3_UINT32 LA34_105;

            ANTLR3_MARKER index34_105;


                LA34_105 = LA(1);


            index34_105 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_105 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_105 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_105 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_105 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_105 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_105 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_105 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_105 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_105 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_105 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_105 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_105 >= '0') && (LA34_105 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_105 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_105 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_105 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_105 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_105 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_105 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_105 >= 'A') && (LA34_105 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_105 >= 'a') && (LA34_105 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_105 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_105 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_105 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_105 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_105 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_105 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_105 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_105 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_105 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_105 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_105 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_105 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_105 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_105 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_105 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_105 >= '\t') && (LA34_105 <= '\n')) || LA34_105 == '\r' || LA34_105 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_105);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 3:

        {
            ANTLR3_UINT32 LA34_106;

            ANTLR3_MARKER index34_106;


                LA34_106 = LA(1);


            index34_106 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_106 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_106 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_106 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_106 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_106 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_106 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_106 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_106 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_106 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_106 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_106 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_106 >= '0') && (LA34_106 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_106 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_106 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_106 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_106 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_106 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_106 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_106 >= 'A') && (LA34_106 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_106 >= 'a') && (LA34_106 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_106 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_106 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_106 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_106 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_106 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_106 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_106 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_106 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_106 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_106 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_106 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_106 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_106 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_106 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_106 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_106 >= '\t') && (LA34_106 <= '\n')) || LA34_106 == '\r' || LA34_106 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_106);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 4:

        {
            ANTLR3_UINT32 LA34_84;

            ANTLR3_MARKER index34_84;


                LA34_84 = LA(1);


            index34_84 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_84 >= '\t') && (LA34_84 <= '\n')) || LA34_84 == '\r' || LA34_84 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_84 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_84 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_84 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_84 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_84 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_84 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_84 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_84 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_84 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_84 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_84 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_84 >= '0') && (LA34_84 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_84 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_84 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_84 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_84 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_84 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_84 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_84 >= 'A') && (LA34_84 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_84 >= 'a') && (LA34_84 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_84 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_84 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_84 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_84 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_84 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_84 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_84 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_84 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_84 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_84 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_84 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_84 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_84 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_84 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_84 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_84);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 5:

        {
            ANTLR3_UINT32 LA34_85;

            ANTLR3_MARKER index34_85;


                LA34_85 = LA(1);


            index34_85 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_85 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_85 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_85 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_85 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_85 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_85 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_85 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_85 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_85 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_85 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_85 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_85 >= '0') && (LA34_85 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_85 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_85 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_85 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_85 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_85 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_85 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_85 >= 'A') && (LA34_85 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_85 >= 'a') && (LA34_85 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_85 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_85 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_85 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_85 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_85 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_85 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_85 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_85 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_85 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_85 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_85 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_85 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_85 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_85 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_85 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_85 >= '\t') && (LA34_85 <= '\n')) || LA34_85 == '\r' || LA34_85 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_85);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 6:

        {
            ANTLR3_UINT32 LA34_82;

            ANTLR3_MARKER index34_82;


                LA34_82 = LA(1);


            index34_82 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_82 >= '\t') && (LA34_82 <= '\n')) || LA34_82 == '\r' || LA34_82 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_82 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_82 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_82 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_82 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_82 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_82 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_82 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_82 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_82 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_82 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_82 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_82 >= '0') && (LA34_82 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_82 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_82 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_82 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_82 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_82 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_82 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_82 >= 'A') && (LA34_82 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_82 >= 'a') && (LA34_82 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_82 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_82 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_82 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_82 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_82 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_82 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_82 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_82 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_82 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_82 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_82 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_82 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_82 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_82 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_82 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_82);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 7:

        {
            ANTLR3_UINT32 LA34_83;

            ANTLR3_MARKER index34_83;


                LA34_83 = LA(1);


            index34_83 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_83 >= '\t') && (LA34_83 <= '\n')) || LA34_83 == '\r' || LA34_83 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_83 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_83 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_83 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_83 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_83 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_83 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_83 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_83 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_83 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_83 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_83 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_83 >= '0') && (LA34_83 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_83 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_83 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_83 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_83 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_83 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_83 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_83 >= 'A') && (LA34_83 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_83 >= 'a') && (LA34_83 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_83 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_83 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_83 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_83 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_83 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_83 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_83 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_83 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_83 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_83 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_83 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_83 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_83 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_83 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_83 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_83);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 8:

        {
            ANTLR3_UINT32 LA34_80;

            ANTLR3_MARKER index34_80;


                LA34_80 = LA(1);


            index34_80 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_80 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_80 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_80 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_80 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_80 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_80 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_80 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_80 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_80 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_80 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_80 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_80 >= '0') && (LA34_80 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_80 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_80 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_80 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_80 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_80 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_80 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_80 >= 'A') && (LA34_80 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_80 >= 'a') && (LA34_80 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_80 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_80 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_80 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_80 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_80 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_80 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_80 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_80 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_80 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_80 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_80 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_80 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_80 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_80 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_80 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_80 >= '\t') && (LA34_80 <= '\n')) || LA34_80 == '\r' || LA34_80 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_80);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 9:

        {
            ANTLR3_UINT32 LA34_81;

            ANTLR3_MARKER index34_81;


                LA34_81 = LA(1);


            index34_81 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_81 >= '\t') && (LA34_81 <= '\n')) || LA34_81 == '\r' || LA34_81 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_81 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_81 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_81 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_81 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_81 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_81 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_81 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_81 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_81 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_81 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_81 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_81 >= '0') && (LA34_81 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_81 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_81 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_81 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_81 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_81 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_81 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_81 >= 'A') && (LA34_81 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_81 >= 'a') && (LA34_81 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_81 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_81 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_81 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_81 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_81 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_81 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_81 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_81 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_81 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_81 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_81 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_81 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_81 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_81 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_81 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_81);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 10:

        {
            ANTLR3_UINT32 LA34_78;

            ANTLR3_MARKER index34_78;


                LA34_78 = LA(1);


            index34_78 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_78 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_78 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_78 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_78 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_78 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_78 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_78 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_78 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_78 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_78 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_78 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_78 >= '0') && (LA34_78 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_78 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_78 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_78 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_78 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_78 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_78 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_78 >= 'A') && (LA34_78 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_78 >= 'a') && (LA34_78 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_78 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_78 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_78 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_78 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_78 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_78 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_78 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_78 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_78 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_78 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_78 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_78 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_78 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_78 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_78 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_78 >= '\t') && (LA34_78 <= '\n')) || LA34_78 == '\r' || LA34_78 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_78);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 11:

        {
            ANTLR3_UINT32 LA34_79;

            ANTLR3_MARKER index34_79;


                LA34_79 = LA(1);


            index34_79 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_79 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_79 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_79 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_79 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_79 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_79 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_79 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_79 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_79 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_79 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_79 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_79 >= '0') && (LA34_79 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_79 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_79 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_79 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_79 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_79 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_79 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_79 >= 'A') && (LA34_79 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_79 >= 'a') && (LA34_79 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_79 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_79 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_79 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_79 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_79 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_79 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_79 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_79 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_79 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_79 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_79 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_79 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_79 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_79 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_79 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_79 >= '\t') && (LA34_79 <= '\n')) || LA34_79 == '\r' || LA34_79 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_79);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 12:

        {
            ANTLR3_UINT32 LA34_76;

            ANTLR3_MARKER index34_76;


                LA34_76 = LA(1);


            index34_76 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_76 >= '\t') && (LA34_76 <= '\n')) || LA34_76 == '\r' || LA34_76 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_76 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_76 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_76 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_76 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_76 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_76 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_76 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_76 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_76 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_76 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_76 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_76 >= '0') && (LA34_76 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_76 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_76 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_76 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_76 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_76 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_76 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_76 >= 'A') && (LA34_76 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_76 >= 'a') && (LA34_76 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_76 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_76 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_76 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_76 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_76 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_76 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_76 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_76 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_76 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_76 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_76 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_76 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_76 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_76 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_76 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_76);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 13:

        {
            ANTLR3_UINT32 LA34_77;

            ANTLR3_MARKER index34_77;


                LA34_77 = LA(1);


            index34_77 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_77 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_77 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_77 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_77 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_77 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_77 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_77 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_77 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_77 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_77 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_77 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_77 >= '0') && (LA34_77 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_77 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_77 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_77 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_77 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_77 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_77 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_77 >= 'A') && (LA34_77 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_77 >= 'a') && (LA34_77 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_77 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_77 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_77 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_77 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_77 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_77 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_77 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_77 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_77 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_77 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_77 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_77 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_77 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_77 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_77 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_77 >= '\t') && (LA34_77 <= '\n')) || LA34_77 == '\r' || LA34_77 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_77);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 14:

        {
            ANTLR3_UINT32 LA34_74;

            ANTLR3_MARKER index34_74;


                LA34_74 = LA(1);


            index34_74 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_74 >= '\t') && (LA34_74 <= '\n')) || LA34_74 == '\r' || LA34_74 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_74 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_74 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_74 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_74 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_74 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_74 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_74 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_74 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_74 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_74 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_74 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_74 >= '0') && (LA34_74 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_74 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_74 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_74 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_74 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_74 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_74 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_74 >= 'A') && (LA34_74 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_74 >= 'a') && (LA34_74 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_74 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_74 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_74 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_74 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_74 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_74 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_74 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_74 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_74 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_74 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_74 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_74 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_74 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_74 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_74 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_74);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 15:

        {
            ANTLR3_UINT32 LA34_75;

            ANTLR3_MARKER index34_75;


                LA34_75 = LA(1);


            index34_75 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_75 >= '\t') && (LA34_75 <= '\n')) || LA34_75 == '\r' || LA34_75 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_75 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_75 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_75 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_75 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_75 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_75 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_75 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_75 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_75 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_75 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_75 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_75 >= '0') && (LA34_75 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_75 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_75 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_75 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_75 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_75 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_75 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_75 >= 'A') && (LA34_75 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_75 >= 'a') && (LA34_75 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_75 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_75 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_75 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_75 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_75 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_75 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_75 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_75 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_75 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_75 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_75 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_75 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_75 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_75 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_75 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_75);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 16:

        {
            ANTLR3_UINT32 LA34_72;

            ANTLR3_MARKER index34_72;


                LA34_72 = LA(1);


            index34_72 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_72 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_72 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_72 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_72 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_72 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_72 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_72 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_72 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_72 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_72 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_72 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_72 >= '0') && (LA34_72 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_72 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_72 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_72 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_72 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_72 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_72 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_72 >= 'A') && (LA34_72 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_72 >= 'a') && (LA34_72 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_72 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_72 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_72 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_72 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_72 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_72 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_72 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_72 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_72 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_72 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_72 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_72 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_72 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_72 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_72 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_72 >= '\t') && (LA34_72 <= '\n')) || LA34_72 == '\r' || LA34_72 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_72);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 17:

        {
            ANTLR3_UINT32 LA34_73;

            ANTLR3_MARKER index34_73;


                LA34_73 = LA(1);


            index34_73 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_73 >= '\t') && (LA34_73 <= '\n')) || LA34_73 == '\r' || LA34_73 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_73 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_73 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_73 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_73 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_73 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_73 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_73 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_73 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_73 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_73 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_73 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_73 >= '0') && (LA34_73 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_73 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_73 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_73 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_73 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_73 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_73 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_73 >= 'A') && (LA34_73 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_73 >= 'a') && (LA34_73 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_73 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_73 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_73 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_73 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_73 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_73 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_73 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_73 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_73 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_73 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_73 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_73 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_73 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_73 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_73 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_73);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 18:

        {
            ANTLR3_UINT32 LA34_14;

            ANTLR3_MARKER index34_14;


                LA34_14 = LA(1);


            index34_14 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_14 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_14 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_14 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_14 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_14 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_14 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_14 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_14 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_14 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_14 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_14 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_14 >= '0') && (LA34_14 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_14 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_14 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_14 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_14 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_14 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_14 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_14 >= 'A') && (LA34_14 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_14 >= 'a') && (LA34_14 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_14 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_14 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_14 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_14 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_14 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_14 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_14 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_14 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_14 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_14 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_14 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_14 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (((LA34_14 >= '\t') && (LA34_14 <= '\n')) || LA34_14 == '\r' || LA34_14 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_14 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_14 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_14 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 70;


                SEEK(index34_14);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 19:

        {
            ANTLR3_UINT32 LA34_71;

            ANTLR3_MARKER index34_71;


                LA34_71 = LA(1);


            index34_71 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_71 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_71 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_71 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_71 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_71 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_71 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_71 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_71 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_71 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_71 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_71 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_71 >= '0') && (LA34_71 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_71 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_71 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_71 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_71 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_71 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_71 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_71 >= 'A') && (LA34_71 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_71 >= 'a') && (LA34_71 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_71 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_71 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_71 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_71 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_71 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_71 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_71 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_71 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_71 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_71 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_71 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_71 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_71 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_71 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_71 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_71 >= '\t') && (LA34_71 <= '\n')) || LA34_71 == '\r' || LA34_71 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_71);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 20:

        {
            ANTLR3_UINT32 LA34_70;

            ANTLR3_MARKER index34_70;


                LA34_70 = LA(1);


            index34_70 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (( GETCHARPOSITIONINLINE() > 0 )) )
            {
                s = 45;
            }

            else if ( (ANTLR3_TRUE) )
            {
                s = 42;
            }


                SEEK(index34_70);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 21:

        {
            ANTLR3_UINT32 LA34_91;

            ANTLR3_MARKER index34_91;


                LA34_91 = LA(1);


            index34_91 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_91 >= '\t') && (LA34_91 <= '\n')) || LA34_91 == '\r' || LA34_91 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_91 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_91 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_91 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_91 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_91 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_91 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_91 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_91 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_91 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_91 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_91 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_91 >= '0') && (LA34_91 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_91 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_91 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_91 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_91 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_91 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_91 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_91 >= 'A') && (LA34_91 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_91 >= 'a') && (LA34_91 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_91 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_91 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_91 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_91 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_91 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_91 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_91 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_91 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_91 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_91 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_91 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_91 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_91 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_91 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_91 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_91);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 22:

        {
            ANTLR3_UINT32 LA34_92;

            ANTLR3_MARKER index34_92;


                LA34_92 = LA(1);


            index34_92 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_92 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_92 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_92 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_92 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_92 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_92 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_92 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_92 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_92 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_92 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_92 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_92 >= '0') && (LA34_92 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_92 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_92 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_92 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_92 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_92 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_92 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_92 >= 'A') && (LA34_92 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_92 >= 'a') && (LA34_92 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_92 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_92 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_92 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_92 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_92 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_92 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_92 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_92 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_92 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_92 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_92 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_92 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_92 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_92 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_92 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_92 >= '\t') && (LA34_92 <= '\n')) || LA34_92 == '\r' || LA34_92 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_92);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 23:

        {
            ANTLR3_UINT32 LA34_90;

            ANTLR3_MARKER index34_90;


                LA34_90 = LA(1);


            index34_90 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_90 >= '\t') && (LA34_90 <= '\n')) || LA34_90 == '\r' || LA34_90 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_90 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_90 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_90 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_90 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_90 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_90 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_90 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_90 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_90 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_90 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_90 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_90 >= '0') && (LA34_90 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_90 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_90 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_90 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_90 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_90 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_90 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_90 >= 'A') && (LA34_90 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_90 >= 'a') && (LA34_90 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_90 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_90 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_90 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_90 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_90 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_90 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_90 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_90 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_90 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_90 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_90 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_90 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_90 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_90 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_90 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_90);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 24:

        {
            ANTLR3_UINT32 LA34_88;

            ANTLR3_MARKER index34_88;


                LA34_88 = LA(1);


            index34_88 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_88 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_88 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_88 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_88 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_88 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_88 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_88 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_88 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_88 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_88 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_88 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_88 >= '0') && (LA34_88 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_88 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_88 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_88 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_88 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_88 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_88 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_88 >= 'A') && (LA34_88 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_88 >= 'a') && (LA34_88 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_88 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_88 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_88 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_88 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_88 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_88 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_88 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_88 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_88 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_88 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_88 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_88 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_88 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_88 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_88 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_88 >= '\t') && (LA34_88 <= '\n')) || LA34_88 == '\r' || LA34_88 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_88);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 25:

        {
            ANTLR3_UINT32 LA34_89;

            ANTLR3_MARKER index34_89;


                LA34_89 = LA(1);


            index34_89 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_89 >= '\t') && (LA34_89 <= '\n')) || LA34_89 == '\r' || LA34_89 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_89 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_89 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_89 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_89 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_89 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_89 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_89 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_89 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_89 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_89 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_89 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_89 >= '0') && (LA34_89 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_89 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_89 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_89 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_89 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_89 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_89 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_89 >= 'A') && (LA34_89 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_89 >= 'a') && (LA34_89 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_89 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_89 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_89 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_89 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_89 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_89 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_89 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_89 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_89 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_89 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_89 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_89 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_89 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_89 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_89 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_89);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 26:

        {
            ANTLR3_UINT32 LA34_86;

            ANTLR3_MARKER index34_86;


                LA34_86 = LA(1);


            index34_86 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_86 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_86 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_86 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_86 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_86 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_86 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_86 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_86 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_86 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_86 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_86 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_86 >= '0') && (LA34_86 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_86 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_86 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_86 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_86 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_86 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_86 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_86 >= 'A') && (LA34_86 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_86 >= 'a') && (LA34_86 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_86 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_86 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_86 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_86 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_86 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_86 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_86 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_86 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_86 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_86 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_86 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_86 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_86 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_86 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_86 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_86 >= '\t') && (LA34_86 <= '\n')) || LA34_86 == '\r' || LA34_86 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_86);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 27:

        {
            ANTLR3_UINT32 LA34_87;

            ANTLR3_MARKER index34_87;


                LA34_87 = LA(1);


            index34_87 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_87 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_87 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_87 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_87 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_87 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_87 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_87 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_87 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_87 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_87 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_87 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_87 >= '0') && (LA34_87 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_87 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_87 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_87 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_87 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_87 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_87 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_87 >= 'A') && (LA34_87 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_87 >= 'a') && (LA34_87 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_87 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_87 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_87 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_87 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_87 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_87 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_87 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_87 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_87 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_87 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_87 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_87 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_87 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_87 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_87 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_87 >= '\t') && (LA34_87 <= '\n')) || LA34_87 == '\r' || LA34_87 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_87);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 28:

        {
            ANTLR3_UINT32 LA34_97;

            ANTLR3_MARKER index34_97;


                LA34_97 = LA(1);


            index34_97 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_97 >= '\t') && (LA34_97 <= '\n')) || LA34_97 == '\r' || LA34_97 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_97 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_97 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_97 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_97 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_97 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_97 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_97 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_97 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_97 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_97 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_97 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_97 >= '0') && (LA34_97 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_97 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_97 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_97 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_97 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_97 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_97 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_97 >= 'A') && (LA34_97 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_97 >= 'a') && (LA34_97 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_97 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_97 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_97 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_97 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_97 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_97 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_97 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_97 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_97 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_97 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_97 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_97 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_97 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_97 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_97 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_97);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 29:

        {
            ANTLR3_UINT32 LA34_101;

            ANTLR3_MARKER index34_101;


                LA34_101 = LA(1);


            index34_101 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_101 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_101 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_101 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_101 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_101 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_101 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_101 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_101 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_101 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_101 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_101 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_101 >= '0') && (LA34_101 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_101 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_101 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_101 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_101 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_101 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_101 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_101 >= 'A') && (LA34_101 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_101 >= 'a') && (LA34_101 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_101 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_101 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_101 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_101 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_101 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_101 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_101 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_101 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_101 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_101 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_101 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_101 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_101 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_101 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_101 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_101 >= '\t') && (LA34_101 <= '\n')) || LA34_101 == '\r' || LA34_101 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_101);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 30:

        {
            ANTLR3_UINT32 LA34_95;

            ANTLR3_MARKER index34_95;


                LA34_95 = LA(1);


            index34_95 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_95 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_95 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_95 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_95 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_95 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_95 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_95 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_95 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_95 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_95 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_95 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_95 >= '0') && (LA34_95 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_95 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_95 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_95 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_95 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_95 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_95 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_95 >= 'A') && (LA34_95 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_95 >= 'a') && (LA34_95 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_95 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_95 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_95 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_95 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_95 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_95 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_95 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_95 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_95 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_95 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_95 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_95 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_95 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_95 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_95 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_95 >= '\t') && (LA34_95 <= '\n')) || LA34_95 == '\r' || LA34_95 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_95);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 31:

        {
            ANTLR3_UINT32 LA34_100;

            ANTLR3_MARKER index34_100;


                LA34_100 = LA(1);


            index34_100 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_100 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_100 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_100 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_100 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_100 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_100 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_100 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_100 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_100 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_100 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_100 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_100 >= '0') && (LA34_100 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_100 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_100 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_100 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_100 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_100 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_100 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_100 >= 'A') && (LA34_100 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_100 >= 'a') && (LA34_100 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_100 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_100 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_100 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_100 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_100 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_100 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_100 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_100 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_100 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_100 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_100 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_100 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_100 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_100 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_100 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_100 >= '\t') && (LA34_100 <= '\n')) || LA34_100 == '\r' || LA34_100 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_100);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 32:

        {
            ANTLR3_UINT32 LA34_96;

            ANTLR3_MARKER index34_96;


                LA34_96 = LA(1);


            index34_96 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_96 >= '\t') && (LA34_96 <= '\n')) || LA34_96 == '\r' || LA34_96 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_96 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_96 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_96 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_96 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_96 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_96 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_96 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_96 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_96 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_96 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_96 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_96 >= '0') && (LA34_96 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_96 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_96 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_96 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_96 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_96 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_96 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_96 >= 'A') && (LA34_96 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_96 >= 'a') && (LA34_96 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_96 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_96 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_96 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_96 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_96 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_96 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_96 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_96 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_96 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_96 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_96 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_96 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_96 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_96 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_96 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_96);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 33:

        {
            ANTLR3_UINT32 LA34_99;

            ANTLR3_MARKER index34_99;


                LA34_99 = LA(1);


            index34_99 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_99 >= '\t') && (LA34_99 <= '\n')) || LA34_99 == '\r' || LA34_99 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_99 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_99 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_99 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_99 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_99 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_99 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_99 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_99 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_99 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_99 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_99 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_99 >= '0') && (LA34_99 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_99 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_99 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_99 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_99 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_99 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_99 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_99 >= 'A') && (LA34_99 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_99 >= 'a') && (LA34_99 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_99 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_99 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_99 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_99 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_99 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_99 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_99 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_99 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_99 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_99 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_99 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_99 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_99 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_99 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_99 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_99);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 34:

        {
            ANTLR3_UINT32 LA34_93;

            ANTLR3_MARKER index34_93;


                LA34_93 = LA(1);


            index34_93 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_93 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_93 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_93 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_93 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_93 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_93 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_93 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_93 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_93 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_93 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_93 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_93 >= '0') && (LA34_93 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_93 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_93 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_93 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_93 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_93 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_93 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_93 >= 'A') && (LA34_93 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_93 >= 'a') && (LA34_93 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_93 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_93 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_93 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_93 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_93 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_93 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_93 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_93 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_93 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_93 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_93 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_93 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_93 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_93 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_93 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_93 >= '\t') && (LA34_93 <= '\n')) || LA34_93 == '\r' || LA34_93 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_93);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 35:

        {
            ANTLR3_UINT32 LA34_98;

            ANTLR3_MARKER index34_98;


                LA34_98 = LA(1);


            index34_98 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (((LA34_98 >= '\t') && (LA34_98 <= '\n')) || LA34_98 == '\r' || LA34_98 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else if ( (LA34_98 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_98 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_98 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_98 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_98 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_98 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_98 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_98 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_98 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_98 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_98 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_98 >= '0') && (LA34_98 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_98 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_98 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_98 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_98 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_98 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_98 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_98 >= 'A') && (LA34_98 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_98 >= 'a') && (LA34_98 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_98 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_98 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_98 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_98 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_98 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_98 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_98 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_98 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_98 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_98 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_98 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_98 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_98 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (LA34_98 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_98 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else  s = 124;


                SEEK(index34_98);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
        case 36:

        {
            ANTLR3_UINT32 LA34_94;

            ANTLR3_MARKER index34_94;


                LA34_94 = LA(1);


            index34_94 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA34_94 == '!') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 71;
            }

            else if ( (LA34_94 == '%') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 72;
            }

            else if ( (LA34_94 == '&') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 73;
            }

            else if ( (LA34_94 == '(') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 74;
            }

            else if ( (LA34_94 == ')') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 75;
            }

            else if ( (LA34_94 == '*') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 76;
            }

            else if ( (LA34_94 == '+') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 77;
            }

            else if ( (LA34_94 == ',') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 78;
            }

            else if ( (LA34_94 == '-') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 79;
            }

            else if ( (LA34_94 == '.') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 80;
            }

            else if ( (LA34_94 == '/') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 81;
            }

            else if ( (((LA34_94 >= '0') && (LA34_94 <= '9'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 82;
            }

            else if ( (LA34_94 == ':') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 83;
            }

            else if ( (LA34_94 == '<') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 84;
            }

            else if ( (LA34_94 == '=') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 85;
            }

            else if ( (LA34_94 == '>') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 86;
            }

            else if ( (LA34_94 == '?') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 87;
            }

            else if ( (LA34_94 == '@') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 88;
            }

            else if ( (((LA34_94 >= 'A') && (LA34_94 <= 'Z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 89;
            }

            else if ( (((LA34_94 >= 'a') && (LA34_94 <= 'z'))) && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 90;
            }

            else if ( (LA34_94 == '\\') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 91;
            }

            else if ( (LA34_94 == '^') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 92;
            }

            else if ( (LA34_94 == '`') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 93;
            }

            else if ( (LA34_94 == '{') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 94;
            }

            else if ( (LA34_94 == '|') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 95;
            }

            else if ( (LA34_94 == '}') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 96;
            }

            else if ( (LA34_94 == '~') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 97;
            }

            else if ( (LA34_94 == '"') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 106;
            }

            else if ( (LA34_94 == '\'') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 105;
            }

            else if ( (LA34_94 == '#') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 98;
            }

            else if ( (LA34_94 == '$') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 99;
            }

            else if ( (LA34_94 == '_') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 100;
            }

            else if ( (LA34_94 == '[') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 101;
            }

            else if ( (LA34_94 == ']') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 102;
            }

            else if ( (LA34_94 == ';') && (((( GETCHARPOSITIONINLINE() > 0 ))||(( GETCHARPOSITIONINLINE() == 0 )))))
            {
                s = 104;
            }

            else if ( (((LA34_94 >= '\t') && (LA34_94 <= '\n')) || LA34_94 == '\r' || LA34_94 == ' ') && (( GETCHARPOSITIONINLINE() == 0 )))
            {
                s = 103;
            }

            else  s = 124;


                SEEK(index34_94);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
    }
    if (BACKTRACKING > 0)
    {
        FAILEDFLAG = ANTLR3_TRUE;
        return  -1;
    }
    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"1:1: Tokens : ( T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | TAG | LOOP_ | GLOBAL_ | STOP_ | DATA_BLOCK_HEADING | SAVE_FRAME_HEADING | SAVE | FLOAT | UNSIGNED_INTEGER | CHAR_STRING | SEMI_COLON_TEXT_FIELD | COMMENTS | NON_BLANK_CHAR | WHITESPACE );";
    EXCEPTION->decisionNum  = 34;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 34
 */
static
ANTLR3_CYCLIC_DFA cdfa34
    =   {
            34,             /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"1:1: Tokens : ( T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | TAG | LOOP_ | GLOBAL_ | STOP_ | DATA_BLOCK_HEADING | SAVE_FRAME_HEADING | SAVE | FLOAT | UNSIGNED_INTEGER | CHAR_STRING | SEMI_COLON_TEXT_FIELD | COMMENTS | NON_BLANK_CHAR | WHITESPACE );",
            (CDFA_SPECIAL_FUNC) dfa34_sst,
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa34_eot,      /* EOT table                            */
            dfa34_eof,      /* EOF table                            */
            dfa34_min,      /* Minimum tokens for each state    */
            dfa34_max,      /* Maximum tokens for each state    */
            dfa34_accept,       /* Accept table                     */
            dfa34_special,      /* Special transition states        */
            dfa34_transitions   /* Table of transition tables       */

        };
/* End of Cyclic DFA 34
 * ---------------------
 */
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 28:7: ( '\\u001a' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__33
 *
 * Looks to match the characters the constitute the token T__33
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__33(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = T__33;


    // cif.g:28:7: ( '\\u001a' )
    // cif.g:28:9: '\\u001a'
    {
        MATCHC(0x001a);
        if  (HASEXCEPTION())
        {
            goto ruleT__33Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__33Ex; /* Prevent compiler warnings */
    ruleT__33Ex: ;

}
// $ANTLR end T__33

//   Comes from: 29:7: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__34
 *
 * Looks to match the characters the constitute the token T__34
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__34(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = T__34;


    // cif.g:29:7: ( '.' )
    // cif.g:29:9: '.'
    {
        MATCHC('.');
        if  (HASEXCEPTION())
        {
            goto ruleT__34Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__34Ex; /* Prevent compiler warnings */
    ruleT__34Ex: ;

}
// $ANTLR end T__34

//   Comes from: 30:7: ( '?' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__35
 *
 * Looks to match the characters the constitute the token T__35
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__35(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = T__35;


    // cif.g:30:7: ( '?' )
    // cif.g:30:9: '?'
    {
        MATCHC('?');
        if  (HASEXCEPTION())
        {
            goto ruleT__35Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__35Ex; /* Prevent compiler warnings */
    ruleT__35Ex: ;

}
// $ANTLR end T__35

//   Comes from: 31:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__36
 *
 * Looks to match the characters the constitute the token T__36
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__36(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = T__36;


    // cif.g:31:7: ( '-' )
    // cif.g:31:9: '-'
    {
        MATCHC('-');
        if  (HASEXCEPTION())
        {
            goto ruleT__36Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__36Ex; /* Prevent compiler warnings */
    ruleT__36Ex: ;

}
// $ANTLR end T__36

//   Comes from: 32:7: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__37
 *
 * Looks to match the characters the constitute the token T__37
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__37(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = T__37;


    // cif.g:32:7: ( '+' )
    // cif.g:32:9: '+'
    {
        MATCHC('+');
        if  (HASEXCEPTION())
        {
            goto ruleT__37Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__37Ex; /* Prevent compiler warnings */
    ruleT__37Ex: ;

}
// $ANTLR end T__37

//   Comes from: 33:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__38
 *
 * Looks to match the characters the constitute the token T__38
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__38(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = T__38;


    // cif.g:33:7: ( '(' )
    // cif.g:33:9: '('
    {
        MATCHC('(');
        if  (HASEXCEPTION())
        {
            goto ruleT__38Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__38Ex; /* Prevent compiler warnings */
    ruleT__38Ex: ;

}
// $ANTLR end T__38

//   Comes from: 34:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__39
 *
 * Looks to match the characters the constitute the token T__39
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__39(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = T__39;


    // cif.g:34:7: ( ')' )
    // cif.g:34:9: ')'
    {
        MATCHC(')');
        if  (HASEXCEPTION())
        {
            goto ruleT__39Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleT__39Ex; /* Prevent compiler warnings */
    ruleT__39Ex: ;

}
// $ANTLR end T__39

//   Comes from: 206:2: ( ( '\\n' | '\\r' | '\\r\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EOL
 *
 * Looks to match the characters the constitute the token EOL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEOL(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:206:2: ( ( '\\n' | '\\r' | '\\r\\n' ) )
    // cif.g:206:4: ( '\\n' | '\\r' | '\\r\\n' )
    {

        // cif.g:206:4: ( '\\n' | '\\r' | '\\r\\n' )
        {
            int alt1=3;
            switch ( LA(1) )
            {
            case '\n':
                {
                        alt1=1;
                }
                break;
            case '\r':
                {
                        switch ( LA(2) )
                        {
                        case '\n':
                                {
                                        alt1=3;
                                }
                            break;

                        default:
                            alt1=2;}

                }
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 1;
                EXCEPTION->state        = 0;


                goto ruleEOLEx;
            }

            switch (alt1)
            {
                case 1:
                    // cif.g:206:6: '\\n'
                    {
                        MATCHC('\n');
                        if  (HASEXCEPTION())
                        {
                            goto ruleEOLEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;
                case 2:
                    // cif.g:206:13: '\\r'
                    {
                        MATCHC('\r');
                        if  (HASEXCEPTION())
                        {
                            goto ruleEOLEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;
                case 3:
                    // cif.g:206:20: '\\r\\n'
                    {
                        MATCHS(lit_1);
                        if  (HASEXCEPTION())
                        {
                            goto ruleEOLEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }


                    }
                    break;

            }
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleEOLEx; /* Prevent compiler warnings */
    ruleEOLEx: ;

}
// $ANTLR end EOL

//   Comes from: 209:2: ( '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOUBLE_QUOTE
 *
 * Looks to match the characters the constitute the token DOUBLE_QUOTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOUBLE_QUOTE(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:209:2: ( '\"' )
    // cif.g:209:4: '\"'
    {
        MATCHC('"');
        if  (HASEXCEPTION())
        {
            goto ruleDOUBLE_QUOTEEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleDOUBLE_QUOTEEx; /* Prevent compiler warnings */
    ruleDOUBLE_QUOTEEx: ;

}
// $ANTLR end DOUBLE_QUOTE

//   Comes from: 212:2: ( '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SINGLE_QUOTE
 *
 * Looks to match the characters the constitute the token SINGLE_QUOTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSINGLE_QUOTE(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:212:2: ( '\\'' )
    // cif.g:212:4: '\\''
    {
        MATCHC('\'');
        if  (HASEXCEPTION())
        {
            goto ruleSINGLE_QUOTEEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleSINGLE_QUOTEEx; /* Prevent compiler warnings */
    ruleSINGLE_QUOTEEx: ;

}
// $ANTLR end SINGLE_QUOTE

//   Comes from: 215:2: ( '!' | '%' | '&' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ( '0' .. '9' ) | ':' | '<' | '=' | '>' | '?' | '@' | ( 'A' .. 'Z' ) | ( 'a' .. 'z' ) | '\\\\' | '^' | '`' | '{' | '|' | '}' | '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ORDINARY_CHAR
 *
 * Looks to match the characters the constitute the token ORDINARY_CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mORDINARY_CHAR(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    {
        //  cif.g:215:2: ( '!' | '%' | '&' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ( '0' .. '9' ) | ':' | '<' | '=' | '>' | '?' | '@' | ( 'A' .. 'Z' ) | ( 'a' .. 'z' ) | '\\\\' | '^' | '`' | '{' | '|' | '}' | '~' )

        ANTLR3_UINT32 alt2;

        alt2=27;

        switch ( LA(1) )
        {
        case '!':
                {
                        alt2=1;
                }
            break;
        case '%':
                {
                        alt2=2;
                }
            break;
        case '&':
                {
                        alt2=3;
                }
            break;
        case '(':
                {
                        alt2=4;
                }
            break;
        case ')':
                {
                        alt2=5;
                }
            break;
        case '*':
                {
                        alt2=6;
                }
            break;
        case '+':
                {
                        alt2=7;
                }
            break;
        case ',':
                {
                        alt2=8;
                }
            break;
        case '-':
                {
                        alt2=9;
                }
            break;
        case '.':
                {
                        alt2=10;
                }
            break;
        case '/':
                {
                        alt2=11;
                }
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
                {
                        alt2=12;
                }
            break;
        case ':':
                {
                        alt2=13;
                }
            break;
        case '<':
                {
                        alt2=14;
                }
            break;
        case '=':
                {
                        alt2=15;
                }
            break;
        case '>':
                {
                        alt2=16;
                }
            break;
        case '?':
                {
                        alt2=17;
                }
            break;
        case '@':
                {
                        alt2=18;
                }
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
                {
                        alt2=19;
                }
            break;
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
                {
                        alt2=20;
                }
            break;
        case '\\':
                {
                        alt2=21;
                }
            break;
        case '^':
                {
                        alt2=22;
                }
            break;
        case '`':
                {
                        alt2=23;
                }
            break;
        case '{':
                {
                        alt2=24;
                }
            break;
        case '|':
                {
                        alt2=25;
                }
            break;
        case '}':
                {
                        alt2=26;
                }
            break;
        case '~':
                {
                        alt2=27;
                }
            break;

        default:
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state        = 0;


            goto ruleORDINARY_CHAREx;
        }

        switch (alt2)
        {
        case 1:
            // cif.g:215:5: '!'
            {
                MATCHC('!');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 2:
            // cif.g:215:11: '%'
            {
                MATCHC('%');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 3:
            // cif.g:215:17: '&'
            {
                MATCHC('&');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 4:
            // cif.g:215:23: '('
            {
                MATCHC('(');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 5:
            // cif.g:215:29: ')'
            {
                MATCHC(')');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 6:
            // cif.g:215:35: '*'
            {
                MATCHC('*');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 7:
            // cif.g:215:41: '+'
            {
                MATCHC('+');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 8:
            // cif.g:215:47: ','
            {
                MATCHC(',');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 9:
            // cif.g:215:53: '-'
            {
                MATCHC('-');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 10:
            // cif.g:215:59: '.'
            {
                MATCHC('.');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 11:
            // cif.g:215:65: '/'
            {
                MATCHC('/');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 12:
            // cif.g:216:2: ( '0' .. '9' )
            {
                // cif.g:216:2: ( '0' .. '9' )
                // cif.g:216:4: '0' .. '9'
                {
                    MATCHRANGE('0', '9');
                    if  (HASEXCEPTION())
                    {
                        goto ruleORDINARY_CHAREx;
                    }
                    if (HASFAILED())
                    {
                        return ;
                    }

                }


            }
            break;
        case 13:
            // cif.g:216:18: ':'
            {
                MATCHC(':');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 14:
            // cif.g:216:24: '<'
            {
                MATCHC('<');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 15:
            // cif.g:216:30: '='
            {
                MATCHC('=');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 16:
            // cif.g:216:36: '>'
            {
                MATCHC('>');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 17:
            // cif.g:216:42: '?'
            {
                MATCHC('?');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 18:
            // cif.g:216:48: '@'
            {
                MATCHC('@');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 19:
            // cif.g:216:54: ( 'A' .. 'Z' )
            {
                // cif.g:216:54: ( 'A' .. 'Z' )
                // cif.g:216:55: 'A' .. 'Z'
                {
                    MATCHRANGE('A', 'Z');
                    if  (HASEXCEPTION())
                    {
                        goto ruleORDINARY_CHAREx;
                    }
                    if (HASFAILED())
                    {
                        return ;
                    }

                }


            }
            break;
        case 20:
            // cif.g:216:67: ( 'a' .. 'z' )
            {
                // cif.g:216:67: ( 'a' .. 'z' )
                // cif.g:216:68: 'a' .. 'z'
                {
                    MATCHRANGE('a', 'z');
                    if  (HASEXCEPTION())
                    {
                        goto ruleORDINARY_CHAREx;
                    }
                    if (HASFAILED())
                    {
                        return ;
                    }

                }


            }
            break;
        case 21:
            // cif.g:217:2: '\\\\'
            {
                MATCHC('\\');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 22:
            // cif.g:217:9: '^'
            {
                MATCHC('^');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 23:
            // cif.g:217:15: '`'
            {
                MATCHC('`');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 24:
            // cif.g:217:21: '{'
            {
                MATCHC('{');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 25:
            // cif.g:217:27: '|'
            {
                MATCHC('|');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 26:
            // cif.g:217:33: '}'
            {
                MATCHC('}');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 27:
            // cif.g:217:39: '~'
            {
                MATCHC('~');
                if  (HASEXCEPTION())
                {
                    goto ruleORDINARY_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleORDINARY_CHAREx; /* Prevent compiler warnings */
    ruleORDINARY_CHAREx: ;

}
// $ANTLR end ORDINARY_CHAR

//   Comes from: 222:2: ( ORDINARY_CHAR | DOUBLE_QUOTE | SINGLE_QUOTE | '#' | '$' | '_' | '[' | ']' | ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NON_BLANK_CHAR_
 *
 * Looks to match the characters the constitute the token NON_BLANK_CHAR_
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNON_BLANK_CHAR_(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    {
        //  cif.g:222:2: ( ORDINARY_CHAR | DOUBLE_QUOTE | SINGLE_QUOTE | '#' | '$' | '_' | '[' | ']' | ';' )

        ANTLR3_UINT32 alt3;

        alt3=9;

        switch ( LA(1) )
        {
        case '!':
        case '%':
        case '&':
        case '(':
        case ')':
        case '*':
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '\\':
        case '^':
        case '`':
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        case '{':
        case '|':
        case '}':
        case '~':
                {
                        alt3=1;
                }
            break;
        case '"':
                {
                        alt3=2;
                }
            break;
        case '\'':
                {
                        alt3=3;
                }
            break;
        case '#':
                {
                        alt3=4;
                }
            break;
        case '$':
                {
                        alt3=5;
                }
            break;
        case '_':
                {
                        alt3=6;
                }
            break;
        case '[':
                {
                        alt3=7;
                }
            break;
        case ']':
                {
                        alt3=8;
                }
            break;
        case ';':
                {
                        alt3=9;
                }
            break;

        default:
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 3;
            EXCEPTION->state        = 0;


            goto ruleNON_BLANK_CHAR_Ex;
        }

        switch (alt3)
        {
        case 1:
            // cif.g:222:4: ORDINARY_CHAR
            {
                /* 222:4: ORDINARY_CHAR */
                mORDINARY_CHAR(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 2:
            // cif.g:222:20: DOUBLE_QUOTE
            {
                /* 222:20: DOUBLE_QUOTE */
                mDOUBLE_QUOTE(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 3:
            // cif.g:222:35: SINGLE_QUOTE
            {
                /* 222:35: SINGLE_QUOTE */
                mSINGLE_QUOTE(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 4:
            // cif.g:222:50: '#'
            {
                MATCHC('#');
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 5:
            // cif.g:222:56: '$'
            {
                MATCHC('$');
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 6:
            // cif.g:222:62: '_'
            {
                MATCHC('_');
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 7:
            // cif.g:222:68: '['
            {
                MATCHC('[');
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 8:
            // cif.g:222:74: ']'
            {
                MATCHC(']');
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 9:
            // cif.g:222:80: ';'
            {
                MATCHC(';');
                if  (HASEXCEPTION())
                {
                    goto ruleNON_BLANK_CHAR_Ex;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleNON_BLANK_CHAR_Ex; /* Prevent compiler warnings */
    ruleNON_BLANK_CHAR_Ex: ;

}
// $ANTLR end NON_BLANK_CHAR_

//   Comes from: 225:2: ( ORDINARY_CHAR | DOUBLE_QUOTE | SINGLE_QUOTE | '#' | '$' | '_' | '[' | ']' | ' ' | '\\t' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TEXT_LEAD_CHAR
 *
 * Looks to match the characters the constitute the token TEXT_LEAD_CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTEXT_LEAD_CHAR(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    {
        //  cif.g:225:2: ( ORDINARY_CHAR | DOUBLE_QUOTE | SINGLE_QUOTE | '#' | '$' | '_' | '[' | ']' | ' ' | '\\t' )

        ANTLR3_UINT32 alt4;

        alt4=10;

        switch ( LA(1) )
        {
        case '!':
        case '%':
        case '&':
        case '(':
        case ')':
        case '*':
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '\\':
        case '^':
        case '`':
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        case '{':
        case '|':
        case '}':
        case '~':
                {
                        alt4=1;
                }
            break;
        case '"':
                {
                        alt4=2;
                }
            break;
        case '\'':
                {
                        alt4=3;
                }
            break;
        case '#':
                {
                        alt4=4;
                }
            break;
        case '$':
                {
                        alt4=5;
                }
            break;
        case '_':
                {
                        alt4=6;
                }
            break;
        case '[':
                {
                        alt4=7;
                }
            break;
        case ']':
                {
                        alt4=8;
                }
            break;
        case ' ':
                {
                        alt4=9;
                }
            break;
        case '\t':
                {
                        alt4=10;
                }
            break;

        default:
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 4;
            EXCEPTION->state        = 0;


            goto ruleTEXT_LEAD_CHAREx;
        }

        switch (alt4)
        {
        case 1:
            // cif.g:225:4: ORDINARY_CHAR
            {
                /* 225:4: ORDINARY_CHAR */
                mORDINARY_CHAR(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 2:
            // cif.g:225:20: DOUBLE_QUOTE
            {
                /* 225:20: DOUBLE_QUOTE */
                mDOUBLE_QUOTE(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 3:
            // cif.g:225:35: SINGLE_QUOTE
            {
                /* 225:35: SINGLE_QUOTE */
                mSINGLE_QUOTE(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 4:
            // cif.g:225:50: '#'
            {
                MATCHC('#');
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 5:
            // cif.g:225:56: '$'
            {
                MATCHC('$');
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 6:
            // cif.g:225:62: '_'
            {
                MATCHC('_');
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 7:
            // cif.g:225:68: '['
            {
                MATCHC('[');
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 8:
            // cif.g:225:74: ']'
            {
                MATCHC(']');
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 9:
            // cif.g:225:80: ' '
            {
                MATCHC(' ');
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 10:
            // cif.g:225:86: '\\t'
            {
                MATCHC('\t');
                if  (HASEXCEPTION())
                {
                    goto ruleTEXT_LEAD_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleTEXT_LEAD_CHAREx; /* Prevent compiler warnings */
    ruleTEXT_LEAD_CHAREx: ;

}
// $ANTLR end TEXT_LEAD_CHAR

//   Comes from: 228:2: ( ORDINARY_CHAR | '#' | '$' | '_' | '[' | ']' | ' ' | '\\t' | ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ANY_PRINT_CHAR
 *
 * Looks to match the characters the constitute the token ANY_PRINT_CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mANY_PRINT_CHAR(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    {
        //  cif.g:228:2: ( ORDINARY_CHAR | '#' | '$' | '_' | '[' | ']' | ' ' | '\\t' | ';' )

        ANTLR3_UINT32 alt5;

        alt5=9;

        switch ( LA(1) )
        {
        case '!':
        case '%':
        case '&':
        case '(':
        case ')':
        case '*':
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '\\':
        case '^':
        case '`':
        case 'a':
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        case '{':
        case '|':
        case '}':
        case '~':
                {
                        alt5=1;
                }
            break;
        case '#':
                {
                        alt5=2;
                }
            break;
        case '$':
                {
                        alt5=3;
                }
            break;
        case '_':
                {
                        alt5=4;
                }
            break;
        case '[':
                {
                        alt5=5;
                }
            break;
        case ']':
                {
                        alt5=6;
                }
            break;
        case ' ':
                {
                        alt5=7;
                }
            break;
        case '\t':
                {
                        alt5=8;
                }
            break;
        case ';':
                {
                        alt5=9;
                }
            break;

        default:
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 5;
            EXCEPTION->state        = 0;


            goto ruleANY_PRINT_CHAREx;
        }

        switch (alt5)
        {
        case 1:
            // cif.g:228:4: ORDINARY_CHAR
            {
                /* 228:4: ORDINARY_CHAR */
                mORDINARY_CHAR(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 2:
            // cif.g:228:20: '#'
            {
                MATCHC('#');
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 3:
            // cif.g:228:26: '$'
            {
                MATCHC('$');
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 4:
            // cif.g:228:32: '_'
            {
                MATCHC('_');
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 5:
            // cif.g:228:38: '['
            {
                MATCHC('[');
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 6:
            // cif.g:228:44: ']'
            {
                MATCHC(']');
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 7:
            // cif.g:228:50: ' '
            {
                MATCHC(' ');
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 8:
            // cif.g:228:56: '\\t'
            {
                MATCHC('\t');
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 9:
            // cif.g:228:63: ';'
            {
                MATCHC(';');
                if  (HASEXCEPTION())
                {
                    goto ruleANY_PRINT_CHAREx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleANY_PRINT_CHAREx; /* Prevent compiler warnings */
    ruleANY_PRINT_CHAREx: ;

}
// $ANTLR end ANY_PRINT_CHAR

//   Comes from: 234:5: ( '_' ( NON_BLANK_CHAR_ )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TAG
 *
 * Looks to match the characters the constitute the token TAG
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTAG(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = TAG;


    // cif.g:234:5: ( '_' ( NON_BLANK_CHAR_ )+ )
    // cif.g:234:7: '_' ( NON_BLANK_CHAR_ )+
    {
        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleTAGEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // cif.g:234:11: ( NON_BLANK_CHAR_ )+
        {
            int cnt6=0;

            for (;;)
            {
                int alt6=2;
                switch ( LA(1) )
                {
                case '!':
                case '"':
                case '#':
                case '$':
                case '%':
                case '&':
                case '\'':
                case '(':
                case ')':
                case '*':
                case '+':
                case ',':
                case '-':
                case '.':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                case 'I':
                case 'J':
                case 'K':
                case 'L':
                case 'M':
                case 'N':
                case 'O':
                case 'P':
                case 'Q':
                case 'R':
                case 'S':
                case 'T':
                case 'U':
                case 'V':
                case 'W':
                case 'X':
                case 'Y':
                case 'Z':
                case '[':
                case '\\':
                case ']':
                case '^':
                case '_':
                case '`':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                case '{':
                case '|':
                case '}':
                case '~':
                        {
                                alt6=1;
                        }
                    break;

                }

                switch (alt6)
                {
                    case 1:
                        // cif.g:234:12: NON_BLANK_CHAR_
                        {
                            /* 234:12: NON_BLANK_CHAR_ */
                            mNON_BLANK_CHAR_(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleTAGEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;

                    default:

                        if ( cnt6 >= 1 )
                        {
                            goto loop6;
                        }
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleTAGEx;
                }
                cnt6++;
            }
            loop6: ;    /* Jump to here if this rule does not match */
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTAGEx; /* Prevent compiler warnings */
    ruleTAGEx: ;

}
// $ANTLR end TAG

//   Comes from: 242:7: ( ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DATA_
 *
 * Looks to match the characters the constitute the token DATA_
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDATA_(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:242:7: ( ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) '_' )
    // cif.g:242:9: ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) '_'
    {
        if ( LA(1) == 'D' || LA(1) == 'd' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleDATA_Ex;
        }

        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleDATA_Ex;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleDATA_Ex;
        }

        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleDATA_Ex;
        }

        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleDATA_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleDATA_Ex; /* Prevent compiler warnings */
    ruleDATA_Ex: ;

}
// $ANTLR end DATA_

//   Comes from: 245:7: ( ( 'S' | 's' ) ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'E' | 'e' ) '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SAVE_
 *
 * Looks to match the characters the constitute the token SAVE_
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSAVE_(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:245:7: ( ( 'S' | 's' ) ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'E' | 'e' ) '_' )
    // cif.g:245:9: ( 'S' | 's' ) ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'E' | 'e' ) '_'
    {
        if ( LA(1) == 'S' || LA(1) == 's' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSAVE_Ex;
        }

        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSAVE_Ex;
        }

        if ( LA(1) == 'V' || LA(1) == 'v' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSAVE_Ex;
        }

        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSAVE_Ex;
        }

        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleSAVE_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleSAVE_Ex; /* Prevent compiler warnings */
    ruleSAVE_Ex: ;

}
// $ANTLR end SAVE_

//   Comes from: 247:8: ( ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'O' | 'o' ) ( 'P' | 'p' ) '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOOP_
 *
 * Looks to match the characters the constitute the token LOOP_
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLOOP_(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = LOOP_;


    // cif.g:247:8: ( ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'O' | 'o' ) ( 'P' | 'p' ) '_' )
    // cif.g:247:10: ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'O' | 'o' ) ( 'P' | 'p' ) '_'
    {
        if ( LA(1) == 'L' || LA(1) == 'l' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleLOOP_Ex;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleLOOP_Ex;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleLOOP_Ex;
        }

        if ( LA(1) == 'P' || LA(1) == 'p' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleLOOP_Ex;
        }

        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleLOOP_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLOOP_Ex; /* Prevent compiler warnings */
    ruleLOOP_Ex: ;

}
// $ANTLR end LOOP_

//   Comes from: 249:9: ( ( 'G' | 'g' ) ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'L' | 'l' ) '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GLOBAL_
 *
 * Looks to match the characters the constitute the token GLOBAL_
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mGLOBAL_(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = GLOBAL_;


    // cif.g:249:9: ( ( 'G' | 'g' ) ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'L' | 'l' ) '_' )
    // cif.g:249:11: ( 'G' | 'g' ) ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'L' | 'l' ) '_'
    {
        if ( LA(1) == 'G' || LA(1) == 'g' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleGLOBAL_Ex;
        }

        if ( LA(1) == 'L' || LA(1) == 'l' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleGLOBAL_Ex;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleGLOBAL_Ex;
        }

        if ( LA(1) == 'B' || LA(1) == 'b' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleGLOBAL_Ex;
        }

        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleGLOBAL_Ex;
        }

        if ( LA(1) == 'L' || LA(1) == 'l' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleGLOBAL_Ex;
        }

        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleGLOBAL_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleGLOBAL_Ex; /* Prevent compiler warnings */
    ruleGLOBAL_Ex: ;

}
// $ANTLR end GLOBAL_

//   Comes from: 251:7: ( ( 'S' | 's' ) ( 'T' | 't' ) ( 'O' | 'o' ) ( 'P' | 'p' ) '_' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STOP_
 *
 * Looks to match the characters the constitute the token STOP_
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTOP_(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = STOP_;


    // cif.g:251:7: ( ( 'S' | 's' ) ( 'T' | 't' ) ( 'O' | 'o' ) ( 'P' | 'p' ) '_' )
    // cif.g:251:9: ( 'S' | 's' ) ( 'T' | 't' ) ( 'O' | 'o' ) ( 'P' | 'p' ) '_'
    {
        if ( LA(1) == 'S' || LA(1) == 's' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSTOP_Ex;
        }

        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSTOP_Ex;
        }

        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSTOP_Ex;
        }

        if ( LA(1) == 'P' || LA(1) == 'p' )
        {
            CONSUME();
        FAILEDFLAG=ANTLR3_FALSE;

        }
        else
        {
            if (BACKTRACKING>0)
            {
                FAILEDFLAG = ANTLR3_TRUE;
                return ;
            }
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleSTOP_Ex;
        }

        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleSTOP_Ex;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTOP_Ex; /* Prevent compiler warnings */
    ruleSTOP_Ex: ;

}
// $ANTLR end STOP_

//   Comes from: 260:2: ( DATA_ ( NON_BLANK_CHAR )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DATA_BLOCK_HEADING
 *
 * Looks to match the characters the constitute the token DATA_BLOCK_HEADING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDATA_BLOCK_HEADING(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = DATA_BLOCK_HEADING;


    // cif.g:260:2: ( DATA_ ( NON_BLANK_CHAR )+ )
    // cif.g:260:4: DATA_ ( NON_BLANK_CHAR )+
    {
        /* 260:4: DATA_ ( NON_BLANK_CHAR )+ */
        mDATA_(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDATA_BLOCK_HEADINGEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // cif.g:260:10: ( NON_BLANK_CHAR )+
        {
            int cnt7=0;

            for (;;)
            {
                int alt7=2;
                switch ( LA(1) )
                {
                case '!':
                case '"':
                case '#':
                case '$':
                case '%':
                case '&':
                case '\'':
                case '(':
                case ')':
                case '*':
                case '+':
                case ',':
                case '-':
                case '.':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                case 'I':
                case 'J':
                case 'K':
                case 'L':
                case 'M':
                case 'N':
                case 'O':
                case 'P':
                case 'Q':
                case 'R':
                case 'S':
                case 'T':
                case 'U':
                case 'V':
                case 'W':
                case 'X':
                case 'Y':
                case 'Z':
                case '[':
                case '\\':
                case ']':
                case '^':
                case '_':
                case '`':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                case '{':
                case '|':
                case '}':
                case '~':
                        {
                                alt7=1;
                        }
                    break;

                }

                switch (alt7)
                {
                    case 1:
                        // cif.g:260:11: NON_BLANK_CHAR
                        {
                            /* 260:11: NON_BLANK_CHAR */
                            mNON_BLANK_CHAR(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleDATA_BLOCK_HEADINGEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;

                    default:

                        if ( cnt7 >= 1 )
                        {
                            goto loop7;
                        }
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleDATA_BLOCK_HEADINGEx;
                }
                cnt7++;
            }
            loop7: ;    /* Jump to here if this rule does not match */
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleDATA_BLOCK_HEADINGEx; /* Prevent compiler warnings */
    ruleDATA_BLOCK_HEADINGEx: ;

}
// $ANTLR end DATA_BLOCK_HEADING

//   Comes from: 263:2: ( SAVE_ ( NON_BLANK_CHAR )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SAVE_FRAME_HEADING
 *
 * Looks to match the characters the constitute the token SAVE_FRAME_HEADING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSAVE_FRAME_HEADING(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = SAVE_FRAME_HEADING;


    // cif.g:263:2: ( SAVE_ ( NON_BLANK_CHAR )+ )
    // cif.g:263:4: SAVE_ ( NON_BLANK_CHAR )+
    {
        /* 263:4: SAVE_ ( NON_BLANK_CHAR )+ */
        mSAVE_(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSAVE_FRAME_HEADINGEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        // cif.g:263:10: ( NON_BLANK_CHAR )+
        {
            int cnt8=0;

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) )
                {
                case '!':
                case '"':
                case '#':
                case '$':
                case '%':
                case '&':
                case '\'':
                case '(':
                case ')':
                case '*':
                case '+':
                case ',':
                case '-':
                case '.':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                case 'I':
                case 'J':
                case 'K':
                case 'L':
                case 'M':
                case 'N':
                case 'O':
                case 'P':
                case 'Q':
                case 'R':
                case 'S':
                case 'T':
                case 'U':
                case 'V':
                case 'W':
                case 'X':
                case 'Y':
                case 'Z':
                case '[':
                case '\\':
                case ']':
                case '^':
                case '_':
                case '`':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                case '{':
                case '|':
                case '}':
                case '~':
                        {
                                alt8=1;
                        }
                    break;

                }

                switch (alt8)
                {
                    case 1:
                        // cif.g:263:11: NON_BLANK_CHAR
                        {
                            /* 263:11: NON_BLANK_CHAR */
                            mNON_BLANK_CHAR(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleSAVE_FRAME_HEADINGEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;

                    default:

                        if ( cnt8 >= 1 )
                        {
                            goto loop8;
                        }
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleSAVE_FRAME_HEADINGEx;
                }
                cnt8++;
            }
            loop8: ;    /* Jump to here if this rule does not match */
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSAVE_FRAME_HEADINGEx; /* Prevent compiler warnings */
    ruleSAVE_FRAME_HEADINGEx: ;

}
// $ANTLR end SAVE_FRAME_HEADING

//   Comes from: 265:6: ( SAVE_ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SAVE
 *
 * Looks to match the characters the constitute the token SAVE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSAVE(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = SAVE;


    // cif.g:265:6: ( SAVE_ )
    // cif.g:265:8: SAVE_
    {
        /* 265:8: SAVE_ */
        mSAVE_(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSAVEEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSAVEEx; /* Prevent compiler warnings */
    ruleSAVEEx: ;

}
// $ANTLR end SAVE

//   Comes from: 271:16: ( '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIGIT
 *
 * Looks to match the characters the constitute the token DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDIGIT(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:271:16: ( '0' .. '9' )
    // cif.g:271:18: '0' .. '9'
    {
        MATCHRANGE('0', '9');
        if  (HASEXCEPTION())
        {
            goto ruleDIGITEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleDIGITEx; /* Prevent compiler warnings */
    ruleDIGITEx: ;

}
// $ANTLR end DIGIT

//   Comes from: 273:18: ( ( ( 'e' | 'E' ) | ( 'e' | 'E' ) ( '+' | '-' ) ) ( DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:273:18: ( ( ( 'e' | 'E' ) | ( 'e' | 'E' ) ( '+' | '-' ) ) ( DIGIT )+ )
    // cif.g:273:21: ( ( 'e' | 'E' ) | ( 'e' | 'E' ) ( '+' | '-' ) ) ( DIGIT )+
    {

        // cif.g:273:21: ( ( 'e' | 'E' ) | ( 'e' | 'E' ) ( '+' | '-' ) )
        {
            int alt9=2;
            switch ( LA(1) )
            {
            case 'E':
            case 'e':
                {
                        switch ( LA(2) )
                        {
                        case '+':
                        case '-':
                                {
                                        alt9=2;
                                }
                            break;
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                                {
                                        alt9=1;
                                }
                            break;

                        default:
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message      = (void *)"";
                            EXCEPTION->decisionNum  = 9;
                            EXCEPTION->state        = 1;


                            goto ruleEXPONENTEx;
                        }

                }
                break;

            default:
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto ruleEXPONENTEx;
            }

            switch (alt9)
            {
                case 1:
                    // cif.g:273:23: ( 'e' | 'E' )
                    {
                        if ( LA(1) == 'E' || LA(1) == 'e' )
                        {
                            CONSUME();
                        FAILEDFLAG=ANTLR3_FALSE;

                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                            LRECOVER();    goto ruleEXPONENTEx;
                        }


                    }
                    break;
                case 2:
                    // cif.g:273:38: ( 'e' | 'E' ) ( '+' | '-' )
                    {
                        if ( LA(1) == 'E' || LA(1) == 'e' )
                        {
                            CONSUME();
                        FAILEDFLAG=ANTLR3_FALSE;

                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                            LRECOVER();    goto ruleEXPONENTEx;
                        }

                        if ( LA(1) == '+' || LA(1) == '-' )
                        {
                            CONSUME();
                        FAILEDFLAG=ANTLR3_FALSE;

                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                            LRECOVER();    goto ruleEXPONENTEx;
                        }


                    }
                    break;

            }
        }
        // cif.g:273:66: ( DIGIT )+
        {
            int cnt10=0;

            for (;;)
            {
                int alt10=2;
                switch ( LA(1) )
                {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                        {
                                alt10=1;
                        }
                    break;

                }

                switch (alt10)
                {
                    case 1:
                        // cif.g:273:67: DIGIT
                        {
                            /* 273:67: DIGIT */
                            mDIGIT(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleEXPONENTEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;

                    default:

                        if ( cnt10 >= 1 )
                        {
                            goto loop10;
                        }
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleEXPONENTEx;
                }
                cnt10++;
            }
            loop10: ;   /* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 275:18: ( ( '+' | '-' )? ( DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTEGER
 *
 * Looks to match the characters the constitute the token INTEGER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTEGER(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:275:18: ( ( '+' | '-' )? ( DIGIT )+ )
    // cif.g:275:21: ( '+' | '-' )? ( DIGIT )+
    {

        // cif.g:275:21: ( '+' | '-' )?
        {
            int alt11=2;
            switch ( LA(1) )
            {
                case '+':
                case '-':
                        {
                                alt11=1;
                        }
                    break;
            }

            switch (alt11)
            {
                case 1:
                    // cif.g:
                    {
                        if ( LA(1) == '+' || LA(1) == '-' )
                        {
                            CONSUME();
                        FAILEDFLAG=ANTLR3_FALSE;

                        }
                        else
                        {
                            if (BACKTRACKING>0)
                            {
                                FAILEDFLAG = ANTLR3_TRUE;
                                return ;
                            }
                            CONSTRUCTEX();
                            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                            LRECOVER();    goto ruleINTEGEREx;
                        }


                    }
                    break;

            }
        }
        // cif.g:275:36: ( DIGIT )+
        {
            int cnt12=0;

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) )
                {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                        {
                                alt12=1;
                        }
                    break;

                }

                switch (alt12)
                {
                    case 1:
                        // cif.g:275:37: DIGIT
                        {
                            /* 275:37: DIGIT */
                            mDIGIT(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleINTEGEREx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;

                    default:

                        if ( cnt12 >= 1 )
                        {
                            goto loop12;
                        }
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleINTEGEREx;
                }
                cnt12++;
            }
            loop12: ;   /* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleINTEGEREx; /* Prevent compiler warnings */
    ruleINTEGEREx: ;

}
// $ANTLR end INTEGER

//   Comes from: 278:2: ( INTEGER EXPONENT | ( ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ ) | ( DIGIT )+ '.' ) ( EXPONENT )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT
 *
 * Looks to match the characters the constitute the token FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = FLOAT;


    {
        //  cif.g:278:2: ( INTEGER EXPONENT | ( ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ ) | ( DIGIT )+ '.' ) ( EXPONENT )? )

        ANTLR3_UINT32 alt19;

        alt19=2;

        alt19 = cdfa19.predict(ctx, RECOGNIZER, ISTREAM, &cdfa19);
        if  (HASEXCEPTION())
        {
            goto ruleFLOATEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        switch (alt19)
        {
        case 1:
            // cif.g:278:5: INTEGER EXPONENT
            {
                /* 278:5: INTEGER EXPONENT */
                mINTEGER(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleFLOATEx;
                }
                if (HASFAILED())
                {
                    return ;
                }
                /* 278:5: INTEGER EXPONENT */
                mEXPONENT(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleFLOATEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 2:
            // cif.g:278:24: ( ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ ) | ( DIGIT )+ '.' ) ( EXPONENT )?
            {

                // cif.g:278:24: ( ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ ) | ( DIGIT )+ '.' )
                {
                    int alt17=2;
                    alt17 = cdfa17.predict(ctx, RECOGNIZER, ISTREAM, &cdfa17);
                    if  (HASEXCEPTION())
                    {
                        goto ruleFLOATEx;
                    }
                    if (HASFAILED())
                    {
                        return ;
                    }
                    switch (alt17)
                    {
                        case 1:
                            // cif.g:278:26: ( '+' | '-' )? ( ( DIGIT )* '.' ( DIGIT )+ )
                            {

                                // cif.g:278:26: ( '+' | '-' )?
                                {
                                    int alt13=2;
                                    switch ( LA(1) )
                                    {
                                        case '+':
                                        case '-':
                                                {
                                                        alt13=1;
                                                }
                                            break;
                                    }

                                    switch (alt13)
                                    {
                                        case 1:
                                            // cif.g:
                                            {
                                                if ( LA(1) == '+' || LA(1) == '-' )
                                                {
                                                    CONSUME();
                                                FAILEDFLAG=ANTLR3_FALSE;

                                                }
                                                else
                                                {
                                                    if (BACKTRACKING>0)
                                                    {
                                                        FAILEDFLAG = ANTLR3_TRUE;
                                                        return ;
                                                    }
                                                    CONSTRUCTEX();
                                                    EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                                                    EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

                                                    LRECOVER();    goto ruleFLOATEx;
                                                }


                                            }
                                            break;

                                    }
                                }
                                // cif.g:278:41: ( ( DIGIT )* '.' ( DIGIT )+ )
                                // cif.g:278:43: ( DIGIT )* '.' ( DIGIT )+
                                {

                                    // cif.g:278:43: ( DIGIT )*

                                    for (;;)
                                    {
                                        int alt14=2;
                                        switch ( LA(1) )
                                        {
                                        case '0':
                                        case '1':
                                        case '2':
                                        case '3':
                                        case '4':
                                        case '5':
                                        case '6':
                                        case '7':
                                        case '8':
                                        case '9':
                                                {
                                                        alt14=1;
                                                }
                                            break;

                                        }

                                        switch (alt14)
                                        {
                                        case 1:
                                            // cif.g:278:44: DIGIT
                                            {
                                                /* 278:44: DIGIT */
                                                mDIGIT(ctx );
                                                if  (HASEXCEPTION())
                                                {
                                                    goto ruleFLOATEx;
                                                }
                                                if (HASFAILED())
                                                {
                                                    return ;
                                                }

                                            }
                                            break;

                                        default:
                                            goto loop14;        /* break out of the loop */
                                            break;
                                        }
                                    }
                                    loop14: ; /* Jump out to here if this rule does not match */

                                    MATCHC('.');
                                    if  (HASEXCEPTION())
                                    {
                                        goto ruleFLOATEx;
                                    }
                                    if (HASFAILED())
                                    {
                                        return ;
                                    }
                                    // cif.g:278:56: ( DIGIT )+
                                    {
                                        int cnt15=0;

                                        for (;;)
                                        {
                                            int alt15=2;
                                        switch ( LA(1) )
                                        {
                                        case '0':
                                        case '1':
                                        case '2':
                                        case '3':
                                        case '4':
                                        case '5':
                                        case '6':
                                        case '7':
                                        case '8':
                                        case '9':
                                                {
                                                        alt15=1;
                                                }
                                            break;

                                        }

                                        switch (alt15)
                                        {
                                            case 1:
                                                // cif.g:278:57: DIGIT
                                                {
                                                    /* 278:57: DIGIT */
                                                    mDIGIT(ctx );
                                                    if  (HASEXCEPTION())
                                                    {
                                                        goto ruleFLOATEx;
                                                    }
                                                    if (HASFAILED())
                                                    {
                                                        return ;
                                                    }

                                                }
                                                break;

                                            default:

                                                if ( cnt15 >= 1 )
                                                {
                                                    goto loop15;
                                                }
                                                if (BACKTRACKING>0)
                                                {
                                                    FAILEDFLAG = ANTLR3_TRUE;
                                                    return ;
                                                }
                                                /* mismatchedSetEx()
                                                 */
                                                CONSTRUCTEX();
                                                EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                                                EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                                                goto ruleFLOATEx;
                                        }
                                        cnt15++;
                                        }
                                        loop15: ;       /* Jump to here if this rule does not match */
                                    }

                                }


                            }
                            break;
                        case 2:
                            // cif.g:278:68: ( DIGIT )+ '.'
                            {
                                // cif.g:278:68: ( DIGIT )+
                                {
                                    int cnt16=0;

                                    for (;;)
                                    {
                                        int alt16=2;
                                        switch ( LA(1) )
                                        {
                                        case '0':
                                        case '1':
                                        case '2':
                                        case '3':
                                        case '4':
                                        case '5':
                                        case '6':
                                        case '7':
                                        case '8':
                                        case '9':
                                                {
                                                        alt16=1;
                                                }
                                            break;

                                        }

                                        switch (alt16)
                                        {
                                            case 1:
                                                // cif.g:278:69: DIGIT
                                                {
                                                    /* 278:69: DIGIT */
                                                    mDIGIT(ctx );
                                                    if  (HASEXCEPTION())
                                                    {
                                                        goto ruleFLOATEx;
                                                    }
                                                    if (HASFAILED())
                                                    {
                                                        return ;
                                                    }

                                                }
                                                break;

                                            default:

                                                if ( cnt16 >= 1 )
                                                {
                                                    goto loop16;
                                                }
                                                if (BACKTRACKING>0)
                                                {
                                                    FAILEDFLAG = ANTLR3_TRUE;
                                                    return ;
                                                }
                                                /* mismatchedSetEx()
                                                 */
                                                CONSTRUCTEX();
                                                EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                                                EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                                                goto ruleFLOATEx;
                                        }
                                        cnt16++;
                                    }
                                    loop16: ;   /* Jump to here if this rule does not match */
                                }
                                MATCHC('.');
                                if  (HASEXCEPTION())
                                {
                                    goto ruleFLOATEx;
                                }
                                if (HASFAILED())
                                {
                                    return ;
                                }

                            }
                            break;

                    }
                }

                // cif.g:278:83: ( EXPONENT )?
                {
                    int alt18=2;
                    switch ( LA(1) )
                    {
                        case 'E':
                        case 'e':
                                {
                                        alt18=1;
                                }
                            break;
                    }

                    switch (alt18)
                    {
                        case 1:
                            // cif.g:278:84: EXPONENT
                            {
                                /* 278:84: EXPONENT */
                                mEXPONENT(ctx );
                                if  (HASEXCEPTION())
                                {
                                    goto ruleFLOATEx;
                                }
                                if (HASFAILED())
                                {
                                    return ;
                                }

                            }
                            break;

                    }
                }

            }
            break;

        }
    }
        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFLOATEx; /* Prevent compiler warnings */
    ruleFLOATEx: ;

}
// $ANTLR end FLOAT

//   Comes from: 281:2: ( ( DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNSIGNED_INTEGER
 *
 * Looks to match the characters the constitute the token UNSIGNED_INTEGER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNSIGNED_INTEGER(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = UNSIGNED_INTEGER;


    // cif.g:281:2: ( ( DIGIT )+ )
    // cif.g:281:4: ( DIGIT )+
    {
        // cif.g:281:4: ( DIGIT )+
        {
            int cnt20=0;

            for (;;)
            {
                int alt20=2;
                switch ( LA(1) )
                {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                        {
                                alt20=1;
                        }
                    break;

                }

                switch (alt20)
                {
                    case 1:
                        // cif.g:281:5: DIGIT
                        {
                            /* 281:5: DIGIT */
                            mDIGIT(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleUNSIGNED_INTEGEREx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;

                    default:

                        if ( cnt20 >= 1 )
                        {
                            goto loop20;
                        }
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleUNSIGNED_INTEGEREx;
                }
                cnt20++;
            }
            loop20: ;   /* Jump to here if this rule does not match */
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleUNSIGNED_INTEGEREx; /* Prevent compiler warnings */
    ruleUNSIGNED_INTEGEREx: ;

}
// $ANTLR end UNSIGNED_INTEGER

//   Comes from: 289:2: ( ( ({...}? => ';' ) | ORDINARY_CHAR ) ( NON_BLANK_CHAR_ )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNQUOTED_STRING
 *
 * Looks to match the characters the constitute the token UNQUOTED_STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNQUOTED_STRING(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:289:2: ( ( ({...}? => ';' ) | ORDINARY_CHAR ) ( NON_BLANK_CHAR_ )* )
    // cif.g:289:4: ( ({...}? => ';' ) | ORDINARY_CHAR ) ( NON_BLANK_CHAR_ )*
    {

        // cif.g:289:4: ( ({...}? => ';' ) | ORDINARY_CHAR )
        {
            int alt21=2;

            {
                int LA21_0 = LA(1);
                if ( (LA21_0 == ';') && (( GETCHARPOSITIONINLINE() > 0 )))
                {
                    alt21=1;
                }
                else if ( (LA21_0 == '!' || ((LA21_0 >= '%') && (LA21_0 <= '&')) || ((LA21_0 >= '(') && (LA21_0 <= ':')) || ((LA21_0 >= '<') && (LA21_0 <= 'Z')) || LA21_0 == '\\' || LA21_0 == '^' || ((LA21_0 >= '`') && (LA21_0 <= '~'))) )
                {
                    alt21=2;
                }
                else
                {
                    if (BACKTRACKING>0)
                    {
                        FAILEDFLAG = ANTLR3_TRUE;
                        return ;
                    }

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 21;
                    EXCEPTION->state        = 0;


                    goto ruleUNQUOTED_STRINGEx;
                }
            }
            switch (alt21)
            {
                case 1:
                    // cif.g:289:5: ({...}? => ';' )
                    {
                        // cif.g:289:5: ({...}? => ';' )
                        // cif.g:289:6: {...}? => ';'
                        {
                            if ( !(( GETCHARPOSITIONINLINE() > 0 )) )
                            {
                                if (BACKTRACKING>0)
                                {
                                    FAILEDFLAG = ANTLR3_TRUE;
                                    return ;
                                }
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                                    EXCEPTION->message      = (void *)" GETCHARPOSITIONINLINE() > 0 ";
                                    EXCEPTION->ruleName  = (void *)"UNQUOTED_STRING";


                            }
                            MATCHC(';');
                            if  (HASEXCEPTION())
                            {
                                goto ruleUNQUOTED_STRINGEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }


                    }
                    break;
                case 2:
                    // cif.g:290:7: ORDINARY_CHAR
                    {
                        /* 290:7: ORDINARY_CHAR */
                        mORDINARY_CHAR(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleUNQUOTED_STRINGEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;

            }
        }

        // cif.g:290:23: ( NON_BLANK_CHAR_ )*

        for (;;)
        {
            int alt22=2;
            switch ( LA(1) )
            {
            case '!':
            case '"':
            case '#':
            case '$':
            case '%':
            case '&':
            case '\'':
            case '(':
            case ')':
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '[':
            case '\\':
            case ']':
            case '^':
            case '_':
            case '`':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            case '{':
            case '|':
            case '}':
            case '~':
                {
                        alt22=1;
                }
                break;

            }

            switch (alt22)
            {
                case 1:
                    // cif.g:290:24: NON_BLANK_CHAR_
                    {
                        /* 290:24: NON_BLANK_CHAR_ */
                        mNON_BLANK_CHAR_(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleUNQUOTED_STRINGEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;

                default:
                    goto loop22;        /* break out of the loop */
                    break;
            }
        }
        loop22: ; /* Jump out to here if this rule does not match */


    }



    // This is where rules clean up and exit
    //
    goto ruleUNQUOTED_STRINGEx; /* Prevent compiler warnings */
    ruleUNQUOTED_STRINGEx: ;

}
// $ANTLR end UNQUOTED_STRING

//   Comes from: 294:2: ( SINGLE_QUOTE ( ( ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE ) | ANY_PRINT_CHAR | DOUBLE_QUOTE )* SINGLE_QUOTE )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SINGLE_QUOTED_STRING
 *
 * Looks to match the characters the constitute the token SINGLE_QUOTED_STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSINGLE_QUOTED_STRING(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:294:2: ( SINGLE_QUOTE ( ( ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE ) | ANY_PRINT_CHAR | DOUBLE_QUOTE )* SINGLE_QUOTE )
    // cif.g:294:4: SINGLE_QUOTE ( ( ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE ) | ANY_PRINT_CHAR | DOUBLE_QUOTE )* SINGLE_QUOTE
    {
        /* 294:4: SINGLE_QUOTE ( ( ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE ) | ANY_PRINT_CHAR | DOUBLE_QUOTE )* SINGLE_QUOTE */
        mSINGLE_QUOTE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSINGLE_QUOTED_STRINGEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // cif.g:295:3: ( ( ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE ) | ANY_PRINT_CHAR | DOUBLE_QUOTE )*

        for (;;)
        {
            int alt23=4;
            switch ( LA(1) )
            {
            case '\'':
                {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA23_1 = LA(2);
                            if ( (LA23_1 == '\'') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '!') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '%') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '&') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '(') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == ')') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '*') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '+') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == ',') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '-') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '.') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '/') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (((LA23_1 >= '0') && (LA23_1 <= '9'))) && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == ':') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '<') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '=') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '>') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '?') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '@') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (((LA23_1 >= 'A') && (LA23_1 <= 'Z'))) && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (((LA23_1 >= 'a') && (LA23_1 <= 'z'))) && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '\\') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '^') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '`') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '{') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '|') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '}') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '~') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '#') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '$') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '_') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '[') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == ']') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == ' ') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '\t') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == ';') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }
                            else if ( (LA23_1 == '"') && (synpred1_cif(ctx)))
                            {
                                alt23=1;
                            }

                        }
                }
                break;
            case '\t':
            case ' ':
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case '(':
            case ')':
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '[':
            case '\\':
            case ']':
            case '^':
            case '_':
            case '`':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            case '{':
            case '|':
            case '}':
            case '~':
                {
                        alt23=2;
                }
                break;
            case '"':
                {
                        alt23=3;
                }
                break;

            }

            switch (alt23)
            {
                case 1:
                    // cif.g:295:5: ( ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE )
                    {
                        // cif.g:295:5: ( ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE )
                        // cif.g:295:7: ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE
                        {
                            /* 295:7: ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE */
                            mSINGLE_QUOTE(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleSINGLE_QUOTED_STRINGEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }


                    }
                    break;
                case 2:
                    // cif.g:295:56: ANY_PRINT_CHAR
                    {
                        /* 295:56: ANY_PRINT_CHAR */
                        mANY_PRINT_CHAR(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleSINGLE_QUOTED_STRINGEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;
                case 3:
                    // cif.g:295:73: DOUBLE_QUOTE
                    {
                        /* 295:73: DOUBLE_QUOTE */
                        mDOUBLE_QUOTE(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleSINGLE_QUOTED_STRINGEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;

                default:
                    goto loop23;        /* break out of the loop */
                    break;
            }
        }
        loop23: ; /* Jump out to here if this rule does not match */

        /* 294:4: SINGLE_QUOTE ( ( ( SINGLE_QUOTE NON_BLANK_CHAR_ )=> SINGLE_QUOTE ) | ANY_PRINT_CHAR | DOUBLE_QUOTE )* SINGLE_QUOTE */
        mSINGLE_QUOTE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSINGLE_QUOTED_STRINGEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleSINGLE_QUOTED_STRINGEx; /* Prevent compiler warnings */
    ruleSINGLE_QUOTED_STRINGEx: ;

}
// $ANTLR end SINGLE_QUOTED_STRING

//   Comes from: 300:2: ( DOUBLE_QUOTE ( ( ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE ) | ANY_PRINT_CHAR | SINGLE_QUOTE )* DOUBLE_QUOTE )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOUBLE_QUOTED_STRING
 *
 * Looks to match the characters the constitute the token DOUBLE_QUOTED_STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOUBLE_QUOTED_STRING(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;


    // cif.g:300:2: ( DOUBLE_QUOTE ( ( ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE ) | ANY_PRINT_CHAR | SINGLE_QUOTE )* DOUBLE_QUOTE )
    // cif.g:300:4: DOUBLE_QUOTE ( ( ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE ) | ANY_PRINT_CHAR | SINGLE_QUOTE )* DOUBLE_QUOTE
    {
        /* 300:4: DOUBLE_QUOTE ( ( ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE ) | ANY_PRINT_CHAR | SINGLE_QUOTE )* DOUBLE_QUOTE */
        mDOUBLE_QUOTE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDOUBLE_QUOTED_STRINGEx;
        }
        if (HASFAILED())
        {
            return ;
        }

        // cif.g:301:3: ( ( ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE ) | ANY_PRINT_CHAR | SINGLE_QUOTE )*

        for (;;)
        {
            int alt24=4;
            switch ( LA(1) )
            {
            case '"':
                {
                        {
                           /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                            */
                            int LA24_1 = LA(2);
                            if ( (LA24_1 == '"') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '!') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '%') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '&') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '(') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == ')') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '*') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '+') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == ',') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '-') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '.') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '/') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (((LA24_1 >= '0') && (LA24_1 <= '9'))) && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == ':') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '<') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '=') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '>') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '?') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '@') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (((LA24_1 >= 'A') && (LA24_1 <= 'Z'))) && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (((LA24_1 >= 'a') && (LA24_1 <= 'z'))) && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '\\') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '^') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '`') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '{') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '|') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '}') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '~') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '#') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '$') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '_') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '[') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == ']') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == ' ') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '\t') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == ';') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }
                            else if ( (LA24_1 == '\'') && (synpred2_cif(ctx)))
                            {
                                alt24=1;
                            }

                        }
                }
                break;
            case '\t':
            case ' ':
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case '(':
            case ')':
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '[':
            case '\\':
            case ']':
            case '^':
            case '_':
            case '`':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            case '{':
            case '|':
            case '}':
            case '~':
                {
                        alt24=2;
                }
                break;
            case '\'':
                {
                        alt24=3;
                }
                break;

            }

            switch (alt24)
            {
                case 1:
                    // cif.g:301:5: ( ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE )
                    {
                        // cif.g:301:5: ( ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE )
                        // cif.g:301:7: ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE
                        {
                            /* 301:7: ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE */
                            mDOUBLE_QUOTE(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleDOUBLE_QUOTED_STRINGEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }


                    }
                    break;
                case 2:
                    // cif.g:301:56: ANY_PRINT_CHAR
                    {
                        /* 301:56: ANY_PRINT_CHAR */
                        mANY_PRINT_CHAR(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleDOUBLE_QUOTED_STRINGEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;
                case 3:
                    // cif.g:301:73: SINGLE_QUOTE
                    {
                        /* 301:73: SINGLE_QUOTE */
                        mSINGLE_QUOTE(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleDOUBLE_QUOTED_STRINGEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;

                default:
                    goto loop24;        /* break out of the loop */
                    break;
            }
        }
        loop24: ; /* Jump out to here if this rule does not match */

        /* 300:4: DOUBLE_QUOTE ( ( ( DOUBLE_QUOTE NON_BLANK_CHAR_ )=> DOUBLE_QUOTE ) | ANY_PRINT_CHAR | SINGLE_QUOTE )* DOUBLE_QUOTE */
        mDOUBLE_QUOTE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDOUBLE_QUOTED_STRINGEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleDOUBLE_QUOTED_STRINGEx; /* Prevent compiler warnings */
    ruleDOUBLE_QUOTED_STRINGEx: ;

}
// $ANTLR end DOUBLE_QUOTED_STRING

//   Comes from: 306:2: ( UNQUOTED_STRING | SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CHAR_STRING
 *
 * Looks to match the characters the constitute the token CHAR_STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCHAR_STRING(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = CHAR_STRING;


    {
        //  cif.g:306:2: ( UNQUOTED_STRING | SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING )

        ANTLR3_UINT32 alt25;

        alt25=3;


        {
            int LA25_0 = LA(1);
            if ( (LA25_0 == ';') && (( GETCHARPOSITIONINLINE() > 0 )))
            {
                alt25=1;
            }
            else if ( (LA25_0 == '!' || ((LA25_0 >= '%') && (LA25_0 <= '&')) || ((LA25_0 >= '(') && (LA25_0 <= ':')) || ((LA25_0 >= '<') && (LA25_0 <= 'Z')) || LA25_0 == '\\' || LA25_0 == '^' || ((LA25_0 >= '`') && (LA25_0 <= '~'))) )
            {
                alt25=1;
            }
            else if ( (LA25_0 == '\'') )
            {
                alt25=2;
            }
            else if ( (LA25_0 == '"') )
            {
                alt25=3;
            }
            else
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }

                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 25;
                EXCEPTION->state        = 0;


                goto ruleCHAR_STRINGEx;
            }
        }
        switch (alt25)
        {
        case 1:
            // cif.g:306:4: UNQUOTED_STRING
            {
                /* 306:4: UNQUOTED_STRING */
                mUNQUOTED_STRING(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleCHAR_STRINGEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 2:
            // cif.g:306:22: SINGLE_QUOTED_STRING
            {
                /* 306:22: SINGLE_QUOTED_STRING */
                mSINGLE_QUOTED_STRING(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleCHAR_STRINGEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 3:
            // cif.g:306:45: DOUBLE_QUOTED_STRING
            {
                /* 306:45: DOUBLE_QUOTED_STRING */
                mDOUBLE_QUOTED_STRING(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleCHAR_STRINGEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;

        }
    }
        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCHAR_STRINGEx; /* Prevent compiler warnings */
    ruleCHAR_STRINGEx: ;

}
// $ANTLR end CHAR_STRING

//   Comes from: 309:2: ( ({...}? => ';' ) ( ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* EOL ( ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL )* ) ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMI_COLON_TEXT_FIELD
 *
 * Looks to match the characters the constitute the token SEMI_COLON_TEXT_FIELD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMI_COLON_TEXT_FIELD(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = SEMI_COLON_TEXT_FIELD;


    // cif.g:309:2: ( ({...}? => ';' ) ( ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* EOL ( ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL )* ) ';' )
    // cif.g:309:4: ({...}? => ';' ) ( ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* EOL ( ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL )* ) ';'
    {
        // cif.g:309:4: ({...}? => ';' )
        // cif.g:309:6: {...}? => ';'
        {
            if ( !(( GETCHARPOSITIONINLINE() == 0 )) )
            {
                if (BACKTRACKING>0)
                {
                    FAILEDFLAG = ANTLR3_TRUE;
                    return ;
                }
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                    EXCEPTION->message      = (void *)" GETCHARPOSITIONINLINE() == 0 ";
                    EXCEPTION->ruleName  = (void *)"SEMI_COLON_TEXT_FIELD";


            }
            MATCHC(';');
            if  (HASEXCEPTION())
            {
                goto ruleSEMI_COLON_TEXT_FIELDEx;
            }
            if (HASFAILED())
            {
                return ;
            }

        }

        // cif.g:310:3: ( ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* EOL ( ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL )* )
        // cif.g:310:5: ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* EOL ( ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL )*
        {

            // cif.g:310:5: ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )*

            for (;;)
            {
                int alt26=4;
                switch ( LA(1) )
                {
                case '\t':
                case ' ':
                case '!':
                case '#':
                case '$':
                case '%':
                case '&':
                case '(':
                case ')':
                case '*':
                case '+':
                case ',':
                case '-':
                case '.':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                case 'I':
                case 'J':
                case 'K':
                case 'L':
                case 'M':
                case 'N':
                case 'O':
                case 'P':
                case 'Q':
                case 'R':
                case 'S':
                case 'T':
                case 'U':
                case 'V':
                case 'W':
                case 'X':
                case 'Y':
                case 'Z':
                case '[':
                case '\\':
                case ']':
                case '^':
                case '_':
                case '`':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                case '{':
                case '|':
                case '}':
                case '~':
                        {
                                alt26=1;
                        }
                    break;
                case '\'':
                        {
                                alt26=2;
                        }
                    break;
                case '"':
                        {
                                alt26=3;
                        }
                    break;

                }

                switch (alt26)
                {
                case 1:
                    // cif.g:310:7: ANY_PRINT_CHAR
                    {
                        /* 310:7: ANY_PRINT_CHAR */
                        mANY_PRINT_CHAR(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleSEMI_COLON_TEXT_FIELDEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;
                case 2:
                    // cif.g:310:24: SINGLE_QUOTE
                    {
                        /* 310:24: SINGLE_QUOTE */
                        mSINGLE_QUOTE(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleSEMI_COLON_TEXT_FIELDEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;
                case 3:
                    // cif.g:310:39: DOUBLE_QUOTE
                    {
                        /* 310:39: DOUBLE_QUOTE */
                        mDOUBLE_QUOTE(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleSEMI_COLON_TEXT_FIELDEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;

                default:
                    goto loop26;        /* break out of the loop */
                    break;
                }
            }
            loop26: ; /* Jump out to here if this rule does not match */

            /* 310:5: ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* EOL ( ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL )* */
            mEOL(ctx );
            if  (HASEXCEPTION())
            {
                goto ruleSEMI_COLON_TEXT_FIELDEx;
            }
            if (HASFAILED())
            {
                return ;
            }

            // cif.g:311:3: ( ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL )*

            for (;;)
            {
                int alt29=2;
                switch ( LA(1) )
                {
                case '\t':
                case '\n':
                case '\r':
                case ' ':
                case '!':
                case '"':
                case '#':
                case '$':
                case '%':
                case '&':
                case '\'':
                case '(':
                case ')':
                case '*':
                case '+':
                case ',':
                case '-':
                case '.':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'G':
                case 'H':
                case 'I':
                case 'J':
                case 'K':
                case 'L':
                case 'M':
                case 'N':
                case 'O':
                case 'P':
                case 'Q':
                case 'R':
                case 'S':
                case 'T':
                case 'U':
                case 'V':
                case 'W':
                case 'X':
                case 'Y':
                case 'Z':
                case '[':
                case '\\':
                case ']':
                case '^':
                case '_':
                case '`':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                case '{':
                case '|':
                case '}':
                case '~':
                        {
                                alt29=1;
                        }
                    break;

                }

                switch (alt29)
                {
                case 1:
                    // cif.g:311:5: ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL
                    {

                        // cif.g:311:5: ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )?
                        {
                            int alt28=2;
                            switch ( LA(1) )
                            {
                                case '\t':
                                case ' ':
                                case '!':
                                case '"':
                                case '#':
                                case '$':
                                case '%':
                                case '&':
                                case '\'':
                                case '(':
                                case ')':
                                case '*':
                                case '+':
                                case ',':
                                case '-':
                                case '.':
                                case '/':
                                case '0':
                                case '1':
                                case '2':
                                case '3':
                                case '4':
                                case '5':
                                case '6':
                                case '7':
                                case '8':
                                case '9':
                                case ':':
                                case '<':
                                case '=':
                                case '>':
                                case '?':
                                case '@':
                                case 'A':
                                case 'B':
                                case 'C':
                                case 'D':
                                case 'E':
                                case 'F':
                                case 'G':
                                case 'H':
                                case 'I':
                                case 'J':
                                case 'K':
                                case 'L':
                                case 'M':
                                case 'N':
                                case 'O':
                                case 'P':
                                case 'Q':
                                case 'R':
                                case 'S':
                                case 'T':
                                case 'U':
                                case 'V':
                                case 'W':
                                case 'X':
                                case 'Y':
                                case 'Z':
                                case '[':
                                case '\\':
                                case ']':
                                case '^':
                                case '_':
                                case '`':
                                case 'a':
                                case 'b':
                                case 'c':
                                case 'd':
                                case 'e':
                                case 'f':
                                case 'g':
                                case 'h':
                                case 'i':
                                case 'j':
                                case 'k':
                                case 'l':
                                case 'm':
                                case 'n':
                                case 'o':
                                case 'p':
                                case 'q':
                                case 'r':
                                case 's':
                                case 't':
                                case 'u':
                                case 'v':
                                case 'w':
                                case 'x':
                                case 'y':
                                case 'z':
                                case '{':
                                case '|':
                                case '}':
                                case '~':
                                        {
                                                alt28=1;
                                        }
                                    break;
                            }

                            switch (alt28)
                            {
                                case 1:
                                    // cif.g:311:6: TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )*
                                    {
                                        /* 311:6: TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* */
                                        mTEXT_LEAD_CHAR(ctx );
                                        if  (HASEXCEPTION())
                                        {
                                            goto ruleSEMI_COLON_TEXT_FIELDEx;
                                        }
                                        if (HASFAILED())
                                        {
                                            return ;
                                        }

                                        // cif.g:311:21: ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )*

                                        for (;;)
                                        {
                                            int alt27=4;
                                            switch ( LA(1) )
                                            {
                                            case '\t':
                                            case ' ':
                                            case '!':
                                            case '#':
                                            case '$':
                                            case '%':
                                            case '&':
                                            case '(':
                                            case ')':
                                            case '*':
                                            case '+':
                                            case ',':
                                            case '-':
                                            case '.':
                                            case '/':
                                            case '0':
                                            case '1':
                                            case '2':
                                            case '3':
                                            case '4':
                                            case '5':
                                            case '6':
                                            case '7':
                                            case '8':
                                            case '9':
                                            case ':':
                                            case ';':
                                            case '<':
                                            case '=':
                                            case '>':
                                            case '?':
                                            case '@':
                                            case 'A':
                                            case 'B':
                                            case 'C':
                                            case 'D':
                                            case 'E':
                                            case 'F':
                                            case 'G':
                                            case 'H':
                                            case 'I':
                                            case 'J':
                                            case 'K':
                                            case 'L':
                                            case 'M':
                                            case 'N':
                                            case 'O':
                                            case 'P':
                                            case 'Q':
                                            case 'R':
                                            case 'S':
                                            case 'T':
                                            case 'U':
                                            case 'V':
                                            case 'W':
                                            case 'X':
                                            case 'Y':
                                            case 'Z':
                                            case '[':
                                            case '\\':
                                            case ']':
                                            case '^':
                                            case '_':
                                            case '`':
                                            case 'a':
                                            case 'b':
                                            case 'c':
                                            case 'd':
                                            case 'e':
                                            case 'f':
                                            case 'g':
                                            case 'h':
                                            case 'i':
                                            case 'j':
                                            case 'k':
                                            case 'l':
                                            case 'm':
                                            case 'n':
                                            case 'o':
                                            case 'p':
                                            case 'q':
                                            case 'r':
                                            case 's':
                                            case 't':
                                            case 'u':
                                            case 'v':
                                            case 'w':
                                            case 'x':
                                            case 'y':
                                            case 'z':
                                            case '{':
                                            case '|':
                                            case '}':
                                            case '~':
                                                {
                                                        alt27=1;
                                                }
                                                break;
                                            case '\'':
                                                {
                                                        alt27=2;
                                                }
                                                break;
                                            case '"':
                                                {
                                                        alt27=3;
                                                }
                                                break;

                                            }

                                            switch (alt27)
                                            {
                                                case 1:
                                                    // cif.g:311:23: ANY_PRINT_CHAR
                                                    {
                                                        /* 311:23: ANY_PRINT_CHAR */
                                                        mANY_PRINT_CHAR(ctx );
                                                        if  (HASEXCEPTION())
                                                        {
                                                            goto ruleSEMI_COLON_TEXT_FIELDEx;
                                                        }
                                                        if (HASFAILED())
                                                        {
                                                            return ;
                                                        }

                                                    }
                                                    break;
                                                case 2:
                                                    // cif.g:311:40: SINGLE_QUOTE
                                                    {
                                                        /* 311:40: SINGLE_QUOTE */
                                                        mSINGLE_QUOTE(ctx );
                                                        if  (HASEXCEPTION())
                                                        {
                                                            goto ruleSEMI_COLON_TEXT_FIELDEx;
                                                        }
                                                        if (HASFAILED())
                                                        {
                                                            return ;
                                                        }

                                                    }
                                                    break;
                                                case 3:
                                                    // cif.g:311:55: DOUBLE_QUOTE
                                                    {
                                                        /* 311:55: DOUBLE_QUOTE */
                                                        mDOUBLE_QUOTE(ctx );
                                                        if  (HASEXCEPTION())
                                                        {
                                                            goto ruleSEMI_COLON_TEXT_FIELDEx;
                                                        }
                                                        if (HASFAILED())
                                                        {
                                                            return ;
                                                        }

                                                    }
                                                    break;

                                                default:
                                                    goto loop27;        /* break out of the loop */
                                                    break;
                                            }
                                        }
                                        loop27: ; /* Jump out to here if this rule does not match */


                                    }
                                    break;

                            }
                        }
                        /* 311:5: ( TEXT_LEAD_CHAR ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* )? EOL */
                        mEOL(ctx );
                        if  (HASEXCEPTION())
                        {
                            goto ruleSEMI_COLON_TEXT_FIELDEx;
                        }
                        if (HASFAILED())
                        {
                            return ;
                        }

                    }
                    break;

                default:
                    goto loop29;        /* break out of the loop */
                    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


        }

        MATCHC(';');
        if  (HASEXCEPTION())
        {
            goto ruleSEMI_COLON_TEXT_FIELDEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSEMI_COLON_TEXT_FIELDEx; /* Prevent compiler warnings */
    ruleSEMI_COLON_TEXT_FIELDEx: ;

}
// $ANTLR end SEMI_COLON_TEXT_FIELD

//   Comes from: 320:2: ( ( ( '#' ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* ( EOL | {...}?) )+ ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENTS
 *
 * Looks to match the characters the constitute the token COMMENTS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENTS(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = COMMENTS;


    // cif.g:320:2: ( ( ( '#' ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* ( EOL | {...}?) )+ ) )
    // cif.g:320:4: ( ( '#' ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* ( EOL | {...}?) )+ )
    {
        // cif.g:320:4: ( ( '#' ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* ( EOL | {...}?) )+ )
        // cif.g:320:6: ( '#' ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* ( EOL | {...}?) )+
        {
            // cif.g:320:6: ( '#' ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* ( EOL | {...}?) )+
            {
                int cnt32=0;

                for (;;)
                {
                    int alt32=2;
                switch ( LA(1) )
                {
                case '#':
                        {
                                alt32=1;
                        }
                    break;

                }

                switch (alt32)
                {
                    case 1:
                        // cif.g:320:8: '#' ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )* ( EOL | {...}?)
                        {
                            MATCHC('#');
                            if  (HASEXCEPTION())
                            {
                                goto ruleCOMMENTSEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                            // cif.g:320:12: ( ANY_PRINT_CHAR | SINGLE_QUOTE | DOUBLE_QUOTE )*

                            for (;;)
                            {
                                int alt30=4;
                                switch ( LA(1) )
                                {
                                case '#':
                                        {
                                                {
                                                   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                                    */
                                                    int LA30_2 = LA(2);
                                                    if ( (!( (( LA(1) == EOF )) )) )
                                                    {
                                                        alt30=1;
                                                    }

                                                }
                                        }
                                    break;
                                case '\t':
                                case ' ':
                                case '!':
                                case '$':
                                case '%':
                                case '&':
                                case '(':
                                case ')':
                                case '*':
                                case '+':
                                case ',':
                                case '-':
                                case '.':
                                case '/':
                                case '0':
                                case '1':
                                case '2':
                                case '3':
                                case '4':
                                case '5':
                                case '6':
                                case '7':
                                case '8':
                                case '9':
                                case ':':
                                case ';':
                                case '<':
                                case '=':
                                case '>':
                                case '?':
                                case '@':
                                case 'A':
                                case 'B':
                                case 'C':
                                case 'D':
                                case 'E':
                                case 'F':
                                case 'G':
                                case 'H':
                                case 'I':
                                case 'J':
                                case 'K':
                                case 'L':
                                case 'M':
                                case 'N':
                                case 'O':
                                case 'P':
                                case 'Q':
                                case 'R':
                                case 'S':
                                case 'T':
                                case 'U':
                                case 'V':
                                case 'W':
                                case 'X':
                                case 'Y':
                                case 'Z':
                                case '[':
                                case '\\':
                                case ']':
                                case '^':
                                case '_':
                                case '`':
                                case 'a':
                                case 'b':
                                case 'c':
                                case 'd':
                                case 'e':
                                case 'f':
                                case 'g':
                                case 'h':
                                case 'i':
                                case 'j':
                                case 'k':
                                case 'l':
                                case 'm':
                                case 'n':
                                case 'o':
                                case 'p':
                                case 'q':
                                case 'r':
                                case 's':
                                case 't':
                                case 'u':
                                case 'v':
                                case 'w':
                                case 'x':
                                case 'y':
                                case 'z':
                                case '{':
                                case '|':
                                case '}':
                                case '~':
                                        {
                                                alt30=1;
                                        }
                                    break;
                                case '\'':
                                        {
                                                alt30=2;
                                        }
                                    break;
                                case '"':
                                        {
                                                alt30=3;
                                        }
                                    break;

                                }

                                switch (alt30)
                                {
                                case 1:
                                    // cif.g:320:13: ANY_PRINT_CHAR
                                    {
                                        /* 320:13: ANY_PRINT_CHAR */
                                        mANY_PRINT_CHAR(ctx );
                                        if  (HASEXCEPTION())
                                        {
                                            goto ruleCOMMENTSEx;
                                        }
                                        if (HASFAILED())
                                        {
                                            return ;
                                        }

                                    }
                                    break;
                                case 2:
                                    // cif.g:320:30: SINGLE_QUOTE
                                    {
                                        /* 320:30: SINGLE_QUOTE */
                                        mSINGLE_QUOTE(ctx );
                                        if  (HASEXCEPTION())
                                        {
                                            goto ruleCOMMENTSEx;
                                        }
                                        if (HASFAILED())
                                        {
                                            return ;
                                        }

                                    }
                                    break;
                                case 3:
                                    // cif.g:320:45: DOUBLE_QUOTE
                                    {
                                        /* 320:45: DOUBLE_QUOTE */
                                        mDOUBLE_QUOTE(ctx );
                                        if  (HASEXCEPTION())
                                        {
                                            goto ruleCOMMENTSEx;
                                        }
                                        if (HASFAILED())
                                        {
                                            return ;
                                        }

                                    }
                                    break;

                                default:
                                    goto loop30;        /* break out of the loop */
                                    break;
                                }
                            }
                            loop30: ; /* Jump out to here if this rule does not match */


                            // cif.g:321:7: ( EOL | {...}?)
                            {
                                int alt31=2;
                                switch ( LA(1) )
                                {
                                case '\n':
                                case '\r':
                                        {
                                                alt31=1;
                                        }
                                    break;

                                default:
                                    alt31=2;}

                                switch (alt31)
                                {
                                case 1:
                                    // cif.g:321:9: EOL
                                    {
                                        /* 321:9: EOL */
                                        mEOL(ctx );
                                        if  (HASEXCEPTION())
                                        {
                                            goto ruleCOMMENTSEx;
                                        }
                                        if (HASFAILED())
                                        {
                                            return ;
                                        }

                                    }
                                    break;
                                case 2:
                                    // cif.g:321:15: {...}?
                                    {
                                        if ( !(( LA(1) == EOF )) )
                                        {
                                            if (BACKTRACKING>0)
                                            {
                                                FAILEDFLAG = ANTLR3_TRUE;
                                                return ;
                                            }
                                                CONSTRUCTEX();
                                                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                                                EXCEPTION->message      = (void *)" LA(1) == EOF ";
                                                EXCEPTION->ruleName      = (void *)"COMMENTS";


                                        }

                                    }
                                    break;

                                }
                            }

                        }
                        break;

                    default:

                        if ( cnt32 >= 1 )
                        {
                            goto loop32;
                        }
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleCOMMENTSEx;
                }
                cnt32++;
                }
                loop32: ;       /* Jump to here if this rule does not match */
            }

        }

        if ( BACKTRACKING==0 )
        {
             LEXSTATE->channel = HIDDEN;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMENTSEx; /* Prevent compiler warnings */
    ruleCOMMENTSEx: ;

}
// $ANTLR end COMMENTS

//   Comes from: 334:2: ( NON_BLANK_CHAR_ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NON_BLANK_CHAR
 *
 * Looks to match the characters the constitute the token NON_BLANK_CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNON_BLANK_CHAR(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = NON_BLANK_CHAR;


    // cif.g:334:2: ( NON_BLANK_CHAR_ )
    // cif.g:334:4: NON_BLANK_CHAR_
    {
        /* 334:4: NON_BLANK_CHAR_ */
        mNON_BLANK_CHAR_(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleNON_BLANK_CHAREx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNON_BLANK_CHAREx; /* Prevent compiler warnings */
    ruleNON_BLANK_CHAREx: ;

}
// $ANTLR end NON_BLANK_CHAR

//   Comes from: 337:2: ( ( '\\t' | ' ' | EOL | '\\u000C' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHITESPACE
 *
 * Looks to match the characters the constitute the token WHITESPACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWHITESPACE(pcifLexer ctx)
{
        ANTLR3_UINT32   _type;

    _type           = WHITESPACE;


    // cif.g:337:2: ( ( '\\t' | ' ' | EOL | '\\u000C' )+ )
    // cif.g:337:5: ( '\\t' | ' ' | EOL | '\\u000C' )+
    {
        // cif.g:337:5: ( '\\t' | ' ' | EOL | '\\u000C' )+
        {
            int cnt33=0;

            for (;;)
            {
                int alt33=5;
                switch ( LA(1) )
                {
                case '\t':
                        {
                                alt33=1;
                        }
                    break;
                case ' ':
                        {
                                alt33=2;
                        }
                    break;
                case '\n':
                case '\r':
                        {
                                alt33=3;
                        }
                    break;
                case '\f':
                        {
                                alt33=4;
                        }
                    break;

                }

                switch (alt33)
                {
                    case 1:
                        // cif.g:337:7: '\\t'
                        {
                            MATCHC('\t');
                            if  (HASEXCEPTION())
                            {
                                goto ruleWHITESPACEEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;
                    case 2:
                        // cif.g:337:14: ' '
                        {
                            MATCHC(' ');
                            if  (HASEXCEPTION())
                            {
                                goto ruleWHITESPACEEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;
                    case 3:
                        // cif.g:337:20: EOL
                        {
                            /* 337:20: EOL */
                            mEOL(ctx );
                            if  (HASEXCEPTION())
                            {
                                goto ruleWHITESPACEEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;
                    case 4:
                        // cif.g:337:26: '\\u000C'
                        {
                            MATCHC(0x000C);
                            if  (HASEXCEPTION())
                            {
                                goto ruleWHITESPACEEx;
                            }
                            if (HASFAILED())
                            {
                                return ;
                            }

                        }
                        break;

                    default:

                        if ( cnt33 >= 1 )
                        {
                            goto loop33;
                        }
                        if (BACKTRACKING>0)
                        {
                            FAILEDFLAG = ANTLR3_TRUE;
                            return ;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleWHITESPACEEx;
                }
                cnt33++;
            }
            loop33: ;   /* Jump to here if this rule does not match */
        }

    }

        LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWHITESPACEEx; /* Prevent compiler warnings */
    ruleWHITESPACEEx: ;

}
// $ANTLR end WHITESPACE

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void
mTokens(pcifLexer ctx)
{
    {
        //  cif.g:1:8: ( T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | TAG | LOOP_ | GLOBAL_ | STOP_ | DATA_BLOCK_HEADING | SAVE_FRAME_HEADING | SAVE | FLOAT | UNSIGNED_INTEGER | CHAR_STRING | SEMI_COLON_TEXT_FIELD | COMMENTS | NON_BLANK_CHAR | WHITESPACE )

        ANTLR3_UINT32 alt34;

        alt34=21;

        alt34 = cdfa34.predict(ctx, RECOGNIZER, ISTREAM, &cdfa34);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        switch (alt34)
        {
        case 1:
            // cif.g:1:10: T__33
            {
                /* 1:10: T__33 */
                mT__33(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 2:
            // cif.g:1:16: T__34
            {
                /* 1:16: T__34 */
                mT__34(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 3:
            // cif.g:1:22: T__35
            {
                /* 1:22: T__35 */
                mT__35(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 4:
            // cif.g:1:28: T__36
            {
                /* 1:28: T__36 */
                mT__36(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 5:
            // cif.g:1:34: T__37
            {
                /* 1:34: T__37 */
                mT__37(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 6:
            // cif.g:1:40: T__38
            {
                /* 1:40: T__38 */
                mT__38(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 7:
            // cif.g:1:46: T__39
            {
                /* 1:46: T__39 */
                mT__39(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 8:
            // cif.g:1:52: TAG
            {
                /* 1:52: TAG */
                mTAG(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 9:
            // cif.g:1:56: LOOP_
            {
                /* 1:56: LOOP_ */
                mLOOP_(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 10:
            // cif.g:1:62: GLOBAL_
            {
                /* 1:62: GLOBAL_ */
                mGLOBAL_(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 11:
            // cif.g:1:70: STOP_
            {
                /* 1:70: STOP_ */
                mSTOP_(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 12:
            // cif.g:1:76: DATA_BLOCK_HEADING
            {
                /* 1:76: DATA_BLOCK_HEADING */
                mDATA_BLOCK_HEADING(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 13:
            // cif.g:1:95: SAVE_FRAME_HEADING
            {
                /* 1:95: SAVE_FRAME_HEADING */
                mSAVE_FRAME_HEADING(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 14:
            // cif.g:1:114: SAVE
            {
                /* 1:114: SAVE */
                mSAVE(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 15:
            // cif.g:1:119: FLOAT
            {
                /* 1:119: FLOAT */
                mFLOAT(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 16:
            // cif.g:1:125: UNSIGNED_INTEGER
            {
                /* 1:125: UNSIGNED_INTEGER */
                mUNSIGNED_INTEGER(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 17:
            // cif.g:1:142: CHAR_STRING
            {
                /* 1:142: CHAR_STRING */
                mCHAR_STRING(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 18:
            // cif.g:1:154: SEMI_COLON_TEXT_FIELD
            {
                /* 1:154: SEMI_COLON_TEXT_FIELD */
                mSEMI_COLON_TEXT_FIELD(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 19:
            // cif.g:1:176: COMMENTS
            {
                /* 1:176: COMMENTS */
                mCOMMENTS(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 20:
            // cif.g:1:185: NON_BLANK_CHAR
            {
                /* 1:185: NON_BLANK_CHAR */
                mNON_BLANK_CHAR(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;
        case 21:
            // cif.g:1:200: WHITESPACE
            {
                /* 1:200: WHITESPACE */
                mWHITESPACE(ctx );
                if  (HASEXCEPTION())
                {
                    goto ruleTokensEx;
                }
                if (HASFAILED())
                {
                    return ;
                }

            }
            break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

// $ANTLR start synpred1_cif
static void synpred1_cif_fragment(pcifLexer ctx )
{
    // cif.g:295:7: ( SINGLE_QUOTE NON_BLANK_CHAR_ )
    // cif.g:295:8: SINGLE_QUOTE NON_BLANK_CHAR_
    {
        /* 295:8: SINGLE_QUOTE NON_BLANK_CHAR_ */
        mSINGLE_QUOTE(ctx );
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_cifEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        /* 295:8: SINGLE_QUOTE NON_BLANK_CHAR_ */
        mNON_BLANK_CHAR_(ctx );
        if  (HASEXCEPTION())
        {
            goto rulesynpred1_cifEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred1_cifEx; /* Prevent compiler warnings */
rulesynpred1_cifEx: ;

}
// $ANTLR end synpred1_cif

// $ANTLR start synpred2_cif
static void synpred2_cif_fragment(pcifLexer ctx )
{
    // cif.g:301:7: ( DOUBLE_QUOTE NON_BLANK_CHAR_ )
    // cif.g:301:8: DOUBLE_QUOTE NON_BLANK_CHAR_
    {
        /* 301:8: DOUBLE_QUOTE NON_BLANK_CHAR_ */
        mDOUBLE_QUOTE(ctx );
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_cifEx;
        }
        if (HASFAILED())
        {
            return ;
        }
        /* 301:8: DOUBLE_QUOTE NON_BLANK_CHAR_ */
        mNON_BLANK_CHAR_(ctx );
        if  (HASEXCEPTION())
        {
            goto rulesynpred2_cifEx;
        }
        if (HASFAILED())
        {
            return ;
        }

    }

// This is where rules clean up and exit
//
goto rulesynpred2_cifEx; /* Prevent compiler warnings */
rulesynpred2_cifEx: ;

}
// $ANTLR end synpred2_cif

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */

/* =========================================================================
 * Lexer syntactic predicates
 */
static ANTLR3_BOOLEAN synpred1_cif(pcifLexer ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start       = MARK();
    synpred1_cif_fragment(ctx);     // can never throw exception
    success     = !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG  = ANTLR3_FALSE;
    return success;
}
static ANTLR3_BOOLEAN synpred2_cif(pcifLexer ctx)
{
    ANTLR3_MARKER   start;
    ANTLR3_BOOLEAN  success;

    BACKTRACKING++;
    start       = MARK();
    synpred2_cif_fragment(ctx);     // can never throw exception
    success     = !(FAILEDFLAG);
    REWIND(start);
    BACKTRACKING--;
    FAILEDFLAG  = ANTLR3_FALSE;
    return success;
}

/* =========================================================================
 * Lexer syntactic predicates end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */


/* End of code
 * =============================================================================
 */
