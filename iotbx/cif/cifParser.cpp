/** \file
 *  This C source file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : cif.g
 *     -                            On : 2011-06-20 16:54:03
 *     -                for the parser : cifParserParser *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "cifParser.h"
/* ----------------------------------------- */

/** CIF Version 1.1 Working specification grammar

Translated from the grammar defined at

http://www.iucr.org/resources/cif/spec/version1.1/cifsyntax#bnf

A compiled version of the parser, with C language target, but contains
C++ code in the actions, therefore the output files must be renamed to *.cpp

Richard Gildea
April 2010
*/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define         CTX     ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef  SCOPE_TYPE
#undef  SCOPE_STACK
#undef  SCOPE_TOP
#define SCOPE_TYPE(scope)   pcifParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pcifParser_##scope##Stack
#define SCOPE_TOP(scope)    ctx->pcifParser_##scope##Top
#define SCOPE_SIZE(scope)               ctx->pcifParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)        (ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef      PARSER
#undef      RECOGNIZER
#undef      HAVEPARSEDRULE
#undef          MEMOIZE
#undef      INPUT
#undef      STRSTREAM
#undef      HASEXCEPTION
#undef      EXCEPTION
#undef      MATCHT
#undef      MATCHANYT
#undef      FOLLOWSTACK
#undef      FOLLOWPUSH
#undef      FOLLOWPOP
#undef      PRECOVER
#undef      PREPORTERROR
#undef      LA
#undef      LT
#undef      CONSTRUCTEX
#undef      CONSUME
#undef      MARK
#undef      REWIND
#undef      REWINDLAST
#undef      PERRORRECOVERY
#undef      HASFAILED
#undef      FAILEDFLAG
#undef      RECOVERFROMMISMATCHEDSET
#undef      RECOVERFROMMISMATCHEDELEMENT
#undef          INDEX
#undef      ADAPTOR
#undef          SEEK
#undef      RULEMEMO
#undef          DBG

#define     PARSER                                                      ctx->pParser
#define     RECOGNIZER                                          PARSER->rec
#define         PSRSTATE                                                RECOGNIZER->state
#define     HAVEPARSEDRULE(r)                           RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define         MEMOIZE(ri,si)                                  RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define     INPUT                                                       PARSER->tstream
#define     STRSTREAM                                           INPUT
#define         ISTREAM                                                 INPUT->istream
#define         INDEX()                                                 ISTREAM->index(INPUT->istream)
#define     HASEXCEPTION()                                      (PSRSTATE->error == ANTLR3_TRUE)
#define     EXCEPTION                                           PSRSTATE->exception
#define     MATCHT(t, fs)                                       RECOGNIZER->match(RECOGNIZER, t, fs)
#define     MATCHANYT()                                         RECOGNIZER->matchAny(RECOGNIZER)
#define     FOLLOWSTACK                                     PSRSTATE->following
#define     FOLLOWPUSH(x)                                       FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define     FOLLOWPOP()                                         FOLLOWSTACK->pop(FOLLOWSTACK)
#define     PRECOVER()                                          RECOGNIZER->recover(RECOGNIZER)
#define     PREPORTERROR()                                      RECOGNIZER->reportError(RECOGNIZER)
#define     LA(n)                                                       INPUT->istream->_LA(ISTREAM, n)
#define     LT(n)                                                       INPUT->_LT(INPUT, n)
#define     CONSTRUCTEX()                                       RECOGNIZER->exConstruct(RECOGNIZER)
#define     CONSUME()                                           ISTREAM->consume(ISTREAM)
#define     MARK()                                                      ISTREAM->mark(ISTREAM)
#define     REWIND(m)                                           ISTREAM->rewind(ISTREAM, m)
#define     REWINDLAST()                                        ISTREAM->rewindLast(ISTREAM)
#define         SEEK(n)                                                 ISTREAM->seek(ISTREAM, n)
#define     PERRORRECOVERY                                      PSRSTATE->errorRecovery
#define     FAILEDFLAG                                          PSRSTATE->failed
#define     HASFAILED()                                         (FAILEDFLAG == ANTLR3_TRUE)
#define     BACKTRACKING                                        PSRSTATE->backtracking
#define     RECOVERFROMMISMATCHEDSET(s)         RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define     RECOVERFROMMISMATCHEDELEMENT(e)     RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define         RULEMEMO                                                PSRSTATE->ruleMemo
#define         DBG                                                             RECOGNIZER->debugger

#define         TOKTEXT(tok, txt)                               tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define     UP      ANTLR3_TOKEN_UP
#define     DOWN    ANTLR3_TOKEN_DOWN
#define     EOR     ANTLR3_TOKEN_EOR
#define     INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a cifParser_parse scope set
 */
static pcifParser_parse_SCOPE   pcifParser_parsePush(pcifParser ctx);
static void ANTLR3_CDECL parseFree(pcifParser_parse_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL parseFree(pcifParser_parse_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a cifParser parse scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code:
 * \code
 *   ctx->pcifParser_parseTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as:
 * \code
 *   void ANTLR3_CDECL myfunc( pcifParser_parse_SCOPE ptr).
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 *
 */
static pcifParser_parse_SCOPE
pcifParser_parsePush(pcifParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pcifParser_parse_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pcifParser_parseStack->size(ctx->pcifParser_parseStack) > ctx->pcifParser_parseStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pcifParser_parse_SCOPE)ctx->pcifParser_parseStack->get(ctx->pcifParser_parseStack, ctx->pcifParser_parseStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pcifParser_parse_SCOPE) ANTLR3_MALLOC(sizeof(cifParser_parse_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pcifParser_parseStack->push(ctx->pcifParser_parseStack, newAttributes, (void (*)(void *))parseFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pcifParser_parseStack_limit++;

        /* Return value is the pointer to the new entry, which may be used locally
         * without de-referencing via the context.
     */
    return  newAttributes;
}

/* ruleAttributeScopeFuncDecl(scope)
 */
/* -----------------------------------------------------------------------------
 * Function declarations for creating a cifParser_data_items scope set
 */
static pcifParser_data_items_SCOPE   pcifParser_data_itemsPush(pcifParser ctx);
static void ANTLR3_CDECL data_itemsFree(pcifParser_data_items_SCOPE scope);
/* ----------------------------------------------------------------------------- */

/* ruleAttributeScopeFuncs(scope)
 */
/* attributeFuncs(scope)
 */

static void ANTLR3_CDECL data_itemsFree(pcifParser_data_items_SCOPE scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Allocate initial memory for a cifParser data_items scope variable stack entry and
 *         add it to the top of the stack.
 *
 * \remark
 * By default the structure is freed with ANTLR_FREE(), but you can use the
 * the \@init action to install a pointer to a custom free() routine by
 * adding the code:
 * \code
 *   ctx->pcifParser_data_itemsTop->free = myroutine;
 * \endcode
 *
 * With lots of comments of course! The routine should be declared in
 * \@members { } as:
 * \code
 *   void ANTLR3_CDECL myfunc( pcifParser_data_items_SCOPE ptr).
 * \endcode
 *
 * It should perform any custom freeing stuff that you need (call ANTLR_FREE3, not free()
 * NB: It should not free the pointer it is given, which is the scope stack entry itself
 * and will be freed by the function that calls your custom free routine.
 *
 */
static pcifParser_data_items_SCOPE
pcifParser_data_itemsPush(pcifParser ctx)
{
    /* Pointer used to create a new set of attributes
     */
    pcifParser_data_items_SCOPE      newAttributes;

    /* Allocate the memory for a new structure if we need one.
     */
    if (ctx->pcifParser_data_itemsStack->size(ctx->pcifParser_data_itemsStack) > ctx->pcifParser_data_itemsStack_limit)
    {
        // The current limit value was less than the number of scopes available on the stack so
        // we can just reuse one. Our limit tracks the stack count, so the index of the entry we want
        // is one less than that, or conveniently, the current value of limit.
        //
        newAttributes = (pcifParser_data_items_SCOPE)ctx->pcifParser_data_itemsStack->get(ctx->pcifParser_data_itemsStack, ctx->pcifParser_data_itemsStack_limit);
    }
    else
    {
        // Need a new allocation
        //
        newAttributes = (pcifParser_data_items_SCOPE) ANTLR3_MALLOC(sizeof(cifParser_data_items_SCOPE));
        if  (newAttributes != NULL)
        {
            /* Standard ANTLR3 library implementation
             */
            ctx->pcifParser_data_itemsStack->push(ctx->pcifParser_data_itemsStack, newAttributes, (void (*)(void *))data_itemsFree);
        }
    }

    // Blank out any previous free pointer, the user might or might install a new one.
    //
    newAttributes->free = NULL;

    // Indicate the position in the available stack that the current level is at
    //
    ctx->pcifParser_data_itemsStack_limit++;

        /* Return value is the pointer to the new entry, which may be used locally
         * without de-referencing via the context.
     */
    return  newAttributes;
}




/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   cifParserTokenNames[35+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "COMMENTS",
        (pANTLR3_UINT8) "WHITESPACE",
        (pANTLR3_UINT8) "SAVE_FRAME_HEADING",
        (pANTLR3_UINT8) "SAVE",
        (pANTLR3_UINT8) "TAG",
        (pANTLR3_UINT8) "DATA_BLOCK_HEADING",
        (pANTLR3_UINT8) "GLOBAL_",
        (pANTLR3_UINT8) "LOOP_",
        (pANTLR3_UINT8) "NUMERIC",
        (pANTLR3_UINT8) "CHAR_STRING",
        (pANTLR3_UINT8) "SEMI_COLON_TEXT_FIELD",
        (pANTLR3_UINT8) "EOL",
        (pANTLR3_UINT8) "DOUBLE_QUOTE",
        (pANTLR3_UINT8) "SINGLE_QUOTE",
        (pANTLR3_UINT8) "ORDINARY_CHAR",
        (pANTLR3_UINT8) "NON_BLANK_CHAR_",
        (pANTLR3_UINT8) "TEXT_LEAD_CHAR",
        (pANTLR3_UINT8) "ANY_PRINT_CHAR",
        (pANTLR3_UINT8) "DATA_",
        (pANTLR3_UINT8) "SAVE_",
        (pANTLR3_UINT8) "STOP_",
        (pANTLR3_UINT8) "NON_BLANK_CHAR",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "INTEGER",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "UNSIGNED_INTEGER",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "UNQUOTED_STRING",
        (pANTLR3_UINT8) "SINGLE_QUOTED_STRING",
        (pANTLR3_UINT8) "DOUBLE_QUOTED_STRING",
        (pANTLR3_UINT8) "'\\u001a'",
        (pANTLR3_UINT8) "'.'",
        (pANTLR3_UINT8) "'?'",
        (pANTLR3_UINT8) "'-'"
       };


/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pcifParser_parseStack
 */
void
pcifParser_parsePop(pcifParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
        // If the user supplied the scope entries with a free function,then call it first
        //
    if  (SCOPE_TOP(parse)->free != NULL)
        {
        SCOPE_TOP(parse)->free(SCOPE_TOP(parse));
        }

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pcifParser_parseStack_limit--;
    SCOPE_TOP(parse) = (pcifParser_parse_SCOPE)(ctx->pcifParser_parseStack->get(ctx->pcifParser_parseStack, ctx->pcifParser_parseStack_limit - 1));
}
/* ruleAttributeScopeFuncMacro(scope)
 */
/** Function for popping the top value from a pcifParser_data_itemsStack
 */
void
pcifParser_data_itemsPop(pcifParser ctx)
{
    // First see if the user defined a function they want to be called when a
    // scope is popped/freed.
    //
        // If the user supplied the scope entries with a free function,then call it first
        //
    if  (SCOPE_TOP(data_items)->free != NULL)
        {
        SCOPE_TOP(data_items)->free(SCOPE_TOP(data_items));
        }

    // Now we decrement the scope's upper limit bound. We do not actually pop the scope as
    // we want to reuse scope entries if we do continuous push and pops. Most scopes don't
    // next too far so we don't want to keep freeing and allocating them
    //
    ctx->pcifParser_data_itemsStack_limit--;
    SCOPE_TOP(data_items) = (pcifParser_data_items_SCOPE)(ctx->pcifParser_data_itemsStack->get(ctx->pcifParser_data_itemsStack, ctx->pcifParser_data_itemsStack_limit - 1));
}


// Forward declare the locally static matching functions we have generated.
//
static void     parse    (pcifParser ctx, boost::python::object & builder_, bool strict_);
static void     cif    (pcifParser ctx);
static void     loop_body    (pcifParser ctx);
static void     save_frame    (pcifParser ctx);
static void     data_items    (pcifParser ctx);
static void     data_block    (pcifParser ctx);
static void     loop_header    (pcifParser ctx);
static void     inapplicable    (pcifParser ctx);
static void     unknown    (pcifParser ctx);
static cifParser_value_return   value    (pcifParser ctx);
static void     char_string    (pcifParser ctx);
static void     text_field    (pcifParser ctx);
static void     cifParserFree(pcifParser ctx);
/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static  void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "cif.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
        return fileName;
}
/** \brief Create a new cifParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcifParser
cifParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
        // See if we can create a new parser with the standard constructor
        //
        return cifParserNewSSD(instream, NULL);
}

/** \brief Create a new cifParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pcifParser
cifParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pcifParser ctx;         /* Context structure we will build and return   */

    ctx = (pcifParser) ANTLR3_CALLOC(1, sizeof(cifParser));

    if  (ctx == NULL)
    {
                // Failed to allocate memory for parser context
                //
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in cifParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser            = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our cifParser interface
     */
    ctx->parse  = parse;
    ctx->cif    = cif;
    ctx->loop_body      = loop_body;
    ctx->save_frame     = save_frame;
    ctx->data_items     = data_items;
    ctx->data_block     = data_block;
    ctx->loop_header    = loop_header;
    ctx->inapplicable   = inapplicable;
    ctx->unknown        = unknown;
    ctx->value  = value;
    ctx->char_string    = char_string;
    ctx->text_field     = text_field;
    ctx->free                   = cifParserFree;
    ctx->getGrammarFileName     = getGrammarFileName;

    /* Install the scope pushing methods.
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pcifParser_parsePush     = pcifParser_parsePush;
    ctx->pcifParser_parseStack    = antlr3StackNew(0);
    ctx->pcifParser_parseStack_limit    = 0;
    ctx->pcifParser_parseTop      = NULL;
    /* ruleAttributeScope(scope)
     */
    ctx->pcifParser_data_itemsPush     = pcifParser_data_itemsPush;
    ctx->pcifParser_data_itemsStack    = antlr3StackNew(0);
    ctx->pcifParser_data_itemsStack_limit    = 0;
    ctx->pcifParser_data_itemsTop      = NULL;





      PARSER->super = (void *)ctx;


    /* Install the token table
     */
    PSRSTATE->tokenNames   = cifParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

/** Free the parser resources
 */
 static void
 cifParserFree(pcifParser ctx)
 {
    /* Free any scope memory
     */
    /* ruleAttributeScope(scope)
     */
    ctx->pcifParser_parseStack->free(ctx->pcifParser_parseStack);
    /* ruleAttributeScope(scope)
     */
    ctx->pcifParser_data_itemsStack->free(ctx->pcifParser_data_itemsStack);



        // Free this parser
        //
    ctx->pParser->free(ctx->pParser);
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return cifParserTokenNames;
}


    std::string to_std_string(pANTLR3_COMMON_TOKEN token) {
        ANTLR3_MARKER start = token->getStartIndex(token);
        ANTLR3_MARKER stop = token->getStopIndex(token);
        std::string str((const char*)start, stop-start+1);
        if ((str[0] == '\'' && str[str.size()-1] == '\'') ||
            (str[0] == '"' && str[str.size()-1] == '"'))
          { str = str.substr(1, str.size()-2); }
        return str;
    }



/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_cif_in_parse101  */
static  ANTLR3_BITWORD FOLLOW_cif_in_parse101_bits[]    = { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_cif_in_parse101       = { FOLLOW_cif_in_parse101_bits, 1      };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_parse103  */
static  ANTLR3_BITWORD FOLLOW_set_in_parse103_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_parse103       = { FOLLOW_set_in_parse103_bits, 1      };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMENTS_in_cif124  */
static  ANTLR3_BITWORD FOLLOW_COMMENTS_in_cif124_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000622) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMENTS_in_cif124    = { FOLLOW_COMMENTS_in_cif124_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_cif129  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_cif129_bits[]       = { ANTLR3_UINT64_LIT(0x0000000000000622) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_cif129  = { FOLLOW_WHITESPACE_in_cif129_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_block_in_cif135  */
static  ANTLR3_BITWORD FOLLOW_data_block_in_cif135_bits[]       = { ANTLR3_UINT64_LIT(0x0000000000000622) };
static  ANTLR3_BITSET_LIST FOLLOW_data_block_in_cif135  = { FOLLOW_data_block_in_cif135_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_cif139  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_cif139_bits[]       = { ANTLR3_UINT64_LIT(0x0000000000000620) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_cif139  = { FOLLOW_WHITESPACE_in_cif139_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_block_in_cif142  */
static  ANTLR3_BITWORD FOLLOW_data_block_in_cif142_bits[]       = { ANTLR3_UINT64_LIT(0x0000000000000622) };
static  ANTLR3_BITSET_LIST FOLLOW_data_block_in_cif142  = { FOLLOW_data_block_in_cif142_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_cif148  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_cif148_bits[]       = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_cif148  = { FOLLOW_WHITESPACE_in_cif148_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_loop_body166  */
static  ANTLR3_BITWORD FOLLOW_value_in_loop_body166_bits[]      = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_loop_body166 = { FOLLOW_value_in_loop_body166_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_loop_body179  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_loop_body179_bits[] = { ANTLR3_UINT64_LIT(0x0000007000007020) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_loop_body179    = { FOLLOW_WHITESPACE_in_loop_body179_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_loop_body193  */
static  ANTLR3_BITWORD FOLLOW_value_in_loop_body193_bits[]      = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_loop_body193 = { FOLLOW_value_in_loop_body193_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SAVE_FRAME_HEADING_in_save_frame217  */
static  ANTLR3_BITWORD FOLLOW_SAVE_FRAME_HEADING_in_save_frame217_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_SAVE_FRAME_HEADING_in_save_frame217   = { FOLLOW_SAVE_FRAME_HEADING_in_save_frame217_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_save_frame230  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_save_frame230_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000920) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_save_frame230   = { FOLLOW_WHITESPACE_in_save_frame230_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_items_in_save_frame233  */
static  ANTLR3_BITWORD FOLLOW_data_items_in_save_frame233_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_data_items_in_save_frame233   = { FOLLOW_data_items_in_save_frame233_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_save_frame238  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_save_frame238_bits[]        = { ANTLR3_UINT64_LIT(0x00000000000000A0) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_save_frame238   = { FOLLOW_WHITESPACE_in_save_frame238_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SAVE_in_save_frame241  */
static  ANTLR3_BITWORD FOLLOW_SAVE_in_save_frame241_bits[]      = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SAVE_in_save_frame241 = { FOLLOW_SAVE_in_save_frame241_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TAG_in_data_items268  */
static  ANTLR3_BITWORD FOLLOW_TAG_in_data_items268_bits[]       = { ANTLR3_UINT64_LIT(0x0000007000007020) };
static  ANTLR3_BITSET_LIST FOLLOW_TAG_in_data_items268  = { FOLLOW_TAG_in_data_items268_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_data_items270  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_data_items270_bits[]        = { ANTLR3_UINT64_LIT(0x0000007000007020) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_data_items270   = { FOLLOW_WHITESPACE_in_data_items270_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_data_items273  */
static  ANTLR3_BITWORD FOLLOW_value_in_data_items273_bits[]     = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_data_items273        = { FOLLOW_value_in_data_items273_bits, 1       };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_header_in_data_items286  */
static  ANTLR3_BITWORD FOLLOW_loop_header_in_data_items286_bits[]       = { ANTLR3_UINT64_LIT(0x0000007000007020) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_header_in_data_items286  = { FOLLOW_loop_header_in_data_items286_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_data_items288  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_data_items288_bits[]        = { ANTLR3_UINT64_LIT(0x0000007000007020) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_data_items288   = { FOLLOW_WHITESPACE_in_data_items288_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_loop_body_in_data_items291  */
static  ANTLR3_BITWORD FOLLOW_loop_body_in_data_items291_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_loop_body_in_data_items291    = { FOLLOW_loop_body_in_data_items291_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DATA_BLOCK_HEADING_in_data_block306  */
static  ANTLR3_BITWORD FOLLOW_DATA_BLOCK_HEADING_in_data_block306_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_DATA_BLOCK_HEADING_in_data_block306   = { FOLLOW_DATA_BLOCK_HEADING_in_data_block306_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_data_block319  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_data_block319_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000960) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_data_block319   = { FOLLOW_WHITESPACE_in_data_block319_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_items_in_data_block324  */
static  ANTLR3_BITWORD FOLLOW_data_items_in_data_block324_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_data_items_in_data_block324   = { FOLLOW_data_items_in_data_block324_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_save_frame_in_data_block328  */
static  ANTLR3_BITWORD FOLLOW_save_frame_in_data_block328_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_save_frame_in_data_block328   = { FOLLOW_save_frame_in_data_block328_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GLOBAL__in_data_block359  */
static  ANTLR3_BITWORD FOLLOW_GLOBAL__in_data_block359_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_GLOBAL__in_data_block359      = { FOLLOW_GLOBAL__in_data_block359_bits, 1     };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_data_block363  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_data_block363_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000960) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_data_block363   = { FOLLOW_WHITESPACE_in_data_block363_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_items_in_data_block368  */
static  ANTLR3_BITWORD FOLLOW_data_items_in_data_block368_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_data_items_in_data_block368   = { FOLLOW_data_items_in_data_block368_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_save_frame_in_data_block372  */
static  ANTLR3_BITWORD FOLLOW_save_frame_in_data_block372_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_save_frame_in_data_block372   = { FOLLOW_save_frame_in_data_block372_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LOOP__in_loop_header393  */
static  ANTLR3_BITWORD FOLLOW_LOOP__in_loop_header393_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_LOOP__in_loop_header393       = { FOLLOW_LOOP__in_loop_header393_bits, 1      };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_loop_header397  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_loop_header397_bits[]       = { ANTLR3_UINT64_LIT(0x0000000000000120) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_loop_header397  = { FOLLOW_WHITESPACE_in_loop_header397_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TAG_in_loop_header400  */
static  ANTLR3_BITWORD FOLLOW_TAG_in_loop_header400_bits[]      = { ANTLR3_UINT64_LIT(0x0000000000000020) };
static  ANTLR3_BITSET_LIST FOLLOW_TAG_in_loop_header400 = { FOLLOW_TAG_in_loop_header400_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHITESPACE_in_loop_header410  */
static  ANTLR3_BITWORD FOLLOW_WHITESPACE_in_loop_header410_bits[]       = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_WHITESPACE_in_loop_header410  = { FOLLOW_WHITESPACE_in_loop_header410_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_36_in_inapplicable424  */
static  ANTLR3_BITWORD FOLLOW_36_in_inapplicable424_bits[]      = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_36_in_inapplicable424 = { FOLLOW_36_in_inapplicable424_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_37_in_unknown433  */
static  ANTLR3_BITWORD FOLLOW_37_in_unknown433_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_37_in_unknown433      = { FOLLOW_37_in_unknown433_bits, 1     };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_inapplicable_in_value443  */
static  ANTLR3_BITWORD FOLLOW_inapplicable_in_value443_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_inapplicable_in_value443      = { FOLLOW_inapplicable_in_value443_bits, 1     };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unknown_in_value447  */
static  ANTLR3_BITWORD FOLLOW_unknown_in_value447_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unknown_in_value447   = { FOLLOW_unknown_in_value447_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_38_in_value451  */
static  ANTLR3_BITWORD FOLLOW_38_in_value451_bits[]     = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_38_in_value451        = { FOLLOW_38_in_value451_bits, 1       };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_char_string_in_value455  */
static  ANTLR3_BITWORD FOLLOW_char_string_in_value455_bits[]    = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_char_string_in_value455       = { FOLLOW_char_string_in_value455_bits, 1      };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMERIC_in_value460  */
static  ANTLR3_BITWORD FOLLOW_NUMERIC_in_value460_bits[]        = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMERIC_in_value460   = { FOLLOW_NUMERIC_in_value460_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_text_field_in_value464  */
static  ANTLR3_BITWORD FOLLOW_text_field_in_value464_bits[]     = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_text_field_in_value464        = { FOLLOW_text_field_in_value464_bits, 1       };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CHAR_STRING_in_char_string482  */
static  ANTLR3_BITWORD FOLLOW_CHAR_STRING_in_char_string482_bits[]      = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CHAR_STRING_in_char_string482 = { FOLLOW_CHAR_STRING_in_char_string482_bits, 1        };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field492  */
static  ANTLR3_BITWORD FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field492_bits[]     = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field492        = { FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field492_bits, 1       };



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 104:43: ( ( WHITESPACE )* data_block )*
 */
static const ANTLR3_INT32 dfa4_eot[6] =
    {
        -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_eof[6] =
    {
        2, 2, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_min[6] =
    {
        5, 5, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_max[6] =
    {
        35, 35, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa4_accept[6] =
    {
        -1, -1, 2, 1, 1, 1
    };
static const ANTLR3_INT32 dfa4_special[6] =
    {
        0, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa4_T_empty        NULL

static const ANTLR3_INT32 dfa4_T0[] =
    {
        1, -1, -1, -1, 3, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };static const ANTLR3_INT32 dfa4_T1[] =
    {
        1, -1, -1, -1, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa4_transitions[] =
{
    dfa4_T1, dfa4_T0, dfa4_T_empty, dfa4_T_empty, dfa4_T_empty, dfa4_T_empty
};

static ANTLR3_INT32 dfa4_sst(pcifParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;

    _s      = s;
    switch  (s)
    {
        case 0:

        {
            ANTLR3_UINT32 LA4_0;

            ANTLR3_MARKER index4_0;


                LA4_0 = LA(1);


            index4_0 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA4_0 == WHITESPACE) )
            {
                s = 1;
            }

            else if ( (LA4_0 == EOF || LA4_0 == 35) )
            {
                s = 2;
            }

            else if ( (LA4_0 == DATA_BLOCK_HEADING) )
            {
                s = 3;
            }

            else if ( (LA4_0 == GLOBAL_) && ((! (SCOPE_TOP(parse))->strict)))
            {
                s = 4;
            }


                SEEK(index4_0);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
    }

    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 104:43: ( ( WHITESPACE )* data_block )*";
    EXCEPTION->decisionNum  = 4;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 4
 */
static
ANTLR3_CYCLIC_DFA cdfa4
    =   {
            4,              /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"()* loopback of 104:43: ( ( WHITESPACE )* data_block )*",
            (CDFA_SPECIAL_FUNC) dfa4_sst,
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa4_eot,       /* EOT table                            */
            dfa4_eof,       /* EOF table                            */
            dfa4_min,       /* Minimum tokens for each state    */
            dfa4_max,       /* Maximum tokens for each state    */
            dfa4_accept,        /* Accept table                     */
            dfa4_special,       /* Special transition states        */
            dfa4_transitions    /* Table of transition tables       */

        };
/* End of Cyclic DFA 4
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 110:8: ( ( WHITESPACE )+ v2= value )*
 */
static const ANTLR3_INT32 dfa8_eot[4] =
    {
        -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa8_eof[4] =
    {
        2, 2, -1, -1
    };
static const ANTLR3_INT32 dfa8_min[4] =
    {
        5, 5, -1, -1
    };
static const ANTLR3_INT32 dfa8_max[4] =
    {
        35, 38, -1, -1
    };
static const ANTLR3_INT32 dfa8_accept[4] =
    {
        -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa8_special[4] =
    {
        -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa8_T_empty        NULL

static const ANTLR3_INT32 dfa8_T0[] =
    {
        1, 2, 2, 2, 2, 2, 2, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 3, 3
    };static const ANTLR3_INT32 dfa8_T1[] =
    {
        1, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa8_transitions[] =
{
    dfa8_T1, dfa8_T0, dfa8_T_empty, dfa8_T_empty
};


/* Declare tracking structure for Cyclic DFA 8
 */
static
ANTLR3_CYCLIC_DFA cdfa8
    =   {
            8,              /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"()* loopback of 110:8: ( ( WHITESPACE )+ v2= value )*",
            (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,        /* Default special state transition function    */
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa8_eot,       /* EOT table                            */
            dfa8_eof,       /* EOF table                            */
            dfa8_min,       /* Minimum tokens for each state    */
            dfa8_max,       /* Maximum tokens for each state    */
            dfa8_accept,        /* Accept table                     */
            dfa8_special,       /* Special transition states        */
            dfa8_transitions    /* Table of transition tables       */

        };
/* End of Cyclic DFA 8
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()+ loopback of 119:8: ( ( WHITESPACE )+ data_items )+
 */
static const ANTLR3_INT32 dfa10_eot[4] =
    {
        -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa10_eof[4] =
    {
        -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa10_min[4] =
    {
        5, 5, -1, -1
    };
static const ANTLR3_INT32 dfa10_max[4] =
    {
        5, 11, -1, -1
    };
static const ANTLR3_INT32 dfa10_accept[4] =
    {
        -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa10_special[4] =
    {
        -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa10_T_empty       NULL

static const ANTLR3_INT32 dfa10_T0[] =
    {
        1, -1, 2, 3, -1, -1, 3
    };static const ANTLR3_INT32 dfa10_T1[] =
    {
        1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa10_transitions[] =
{
    dfa10_T1, dfa10_T0, dfa10_T_empty, dfa10_T_empty
};


/* Declare tracking structure for Cyclic DFA 10
 */
static
ANTLR3_CYCLIC_DFA cdfa10
    =   {
            10,             /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"()+ loopback of 119:8: ( ( WHITESPACE )+ data_items )+",
            (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,        /* Default special state transition function    */
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa10_eot,      /* EOT table                            */
            dfa10_eof,      /* EOF table                            */
            dfa10_min,      /* Minimum tokens for each state    */
            dfa10_max,      /* Maximum tokens for each state    */
            dfa10_accept,       /* Accept table                     */
            dfa10_special,      /* Special transition states        */
            dfa10_transitions   /* Table of transition tables       */

        };
/* End of Cyclic DFA 10
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 163:8: ( ( WHITESPACE )+ ( data_items | save_frame ) )*
 */
static const ANTLR3_INT32 dfa17_eot[6] =
    {
        -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_eof[6] =
    {
        4, 4, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_min[6] =
    {
        5, 5, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_max[6] =
    {
        35, 35, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa17_accept[6] =
    {
        -1, -1, 2, 2, 2, 1
    };
static const ANTLR3_INT32 dfa17_special[6] =
    {
        0, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa17_T_empty       NULL

static const ANTLR3_INT32 dfa17_T0[] =
    {
        1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };static const ANTLR3_INT32 dfa17_T1[] =
    {
        1, 5, -1, 5, 2, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa17_transitions[] =
{
    dfa17_T0, dfa17_T1, dfa17_T_empty, dfa17_T_empty, dfa17_T_empty, dfa17_T_empty
};

static ANTLR3_INT32 dfa17_sst(pcifParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;

    _s      = s;
    switch  (s)
    {
        case 0:

        {
            ANTLR3_UINT32 LA17_0;

            ANTLR3_MARKER index17_0;


                LA17_0 = LA(1);


            index17_0 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA17_0 == WHITESPACE) )
            {
                s = 1;
            }

            else if ( (LA17_0 == DATA_BLOCK_HEADING) )
            {
                s = 2;
            }

            else if ( (LA17_0 == GLOBAL_) && ((!        (SCOPE_TOP(parse))->strict)))
            {
                s = 3;
            }

            else if ( (LA17_0 == EOF || LA17_0 == 35) )
            {
                s = 4;
            }


                SEEK(index17_0);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
    }

    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 163:8: ( ( WHITESPACE )+ ( data_items | save_frame ) )*";
    EXCEPTION->decisionNum  = 17;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 17
 */
static
ANTLR3_CYCLIC_DFA cdfa17
    =   {
            17,             /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"()* loopback of 163:8: ( ( WHITESPACE )+ ( data_items | save_frame ) )*",
            (CDFA_SPECIAL_FUNC) dfa17_sst,
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa17_eot,      /* EOT table                            */
            dfa17_eof,      /* EOF table                            */
            dfa17_min,      /* Minimum tokens for each state    */
            dfa17_max,      /* Maximum tokens for each state    */
            dfa17_accept,       /* Accept table                     */
            dfa17_special,      /* Special transition states        */
            dfa17_transitions   /* Table of transition tables       */

        };
/* End of Cyclic DFA 17
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 165:40: ( ( WHITESPACE )+ ( data_items | save_frame ) )*
 */
static const ANTLR3_INT32 dfa20_eot[6] =
    {
        -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa20_eof[6] =
    {
        4, 4, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa20_min[6] =
    {
        5, 5, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa20_max[6] =
    {
        35, 35, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa20_accept[6] =
    {
        -1, -1, 2, 2, 2, 1
    };
static const ANTLR3_INT32 dfa20_special[6] =
    {
        0, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa20_T_empty       NULL

static const ANTLR3_INT32 dfa20_T0[] =
    {
        1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };static const ANTLR3_INT32 dfa20_T1[] =
    {
        1, 5, -1, 5, 2, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa20_transitions[] =
{
    dfa20_T0, dfa20_T1, dfa20_T_empty, dfa20_T_empty, dfa20_T_empty, dfa20_T_empty
};

static ANTLR3_INT32 dfa20_sst(pcifParser ctx, pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_INT_STREAM is, pANTLR3_CYCLIC_DFA dfa, ANTLR3_INT32 s)
{
    ANTLR3_INT32    _s;

    _s      = s;
    switch  (s)
    {
        case 0:

        {
            ANTLR3_UINT32 LA20_0;

            ANTLR3_MARKER index20_0;


                LA20_0 = LA(1);


            index20_0 = INDEX();

            REWINDLAST();

            s = -1;
            if ( (LA20_0 == WHITESPACE) )
            {
                s = 1;
            }

            else if ( (LA20_0 == DATA_BLOCK_HEADING) )
            {
                s = 2;
            }

            else if ( (LA20_0 == GLOBAL_) && ((!        (SCOPE_TOP(parse))->strict)))
            {
                s = 3;
            }

            else if ( (LA20_0 == EOF || LA20_0 == 35) )
            {
                s = 4;
            }


                SEEK(index20_0);

            if ( s>=0 )
            {
                return s;
            }
        }
        break;
    }

    CONSTRUCTEX();
    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
    EXCEPTION->message      = (void *)"()* loopback of 165:40: ( ( WHITESPACE )+ ( data_items | save_frame ) )*";
    EXCEPTION->decisionNum  = 20;
    EXCEPTION->state        = _s;
    return -1;
}

/* Declare tracking structure for Cyclic DFA 20
 */
static
ANTLR3_CYCLIC_DFA cdfa20
    =   {
            20,             /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"()* loopback of 165:40: ( ( WHITESPACE )+ ( data_items | save_frame ) )*",
            (CDFA_SPECIAL_FUNC) dfa20_sst,
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa20_eot,      /* EOT table                            */
            dfa20_eof,      /* EOF table                            */
            dfa20_min,      /* Minimum tokens for each state    */
            dfa20_max,      /* Maximum tokens for each state    */
            dfa20_accept,       /* Accept table                     */
            dfa20_special,      /* Special transition states        */
            dfa20_transitions   /* Table of transition tables       */

        };
/* End of Cyclic DFA 20
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()+ loopback of 170:10: ( ( WHITESPACE )+ TAG )+
 */
static const ANTLR3_INT32 dfa23_eot[5] =
    {
        -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_eof[5] =
    {
        -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa23_min[5] =
    {
        5, 5, 5, -1, -1
    };
static const ANTLR3_INT32 dfa23_max[5] =
    {
        5, 38, 38, -1, -1
    };
static const ANTLR3_INT32 dfa23_accept[5] =
    {
        -1, -1, -1, 2, 1
    };
static const ANTLR3_INT32 dfa23_special[5] =
    {
        -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa23_T_empty       NULL

static const ANTLR3_INT32 dfa23_T0[] =
    {
        2, -1, -1, 4, -1, -1, -1, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3
    };static const ANTLR3_INT32 dfa23_T1[] =
    {
        1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa23_transitions[] =
{
    dfa23_T1, dfa23_T0, dfa23_T0, dfa23_T_empty, dfa23_T_empty
};


/* Declare tracking structure for Cyclic DFA 23
 */
static
ANTLR3_CYCLIC_DFA cdfa23
    =   {
            23,             /* Decision number of this dfa          */
            /* Which decision this represents:   */
            (const pANTLR3_UCHAR)"()+ loopback of 170:10: ( ( WHITESPACE )+ TAG )+",
            (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,        /* Default special state transition function    */
            antlr3dfaspecialTransition,         /* DFA specialTransition is currently just a default function in the runtime */
            antlr3dfapredict,                   /* DFA simulator function is in the runtime */
            dfa23_eot,      /* EOT table                            */
            dfa23_eof,      /* EOF table                            */
            dfa23_min,      /* Minimum tokens for each state    */
            dfa23_max,      /* Maximum tokens for each state    */
            dfa23_accept,       /* Accept table                     */
            dfa23_special,      /* Special transition states        */
            dfa23_transitions   /* Table of transition tables       */

        };
/* End of Cyclic DFA 23
 * ---------------------
 */
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start parse
 * cif.g:90:1: parse[boost::python::object & builder_, bool strict_] : cif ( EOF | '\\u001a' ) ;
 */
static void
parse(pcifParser ctx, boost::python::object & builder_, bool strict_)
{
    /* Initialize rule variables
     */

    ctx->pcifParser_parseTop = pcifParser_parsePush(ctx);

        (SCOPE_TOP(parse))->builder= new boost::python::object(builder_);
        (SCOPE_TOP(parse))->strict= strict_;
    {
        // cif.g:98:2: ( cif ( EOF | '\\u001a' ) )
        // cif.g:98:4: cif ( EOF | '\\u001a' )
        {
            FOLLOWPUSH(FOLLOW_cif_in_parse101);
            cif(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleparseEx;
            }

            if ( LA(1) == EOF || LA(1) == 35 )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_parse103;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_parse103);    goto ruleparseEx;
            }


        }

    }


    // This is where rules clean up and exit
    //
    goto ruleparseEx; /* Prevent compiler warnings */
    ruleparseEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {
                     delete     (SCOPE_TOP(parse))->builder;
                }
            }

    pcifParser_parsePop(ctx);

    return ;
}
/* $ANTLR end parse */

/**
 * $ANTLR start cif
 * cif.g:103:1: cif : ( COMMENTS )? ( WHITESPACE )* ( data_block ( ( WHITESPACE )* data_block )* ( WHITESPACE )* )? ;
 */
static void
cif(pcifParser ctx)
{
    /* Initialize rule variables
     */


    {
        // cif.g:104:2: ( ( COMMENTS )? ( WHITESPACE )* ( data_block ( ( WHITESPACE )* data_block )* ( WHITESPACE )* )? )
        // cif.g:104:4: ( COMMENTS )? ( WHITESPACE )* ( data_block ( ( WHITESPACE )* data_block )* ( WHITESPACE )* )?
        {

            // cif.g:104:4: ( COMMENTS )?
            {
                int alt1=2;
                switch ( LA(1) )
                {
                    case COMMENTS:
                        {
                                alt1=1;
                        }
                        break;
                }

                switch (alt1)
                {
                case 1:
                    // cif.g:104:5: COMMENTS
                    {
                         MATCHT(COMMENTS, &FOLLOW_COMMENTS_in_cif124);
                        if  (HASEXCEPTION())
                        {
                            goto rulecifEx;
                        }


                    }
                    break;

                }
            }

            // cif.g:104:16: ( WHITESPACE )*

            for (;;)
            {
                int alt2=2;
                switch ( LA(1) )
                {
                case WHITESPACE:
                        {
                                alt2=1;
                        }
                    break;

                }

                switch (alt2)
                {
                case 1:
                    // cif.g:104:17: WHITESPACE
                    {
                         MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_cif129);
                        if  (HASEXCEPTION())
                        {
                            goto rulecifEx;
                        }


                    }
                    break;

                default:
                    goto loop2; /* break out of the loop */
                    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


            // cif.g:104:30: ( data_block ( ( WHITESPACE )* data_block )* ( WHITESPACE )* )?
            {
                int alt6=2;
                {
                    int LA6_0 = LA(1);
                    if ( (LA6_0 == DATA_BLOCK_HEADING) )
                    {
                        alt6=1;
                    }
                    else if ( (LA6_0 == GLOBAL_) && ((! (SCOPE_TOP(parse))->strict)))
                    {
                        alt6=1;
                    }
                }
                switch (alt6)
                {
                case 1:
                    // cif.g:104:32: data_block ( ( WHITESPACE )* data_block )* ( WHITESPACE )*
                    {
                        FOLLOWPUSH(FOLLOW_data_block_in_cif135);
                        data_block(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto rulecifEx;
                        }


                        // cif.g:104:43: ( ( WHITESPACE )* data_block )*

                        for (;;)
                        {
                            int alt4=2;
                            alt4 = cdfa4.predict(ctx, RECOGNIZER, ISTREAM, &cdfa4);
                            if  (HASEXCEPTION())
                            {
                                goto rulecifEx;
                            }

                            switch (alt4)
                            {
                                case 1:
                                    // cif.g:104:45: ( WHITESPACE )* data_block
                                    {

                                        // cif.g:104:45: ( WHITESPACE )*

                                        for (;;)
                                        {
                                            int alt3=2;
                                            switch ( LA(1) )
                                            {
                                            case WHITESPACE:
                                                {
                                                        alt3=1;
                                                }
                                                break;

                                            }

                                            switch (alt3)
                                            {
                                                case 1:
                                                    // cif.g:104:45: WHITESPACE
                                                    {
                                                         MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_cif139);
                                                        if  (HASEXCEPTION())
                                                        {
                                                            goto rulecifEx;
                                                        }


                                                    }
                                                    break;

                                                default:
                                                    goto loop3; /* break out of the loop */
                                                    break;
                                            }
                                        }
                                        loop3: ; /* Jump out to here if this rule does not match */

                                        FOLLOWPUSH(FOLLOW_data_block_in_cif142);
                                        data_block(ctx);

                                        FOLLOWPOP();
                                        if  (HASEXCEPTION())
                                        {
                                            goto rulecifEx;
                                        }


                                    }
                                    break;

                                default:
                                    goto loop4; /* break out of the loop */
                                    break;
                            }
                        }
                        loop4: ; /* Jump out to here if this rule does not match */


                        // cif.g:104:71: ( WHITESPACE )*

                        for (;;)
                        {
                            int alt5=2;
                            switch ( LA(1) )
                            {
                            case WHITESPACE:
                                {
                                        alt5=1;
                                }
                                break;

                            }

                            switch (alt5)
                            {
                                case 1:
                                    // cif.g:104:72: WHITESPACE
                                    {
                                         MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_cif148);
                                        if  (HASEXCEPTION())
                                        {
                                            goto rulecifEx;
                                        }


                                    }
                                    break;

                                default:
                                    goto loop5; /* break out of the loop */
                                    break;
                            }
                        }
                        loop5: ; /* Jump out to here if this rule does not match */


                    }
                    break;

                }
            }

        }

    }


    // This is where rules clean up and exit
    //
    goto rulecifEx; /* Prevent compiler warnings */
    rulecifEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end cif */

/**
 * $ANTLR start loop_body
 * cif.g:107:1: loop_body : v1= value ( ( WHITESPACE )+ v2= value )* ;
 */
static void
loop_body(pcifParser ctx)
{
    cifParser_value_return v1;
    #undef      RETURN_TYPE_v1
    #define     RETURN_TYPE_v1 cifParser_value_return

    cifParser_value_return v2;
    #undef      RETURN_TYPE_v2
    #define     RETURN_TYPE_v2 cifParser_value_return

    /* Initialize rule variables
     */


    {
        // cif.g:108:2: (v1= value ( ( WHITESPACE )+ v2= value )* )
        // cif.g:108:4: v1= value ( ( WHITESPACE )+ v2= value )*
        {
            FOLLOWPUSH(FOLLOW_value_in_loop_body166);
            v1=value(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleloop_bodyEx;
            }

            {
                 (      (SCOPE_TOP(data_items))->curr_loop_values)->push_back(to_std_string((v1.start)));
            }

            // cif.g:110:8: ( ( WHITESPACE )+ v2= value )*

            for (;;)
            {
                int alt8=2;
                alt8 = cdfa8.predict(ctx, RECOGNIZER, ISTREAM, &cdfa8);
                if  (HASEXCEPTION())
                {
                    goto ruleloop_bodyEx;
                }

                switch (alt8)
                {
                case 1:
                    // cif.g:110:10: ( WHITESPACE )+ v2= value
                    {
                        // cif.g:110:10: ( WHITESPACE )+
                        {
                            int cnt7=0;

                            for (;;)
                            {
                                int alt7=2;
                                switch ( LA(1) )
                                {
                                case WHITESPACE:
                                        {
                                                alt7=1;
                                        }
                                    break;

                                }

                                switch (alt7)
                                {
                                    case 1:
                                        // cif.g:110:10: WHITESPACE
                                        {
                                             MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_loop_body179);
                                            if  (HASEXCEPTION())
                                            {
                                                goto ruleloop_bodyEx;
                                            }


                                        }
                                        break;

                                    default:

                                        if ( cnt7 >= 1 )
                                        {
                                            goto loop7;
                                        }
                                        /* mismatchedSetEx()
                                         */
                                        CONSTRUCTEX();
                                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                                        goto ruleloop_bodyEx;
                                }
                                cnt7++;
                            }
                            loop7: ;    /* Jump to here if this rule does not match */
                        }
                        FOLLOWPUSH(FOLLOW_value_in_loop_body193);
                        v2=value(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto ruleloop_bodyEx;
                        }

                        {
                             (  (SCOPE_TOP(data_items))->curr_loop_values)->push_back(to_std_string((v2.start)));
                        }

                    }
                    break;

                default:
                    goto loop8; /* break out of the loop */
                    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }


    // This is where rules clean up and exit
    //
    goto ruleloop_bodyEx; /* Prevent compiler warnings */
    ruleloop_bodyEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end loop_body */

/**
 * $ANTLR start save_frame
 * cif.g:116:1: save_frame : SAVE_FRAME_HEADING ( ( WHITESPACE )+ data_items )+ ( WHITESPACE )+ SAVE ;
 */
static void
save_frame(pcifParser ctx)
{
    pANTLR3_COMMON_TOKEN    SAVE_FRAME_HEADING1;

    /* Initialize rule variables
     */


    SAVE_FRAME_HEADING1       = NULL;

    {
        // cif.g:117:2: ( SAVE_FRAME_HEADING ( ( WHITESPACE )+ data_items )+ ( WHITESPACE )+ SAVE )
        // cif.g:117:4: SAVE_FRAME_HEADING ( ( WHITESPACE )+ data_items )+ ( WHITESPACE )+ SAVE
        {
            SAVE_FRAME_HEADING1 = (pANTLR3_COMMON_TOKEN) MATCHT(SAVE_FRAME_HEADING, &FOLLOW_SAVE_FRAME_HEADING_in_save_frame217);
            if  (HASEXCEPTION())
            {
                goto rulesave_frameEx;
            }

            {
                 (      (SCOPE_TOP(parse))->builder)->attr("start_save_frame")(to_std_string(SAVE_FRAME_HEADING1));
            }
            // cif.g:119:8: ( ( WHITESPACE )+ data_items )+
            {
                int cnt10=0;

                for (;;)
                {
                    int alt10=2;
                alt10 = cdfa10.predict(ctx, RECOGNIZER, ISTREAM, &cdfa10);
                if  (HASEXCEPTION())
                {
                    goto rulesave_frameEx;
                }

                switch (alt10)
                {
                    case 1:
                        // cif.g:119:10: ( WHITESPACE )+ data_items
                        {
                            // cif.g:119:10: ( WHITESPACE )+
                            {
                                int cnt9=0;

                                for (;;)
                                {
                                    int alt9=2;
                                switch ( LA(1) )
                                {
                                case WHITESPACE:
                                        {
                                                alt9=1;
                                        }
                                    break;

                                }

                                switch (alt9)
                                {
                                    case 1:
                                        // cif.g:119:10: WHITESPACE
                                        {
                                             MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_save_frame230);
                                            if  (HASEXCEPTION())
                                            {
                                                goto rulesave_frameEx;
                                            }


                                        }
                                        break;

                                    default:

                                        if ( cnt9 >= 1 )
                                        {
                                            goto loop9;
                                        }
                                        /* mismatchedSetEx()
                                         */
                                        CONSTRUCTEX();
                                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                                        goto rulesave_frameEx;
                                }
                                cnt9++;
                                }
                                loop9: ;        /* Jump to here if this rule does not match */
                            }
                            FOLLOWPUSH(FOLLOW_data_items_in_save_frame233);
                            data_items(ctx);

                            FOLLOWPOP();
                            if  (HASEXCEPTION())
                            {
                                goto rulesave_frameEx;
                            }


                        }
                        break;

                    default:

                        if ( cnt10 >= 1 )
                        {
                            goto loop10;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto rulesave_frameEx;
                }
                cnt10++;
                }
                loop10: ;       /* Jump to here if this rule does not match */
            }
            // cif.g:119:36: ( WHITESPACE )+
            {
                int cnt11=0;

                for (;;)
                {
                    int alt11=2;
                switch ( LA(1) )
                {
                case WHITESPACE:
                        {
                                alt11=1;
                        }
                    break;

                }

                switch (alt11)
                {
                    case 1:
                        // cif.g:119:36: WHITESPACE
                        {
                             MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_save_frame238);
                            if  (HASEXCEPTION())
                            {
                                goto rulesave_frameEx;
                            }


                        }
                        break;

                    default:

                        if ( cnt11 >= 1 )
                        {
                            goto loop11;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto rulesave_frameEx;
                }
                cnt11++;
                }
                loop11: ;       /* Jump to here if this rule does not match */
            }
             MATCHT(SAVE, &FOLLOW_SAVE_in_save_frame241);
            if  (HASEXCEPTION())
            {
                goto rulesave_frameEx;
            }

            {
                 (      (SCOPE_TOP(parse))->builder)->attr("end_save_frame")();
            }

        }

    }


    // This is where rules clean up and exit
    //
    goto rulesave_frameEx; /* Prevent compiler warnings */
    rulesave_frameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end save_frame */

/**
 * $ANTLR start data_items
 * cif.g:123:1: data_items : ( TAG ( WHITESPACE )* value | loop_header ( WHITESPACE )* loop_body );
 */
static void
data_items(pcifParser ctx)
{
    pANTLR3_COMMON_TOKEN    TAG2;
    cifParser_value_return value3;
    #undef      RETURN_TYPE_value3
    #define     RETURN_TYPE_value3 cifParser_value_return

    /* Initialize rule variables
     */

    ctx->pcifParser_data_itemsTop = pcifParser_data_itemsPush(ctx);
        (SCOPE_TOP(data_items))->curr_loop_values= new scitbx::af::shared<std::string>();
                (SCOPE_TOP(data_items))->curr_loop_headers= new scitbx::af::shared<std::string>();

    TAG2       = NULL;

    {
        {
            //  cif.g:133:2: ( TAG ( WHITESPACE )* value | loop_header ( WHITESPACE )* loop_body )

            ANTLR3_UINT32 alt14;

            alt14=2;

            switch ( LA(1) )
            {
            case TAG:
                {
                        alt14=1;
                }
                break;
            case LOOP_:
                {
                        alt14=2;
                }
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 14;
                EXCEPTION->state        = 0;


                goto ruledata_itemsEx;
            }

            switch (alt14)
            {
                case 1:
                    // cif.g:133:4: TAG ( WHITESPACE )* value
                    {
                        TAG2 = (pANTLR3_COMMON_TOKEN) MATCHT(TAG, &FOLLOW_TAG_in_data_items268);
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_itemsEx;
                        }


                        // cif.g:133:8: ( WHITESPACE )*

                        for (;;)
                        {
                            int alt12=2;
                            switch ( LA(1) )
                            {
                            case WHITESPACE:
                                {
                                        alt12=1;
                                }
                                break;

                            }

                            switch (alt12)
                            {
                                case 1:
                                    // cif.g:133:8: WHITESPACE
                                    {
                                         MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_data_items270);
                                        if  (HASEXCEPTION())
                                        {
                                            goto ruledata_itemsEx;
                                        }


                                    }
                                    break;

                                default:
                                    goto loop12;        /* break out of the loop */
                                    break;
                            }
                        }
                        loop12: ; /* Jump out to here if this rule does not match */

                        FOLLOWPUSH(FOLLOW_value_in_data_items273);
                        value3=value(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_itemsEx;
                        }

                        {

                              ( (SCOPE_TOP(parse))->builder)->attr("add_data_item")(
                              to_std_string(TAG2),
                              to_std_string((value3.start)));

                        }

                    }
                    break;
                case 2:
                    // cif.g:139:10: loop_header ( WHITESPACE )* loop_body
                    {
                        FOLLOWPUSH(FOLLOW_loop_header_in_data_items286);
                        loop_header(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_itemsEx;
                        }


                        // cif.g:139:22: ( WHITESPACE )*

                        for (;;)
                        {
                            int alt13=2;
                            switch ( LA(1) )
                            {
                            case WHITESPACE:
                                {
                                        alt13=1;
                                }
                                break;

                            }

                            switch (alt13)
                            {
                                case 1:
                                    // cif.g:139:22: WHITESPACE
                                    {
                                         MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_data_items288);
                                        if  (HASEXCEPTION())
                                        {
                                            goto ruledata_itemsEx;
                                        }


                                    }
                                    break;

                                default:
                                    goto loop13;        /* break out of the loop */
                                    break;
                            }
                        }
                        loop13: ; /* Jump out to here if this rule does not match */

                        FOLLOWPUSH(FOLLOW_loop_body_in_data_items291);
                        loop_body(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto ruledata_itemsEx;
                        }

                        {

                              scitbx::af::shared<std::string> &values = *(      (SCOPE_TOP(data_items))->curr_loop_values);
                              int n_cols =      (SCOPE_TOP(data_items))->curr_loop_headers->size();
                              if (values.size() % n_cols != 0) {
                                std::string msg = "Wrong number of data items for loop containing ";
                                msg += (*       (SCOPE_TOP(data_items))->curr_loop_headers)[0];
                                CTX->errors->push_back(msg);
                              }
                              else {
                                try {
                                  (     (SCOPE_TOP(parse))->builder)->attr("add_loop")( (SCOPE_TOP(data_items))->curr_loop_headers, values);
                                }
                                catch (boost::python::error_already_set&) {
                                  PyErr_Print();
                                  PyErr_Clear();
                                }
                              }

                        }

                    }
                    break;

            }
        }
    }


    // This is where rules clean up and exit
    //
    goto ruledata_itemsEx; /* Prevent compiler warnings */
    ruledata_itemsEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {
                     delete     (SCOPE_TOP(data_items))->curr_loop_values;
                         delete         (SCOPE_TOP(data_items))->curr_loop_headers;

                }
            }

    pcifParser_data_itemsPop(ctx);

    return ;
}
/* $ANTLR end data_items */

/**
 * $ANTLR start data_block
 * cif.g:160:1: data_block : ( ( DATA_BLOCK_HEADING ( ( WHITESPACE )+ ( data_items | save_frame ) )* ) | ({...}? => GLOBAL_ ( ( WHITESPACE )+ ( data_items | save_frame ) )* ) );
 */
static void
data_block(pcifParser ctx)
{
    pANTLR3_COMMON_TOKEN    DATA_BLOCK_HEADING4;

    /* Initialize rule variables
     */


    DATA_BLOCK_HEADING4       = NULL;

    {
        {
            //  cif.g:161:2: ( ( DATA_BLOCK_HEADING ( ( WHITESPACE )+ ( data_items | save_frame ) )* ) | ({...}? => GLOBAL_ ( ( WHITESPACE )+ ( data_items | save_frame ) )* ) )

            ANTLR3_UINT32 alt21;

            alt21=2;


            {
                int LA21_0 = LA(1);
                if ( (LA21_0 == DATA_BLOCK_HEADING) )
                {
                    alt21=1;
                }
                else if ( (LA21_0 == GLOBAL_) && ((!    (SCOPE_TOP(parse))->strict)))
                {
                    alt21=2;
                }
                else
                {

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 21;
                    EXCEPTION->state        = 0;


                    goto ruledata_blockEx;
                }
            }
            switch (alt21)
            {
                case 1:
                    // cif.g:161:4: ( DATA_BLOCK_HEADING ( ( WHITESPACE )+ ( data_items | save_frame ) )* )
                    {
                        // cif.g:161:4: ( DATA_BLOCK_HEADING ( ( WHITESPACE )+ ( data_items | save_frame ) )* )
                        // cif.g:161:6: DATA_BLOCK_HEADING ( ( WHITESPACE )+ ( data_items | save_frame ) )*
                        {
                            DATA_BLOCK_HEADING4 = (pANTLR3_COMMON_TOKEN) MATCHT(DATA_BLOCK_HEADING, &FOLLOW_DATA_BLOCK_HEADING_in_data_block306);
                            if  (HASEXCEPTION())
                            {
                                goto ruledata_blockEx;
                            }

                            {
                                 (      (SCOPE_TOP(parse))->builder)->attr("add_data_block")(to_std_string(DATA_BLOCK_HEADING4));
                            }

                            // cif.g:163:8: ( ( WHITESPACE )+ ( data_items | save_frame ) )*

                            for (;;)
                            {
                                int alt17=2;
                                alt17 = cdfa17.predict(ctx, RECOGNIZER, ISTREAM, &cdfa17);
                                if  (HASEXCEPTION())
                                {
                                    goto ruledata_blockEx;
                                }

                                switch (alt17)
                                {
                                case 1:
                                    // cif.g:163:10: ( WHITESPACE )+ ( data_items | save_frame )
                                    {
                                        // cif.g:163:10: ( WHITESPACE )+
                                        {
                                            int cnt15=0;

                                            for (;;)
                                            {
                                                int alt15=2;
                                                switch ( LA(1) )
                                                {
                                                case WHITESPACE:
                                                        {
                                                                alt15=1;
                                                        }
                                                    break;

                                                }

                                                switch (alt15)
                                                {
                                                    case 1:
                                                        // cif.g:163:10: WHITESPACE
                                                        {
                                                             MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_data_block319);
                                                            if  (HASEXCEPTION())
                                                            {
                                                                goto ruledata_blockEx;
                                                            }


                                                        }
                                                        break;

                                                    default:

                                                        if ( cnt15 >= 1 )
                                                        {
                                                            goto loop15;
                                                        }
                                                        /* mismatchedSetEx()
                                                         */
                                                        CONSTRUCTEX();
                                                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                                                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                                                        goto ruledata_blockEx;
                                                }
                                                cnt15++;
                                            }
                                            loop15: ;   /* Jump to here if this rule does not match */
                                        }

                                        // cif.g:163:22: ( data_items | save_frame )
                                        {
                                            int alt16=2;
                                            switch ( LA(1) )
                                            {
                                            case TAG:
                                            case LOOP_:
                                                {
                                                        alt16=1;
                                                }
                                                break;
                                            case SAVE_FRAME_HEADING:
                                                {
                                                        alt16=2;
                                                }
                                                break;

                                            default:
                                                CONSTRUCTEX();
                                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                                EXCEPTION->message      = (void *)"";
                                                EXCEPTION->decisionNum  = 16;
                                                EXCEPTION->state        = 0;


                                                goto ruledata_blockEx;
                                            }

                                            switch (alt16)
                                            {
                                                case 1:
                                                    // cif.g:163:24: data_items
                                                    {
                                                        FOLLOWPUSH(FOLLOW_data_items_in_data_block324);
                                                        data_items(ctx);

                                                        FOLLOWPOP();
                                                        if  (HASEXCEPTION())
                                                        {
                                                            goto ruledata_blockEx;
                                                        }


                                                    }
                                                    break;
                                                case 2:
                                                    // cif.g:163:37: save_frame
                                                    {
                                                        FOLLOWPUSH(FOLLOW_save_frame_in_data_block328);
                                                        save_frame(ctx);

                                                        FOLLOWPOP();
                                                        if  (HASEXCEPTION())
                                                        {
                                                            goto ruledata_blockEx;
                                                        }


                                                    }
                                                    break;

                                            }
                                        }

                                    }
                                    break;

                                default:
                                    goto loop17;        /* break out of the loop */
                                    break;
                                }
                            }
                            loop17: ; /* Jump out to here if this rule does not match */


                        }


                    }
                    break;
                case 2:
                    // cif.g:165:10: ({...}? => GLOBAL_ ( ( WHITESPACE )+ ( data_items | save_frame ) )* )
                    {
                        // cif.g:165:10: ({...}? => GLOBAL_ ( ( WHITESPACE )+ ( data_items | save_frame ) )* )
                        // cif.g:165:12: {...}? => GLOBAL_ ( ( WHITESPACE )+ ( data_items | save_frame ) )*
                        {
                            if ( !((!   (SCOPE_TOP(parse))->strict)) )
                            {
                                    CONSTRUCTEX();
                                    EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
                                    EXCEPTION->message      = (void *)"!$parse::strict";
                                    EXCEPTION->ruleName  = (void *)"data_block";


                            }
                             MATCHT(GLOBAL_, &FOLLOW_GLOBAL__in_data_block359);
                            if  (HASEXCEPTION())
                            {
                                goto ruledata_blockEx;
                            }


                            // cif.g:165:40: ( ( WHITESPACE )+ ( data_items | save_frame ) )*

                            for (;;)
                            {
                                int alt20=2;
                                alt20 = cdfa20.predict(ctx, RECOGNIZER, ISTREAM, &cdfa20);
                                if  (HASEXCEPTION())
                                {
                                    goto ruledata_blockEx;
                                }

                                switch (alt20)
                                {
                                case 1:
                                    // cif.g:165:42: ( WHITESPACE )+ ( data_items | save_frame )
                                    {
                                        // cif.g:165:42: ( WHITESPACE )+
                                        {
                                            int cnt18=0;

                                            for (;;)
                                            {
                                                int alt18=2;
                                                switch ( LA(1) )
                                                {
                                                case WHITESPACE:
                                                        {
                                                                alt18=1;
                                                        }
                                                    break;

                                                }

                                                switch (alt18)
                                                {
                                                    case 1:
                                                        // cif.g:165:42: WHITESPACE
                                                        {
                                                             MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_data_block363);
                                                            if  (HASEXCEPTION())
                                                            {
                                                                goto ruledata_blockEx;
                                                            }


                                                        }
                                                        break;

                                                    default:

                                                        if ( cnt18 >= 1 )
                                                        {
                                                            goto loop18;
                                                        }
                                                        /* mismatchedSetEx()
                                                         */
                                                        CONSTRUCTEX();
                                                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                                                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                                                        goto ruledata_blockEx;
                                                }
                                                cnt18++;
                                            }
                                            loop18: ;   /* Jump to here if this rule does not match */
                                        }

                                        // cif.g:165:54: ( data_items | save_frame )
                                        {
                                            int alt19=2;
                                            switch ( LA(1) )
                                            {
                                            case TAG:
                                            case LOOP_:
                                                {
                                                        alt19=1;
                                                }
                                                break;
                                            case SAVE_FRAME_HEADING:
                                                {
                                                        alt19=2;
                                                }
                                                break;

                                            default:
                                                CONSTRUCTEX();
                                                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                                                EXCEPTION->message      = (void *)"";
                                                EXCEPTION->decisionNum  = 19;
                                                EXCEPTION->state        = 0;


                                                goto ruledata_blockEx;
                                            }

                                            switch (alt19)
                                            {
                                                case 1:
                                                    // cif.g:165:56: data_items
                                                    {
                                                        FOLLOWPUSH(FOLLOW_data_items_in_data_block368);
                                                        data_items(ctx);

                                                        FOLLOWPOP();
                                                        if  (HASEXCEPTION())
                                                        {
                                                            goto ruledata_blockEx;
                                                        }


                                                    }
                                                    break;
                                                case 2:
                                                    // cif.g:165:69: save_frame
                                                    {
                                                        FOLLOWPUSH(FOLLOW_save_frame_in_data_block372);
                                                        save_frame(ctx);

                                                        FOLLOWPOP();
                                                        if  (HASEXCEPTION())
                                                        {
                                                            goto ruledata_blockEx;
                                                        }


                                                    }
                                                    break;

                                            }
                                        }

                                    }
                                    break;

                                default:
                                    goto loop20;        /* break out of the loop */
                                    break;
                                }
                            }
                            loop20: ; /* Jump out to here if this rule does not match */


                        }


                    }
                    break;

            }
        }
    }


    // This is where rules clean up and exit
    //
    goto ruledata_blockEx; /* Prevent compiler warnings */
    ruledata_blockEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end data_block */

/**
 * $ANTLR start loop_header
 * cif.g:169:1: loop_header : LOOP_ ( ( WHITESPACE )+ TAG )+ WHITESPACE ;
 */
static void
loop_header(pcifParser ctx)
{
    pANTLR3_COMMON_TOKEN    TAG5;

    /* Initialize rule variables
     */


    TAG5       = NULL;

    {
        // cif.g:170:2: ( LOOP_ ( ( WHITESPACE )+ TAG )+ WHITESPACE )
        // cif.g:170:4: LOOP_ ( ( WHITESPACE )+ TAG )+ WHITESPACE
        {
             MATCHT(LOOP_, &FOLLOW_LOOP__in_loop_header393);
            if  (HASEXCEPTION())
            {
                goto ruleloop_headerEx;
            }

            // cif.g:170:10: ( ( WHITESPACE )+ TAG )+
            {
                int cnt23=0;

                for (;;)
                {
                    int alt23=2;
                alt23 = cdfa23.predict(ctx, RECOGNIZER, ISTREAM, &cdfa23);
                if  (HASEXCEPTION())
                {
                    goto ruleloop_headerEx;
                }

                switch (alt23)
                {
                    case 1:
                        // cif.g:170:12: ( WHITESPACE )+ TAG
                        {
                            // cif.g:170:12: ( WHITESPACE )+
                            {
                                int cnt22=0;

                                for (;;)
                                {
                                    int alt22=2;
                                switch ( LA(1) )
                                {
                                case WHITESPACE:
                                        {
                                                alt22=1;
                                        }
                                    break;

                                }

                                switch (alt22)
                                {
                                    case 1:
                                        // cif.g:170:12: WHITESPACE
                                        {
                                             MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_loop_header397);
                                            if  (HASEXCEPTION())
                                            {
                                                goto ruleloop_headerEx;
                                            }


                                        }
                                        break;

                                    default:

                                        if ( cnt22 >= 1 )
                                        {
                                            goto loop22;
                                        }
                                        /* mismatchedSetEx()
                                         */
                                        CONSTRUCTEX();
                                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                                        goto ruleloop_headerEx;
                                }
                                cnt22++;
                                }
                                loop22: ;       /* Jump to here if this rule does not match */
                            }
                            TAG5 = (pANTLR3_COMMON_TOKEN) MATCHT(TAG, &FOLLOW_TAG_in_loop_header400);
                            if  (HASEXCEPTION())
                            {
                                goto ruleloop_headerEx;
                            }

                            {
                                 (      (SCOPE_TOP(data_items))->curr_loop_headers)->push_back(to_std_string(TAG5));
                            }

                        }
                        break;

                    default:

                        if ( cnt23 >= 1 )
                        {
                            goto loop23;
                        }
                        /* mismatchedSetEx()
                         */
                        CONSTRUCTEX();
                        EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
                        EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


                        goto ruleloop_headerEx;
                }
                cnt23++;
                }
                loop23: ;       /* Jump to here if this rule does not match */
            }
             MATCHT(WHITESPACE, &FOLLOW_WHITESPACE_in_loop_header410);
            if  (HASEXCEPTION())
            {
                goto ruleloop_headerEx;
            }


        }

    }


    // This is where rules clean up and exit
    //
    goto ruleloop_headerEx; /* Prevent compiler warnings */
    ruleloop_headerEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end loop_header */

/**
 * $ANTLR start inapplicable
 * cif.g:179:1: inapplicable : '.' ;
 */
static void
inapplicable(pcifParser ctx)
{
    /* Initialize rule variables
     */


    {
        // cif.g:180:2: ( '.' )
        // cif.g:180:4: '.'
        {
             MATCHT(36, &FOLLOW_36_in_inapplicable424);
            if  (HASEXCEPTION())
            {
                goto ruleinapplicableEx;
            }


        }

    }


    // This is where rules clean up and exit
    //
    goto ruleinapplicableEx; /* Prevent compiler warnings */
    ruleinapplicableEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end inapplicable */

/**
 * $ANTLR start unknown
 * cif.g:182:1: unknown : '?' ;
 */
static void
unknown(pcifParser ctx)
{
    /* Initialize rule variables
     */


    {
        // cif.g:182:9: ( '?' )
        // cif.g:182:11: '?'
        {
             MATCHT(37, &FOLLOW_37_in_unknown433);
            if  (HASEXCEPTION())
            {
                goto ruleunknownEx;
            }


        }

    }


    // This is where rules clean up and exit
    //
    goto ruleunknownEx; /* Prevent compiler warnings */
    ruleunknownEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end unknown */

/**
 * $ANTLR start value
 * cif.g:184:1: value : ( inapplicable | unknown | '-' | char_string | NUMERIC | text_field );
 */
static cifParser_value_return
value(pcifParser ctx)
{
    cifParser_value_return retval;

    /* Initialize rule variables
     */


    retval.start = LT(1); retval.stop = retval.start;

    {
        {
            //  cif.g:184:8: ( inapplicable | unknown | '-' | char_string | NUMERIC | text_field )

            ANTLR3_UINT32 alt24;

            alt24=6;

            switch ( LA(1) )
            {
            case 36:
                {
                        alt24=1;
                }
                break;
            case 37:
                {
                        alt24=2;
                }
                break;
            case 38:
                {
                        alt24=3;
                }
                break;
            case CHAR_STRING:
                {
                        alt24=4;
                }
                break;
            case NUMERIC:
                {
                        alt24=5;
                }
                break;
            case SEMI_COLON_TEXT_FIELD:
                {
                        alt24=6;
                }
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 24;
                EXCEPTION->state        = 0;


                goto rulevalueEx;
            }

            switch (alt24)
            {
                case 1:
                    // cif.g:184:10: inapplicable
                    {
                        FOLLOWPUSH(FOLLOW_inapplicable_in_value443);
                        inapplicable(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }


                    }
                    break;
                case 2:
                    // cif.g:184:25: unknown
                    {
                        FOLLOWPUSH(FOLLOW_unknown_in_value447);
                        unknown(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }


                    }
                    break;
                case 3:
                    // cif.g:184:35: '-'
                    {
                         MATCHT(38, &FOLLOW_38_in_value451);
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }


                    }
                    break;
                case 4:
                    // cif.g:184:41: char_string
                    {
                        FOLLOWPUSH(FOLLOW_char_string_in_value455);
                        char_string(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }


                    }
                    break;
                case 5:
                    // cif.g:184:56: NUMERIC
                    {
                         MATCHT(NUMERIC, &FOLLOW_NUMERIC_in_value460);
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }


                    }
                    break;
                case 6:
                    // cif.g:184:66: text_field
                    {
                        FOLLOWPUSH(FOLLOW_text_field_in_value464);
                        text_field(ctx);

                        FOLLOWPOP();
                        if  (HASEXCEPTION())
                        {
                            goto rulevalueEx;
                        }


                    }
                    break;

            }
        }
    }


    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;
    retval.stop = LT(-1);

    if  (HASEXCEPTION())
    {
        /* catch(decl,action)
         */
        {


        }


    }
    else
    {
    }

    return retval;
}
/* $ANTLR end value */

/**
 * $ANTLR start char_string
 * cif.g:189:1: char_string : CHAR_STRING ;
 */
static void
char_string(pcifParser ctx)
{
    /* Initialize rule variables
     */


    {
        // cif.g:190:2: ( CHAR_STRING )
        // cif.g:190:4: CHAR_STRING
        {
             MATCHT(CHAR_STRING, &FOLLOW_CHAR_STRING_in_char_string482);
            if  (HASEXCEPTION())
            {
                goto rulechar_stringEx;
            }


        }

    }


    // This is where rules clean up and exit
    //
    goto rulechar_stringEx; /* Prevent compiler warnings */
    rulechar_stringEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end char_string */

/**
 * $ANTLR start text_field
 * cif.g:192:1: text_field : SEMI_COLON_TEXT_FIELD ;
 */
static void
text_field(pcifParser ctx)
{
    /* Initialize rule variables
     */


    {
        // cif.g:193:2: ( SEMI_COLON_TEXT_FIELD )
        // cif.g:193:4: SEMI_COLON_TEXT_FIELD
        {
             MATCHT(SEMI_COLON_TEXT_FIELD, &FOLLOW_SEMI_COLON_TEXT_FIELD_in_text_field492);
            if  (HASEXCEPTION())
            {
                goto ruletext_fieldEx;
            }


        }

    }


    // This is where rules clean up and exit
    //
    goto ruletext_fieldEx; /* Prevent compiler warnings */
    ruletext_fieldEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }


    return ;
}
/* $ANTLR end text_field */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
