import libtbx
Import("env_base", "env_etc")
env = env_base.Copy(
  CXXFLAGS=env_etc.cxxflags_base,
  LIBS=["cctbx"]+env_etc.libm,
  LIBPATH=["#lib"]
)

env_etc.include_registry.append(
  env=env,
  paths=env_etc.cctbx_common_includes)

envlm = env.Copy(
  LIBS=env_etc.libm
)

lib_asu_sources = [
  "cut.cpp",
  "reference_table.cpp",
  "direct_space_asu.cpp"
]

if (env_etc.static_libraries): builder = envlm.StaticLibrary
else:                          builder = envlm.SharedLibrary

builder(
  target="#lib/cctbx_sgtbx_asu",
  source=lib_asu_sources)


source = "tst_asu"
target = "cctbx." + source
env.Prepend(LIBS=["cctbx_sgtbx_asu"])
exe = env.Program(
  target="#exe_dev/"+env["PROGPREFIX"]+target+env["PROGSUFFIX"],
  source=source+".cpp")
libtbx.env.write_dispatcher_in_bin(
  source_file=exe[0].get_abspath(),
  target_file=target)


if (not env_etc.no_boost_python):
  Import("env_cctbx_boost_python_ext")
  env_bpl = env_cctbx_boost_python_ext.Copy()
  env_etc.include_registry.append(
    env=env_bpl,
    paths=env_etc.cctbx_common_includes)
  env_bpl.Prepend(LIBS=["cctbx", "cctbx_sgtbx_asu"])
  env_bpl.SharedLibrary(
    target="#lib/cctbx_sgtbx_asu_ext",
    source=["asu_ext.cpp"])

