/*! \page page_installation_compilers cctbx - C++ compiler notes

<hr>

After a long development period that lasted more than a decade, the
international standard for the C++ programming language was finally
approved in November 1997 (see
<a href="http://www.research.att.com/~bs/iso_release.html">Bjarne
Stroustrup's page</a>).
Even in the computing world this is not a long time ago, and many
compilers are still not fully standard compliant. This is reflected by
the necessity for the sections below. Fortunately, most of the
deficiencies are not too difficult to fix.

<hr>

\section compilers_vc60 Microsoft Visual C++ 6.0 Service Pack 4 & 5

\par
The %cctbx has only been tested with
<a href="http://msdn.microsoft.com/vstudio/sp/vs6sp4/">Service Pack 4</a>
and
<a href="http://msdn.microsoft.com/vstudio/sp/vs6sp5/">Service Pack 5</a>.
The service packs are freely available.
It is not known if the %cctbx installation works with the original
Visual C++ 6.0 CD distribution.

<hr>

\section compilers_mingw32 Mingw32 (a free compiler for Windows)

\par
Mingw32 (Minimal GNU Win32) is a gcc 2.95.2 based compiler for Windows.
To install mingw32, follow the instructions at:

  http://starship.python.net/crew/kernr/mingw32/Notes.html

In particular, install these three files:

<ul>
<li>ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/gcc-2.95.2/gcc-2.95.2-msvcrt.exe
<li>ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/gcc-2.95.2/fixes/quote-fix-msvcrt.exe
<li>http://starship.python.net/crew/kernr/mingw32/Python-1.5.2-mingw32.zip
</ul>

Unpack the first two archives in the
<strong>suggested default locations</strong>
and update your <tt>PATH</tt> by editing <tt>C:\autoexec.bat</tt>.
For example:

\verbatim
        set PATH="C:\gcc-2.95.2\bin;\%PATH%"
\endverbatim

Unpack the third archive in <tt>C:\usr</tt>. If you want to be
certain that the changes in <tt>C:\autoexec.bat</tt> take full
effect, reboot your system. To test the installation, enter
<tt>gcc --version</tt> at a DOS command prompt.
You should see the output <tt>2.95.2</tt>.

If the third archive is unpacked in a location other than
<tt>C:\usr</tt>, the \c MINGW32_USR macro definition in the
<tt>configuration_mingw32</tt> file in the \c cctbx/build directory has
to be adjusted accordingly.

<strong>Warning: mingw32 C++ exception handling is known to fail if
optimization is turned on. The error messages (if any) are misleading.
Therefore the mingw32 compiler should only be used with the debug
option (<tt>-g</tt>).</strong>

The default mingw32 installation includes custom include files
and a custom runtime library for Python 1.5.2. To build the include
files and the library for other versions of Python, follow these
instructions:

<ol>

<li>Install mingw32 and put the bin directory in your path.
<li>Install Python 2.1.1 (or another version).
<li>Download and unzip the file at
    http://starship.python.net/crew/kernr/mingw32/pexports-0.42h.zip .
    A newer version is available at
    http://www.is.lg.ua/~paul/devel/binutils.html .
<li><tt>cd <i>pexports_src_directory</i></tt>
<li>\c make
<li><tt>pexports.exe C:\WINNT\system32\python21.dll > python_temp</tt>
<li><tt>dlltool -d python_temp -l libpython21.a</tt>
<li>Move this library to an appropriate path, e.g. <tt>C:\usr\lib</tt>.
<li>For consistency with the mingw32 directory structure
    for Python 1.5.2, copy the Python 2.1 include files in
    <tt>C:\Python21\include</tt> to an appropriate path, e.g.
    <tt>C:\usr\include\python2.1</tt>.

</ol>

<hr>

\section compilers_linux Linux (gcc 2.95.2, gcc 2.95.3, gcc 2.96, gcc 3.0.x)

\par
Log on to your Linux system and enter <tt>gcc --version</tt>.  If the
output is <tt>2.95.2</tt> or higher, chances are that the compiler will
work for you, at least in debug mode (<tt>-g</tt> option). However,
there are known problems with some versions of gcc 2.96 (see
below). With all gcc versions prior to gcc 3.0, exception
handling is notoriously unreliable. Therefore the general
recommendation is to use the latest gcc version (3.0.2 at
the point of this writing).

\par
The general procedure for installing gcc is:

\verbatim
        cd /scratch
        gunzip -c gcc-3.0.2.tar.gz | tar xf -
        mkdir gccbuild
        cd gccbuild
        ../gcc-3.0.2/configure
        make bootstrap
        make install
\endverbatim

This will install gcc in <tt>/usr/local</tt>. To install
in a different location, use, e.g.:

\verbatim
        ../gcc-3.0.2/configure --prefix=/usr/local/gcc-3.0.2
\endverbatim

To use this installation, it is important to define both the command
line search path and the \c LD_LIBRARY_PATH. An example setup script
for \c csh is:

\verbatim
set path=(/usr/local/gcc-3.0.2/bin $path)
if ( $?LD_LIBRARY_PATH ) then
  setenv LD_LIBRARY_PATH "/usr/local/gcc-3.0.2/lib:${LD_LIBRARY_PATH}"
else
  setenv LD_LIBRARY_PATH "/usr/local/gcc-3.0.2/lib"
endif
\endverbatim

Installing in a special location such as <tt>/usr/local/gcc-3.0.2</tt>
has the advantage that several compiler versions can be kept and used
simultaneously without generating conflicts. The desired compiler is
easily activated by <tt>source</tt>-ing the corresponding setup
script.

\par
Finally, the time required for building gcc (often hours) can be
significantly reduced if only the C and the C++ compilers are built:

\verbatim
        ../gcc-3.0.2/configure --prefix=/usr/local/gcc-3.0.2 --enable-languages=c,c++
\endverbatim

\subsection redhat_70 RedHat 7.0

The information in this section was kindly provided by
<a href="http://www.ysbl.york.ac.uk/~cowtan/"
>Kevin Cowtan</a>.
<p>
The compiler that ships with RedHat 7.0 (gcc 2.96) is a
development snapshot that is
<a href="http://gcc.gnu.org/gcc-2.96.html">not recommended</a>
for production use. However, if the
<a href="http://www.redhat.com/support/errata/rh7-errata-bugfixes.html"
>Red Hat Linux 7.0 Bug Fixes</a>
are installed, gcc 2.96 can be used to install the %cctbx.
In particular, you need to install
<ul>
<li><a href="http://www.redhat.com/support/errata/RHBA-2000-132.html"
    >Bug fixing update of GCC 2.96</a>
<li><a href="http://www.redhat.com/support/errata/RHBA-2000-079.html"
    >Update to official glibc 2.2</a>
</ul>
Please refer to the
<a href="http://www.redhat.com/support/errata/rh7-errata-bugfixes.html"
>RedHat web pages</a> for more information.

<hr>

\section compilers_compaq_tru64 Compaq Tru64

\par
The Compaq C++ compiler that is being used for the development of
the %cctbx is
<tt>Compaq C++ V6.2-024</tt>
for Tru64 Unix 5.x. This is an excellent compiler
that is based on a high-quality
<a href="http://www.edg.com/">EDG</a>
front-end.
Unfortunately the standard "C++ C headers" such as
<tt><cstdio></tt> or <tt><cstdlib></tt> are missing.
However, a workaround is provided by the
<a href="http://www.boost.org/libs/compatibility/index.html"
>Boost.Compatibility library</a>.

Unfortunately, the latest Compaq C++ compiler (V6.3) cannot
be used to install the %cctbx. This issue is being resolved.

gcc 3.0.2 (we used the --enable-languages=c,c++ configure
option) can be used for installing the %cctbx.

<hr>

\section compilers_silicon_graphics_irix Silicon Graphics IRIX 6.5

\par
The Silicon Graphics C++ compiler that is being used for the
development of the %cctbx is
<tt>MIPSpro Compilers: Version 7.3.1.2m</tt>.
This compiler is based on a high-quality
<a href="http://www.edg.com/">EDG</a>
front-end.
Unfortunately the standard "C++ C headers" such as
<tt><cstdio></tt> or <tt><cstdlib></tt> are missing.
However, a workaround is provided by the
<a href="http://www.boost.org/libs/compatibility/index.html"
>Boost.Compatibility library</a>.

\par
Both gcc 2.95.2 and gcc 2.95.3 cannot be used to compile the
%cctbx under IRIX. Both versions of gcc issue an "Internal compiler
error." Attempts to install gcc 3.0.2 have not been successful.

<hr>

\par
R.W. Grosse-Kunstleve, November 2001

*/
