/*! \page page_installation_adv cctbx - Advanced installation and development

<hr>

The fast-track installation scripts use a lower-level build system that
is designed to support efficient cross-platform development.
Boost.Python and the %cctbx can be installed and maintained manually
with the commands shown in the following sections. In addition,
commands for rebuilding individual components are introduced.

\par
The design of the cross-platform build system is motivated by the goal
to minimize dependencies on external software packages, and based on
the assumptions that:

<ul>
<li>Python is essential for the projects that are based on the %cctbx.

<li>A (dumb) version of <tt>make</tt> is available on all platforms
    of interest for the projects that are based on the %cctbx.
</ul>

Python is used to automatically generate makefiles for a variety of
platforms, based on simple, platform independed representations of the
compilation dependencies (<tt>Dependencies.py</tt>), and a set of rules
that are expressed as a Python script
(<tt>%cctbx/build/makefile_generator.py</tt>).

<hr>

\section installation_boost_python Boost.Python installation

\par
Assuming that the boost distribution is unpacked in your home
directory, Boost.Python can be installed and tested with the following
sequence of commands:

\verbatim
        mkdir boost
        cd boost
        cp ~/boost/libs/python/build/linux_gcc.mak Makefile
        make softlinks
        make
        make test
\endverbatim

\par
If pathnames or compiler and linker options need to be adjusted,
edit the <tt>Makefile</tt> before entering <tt>make</tt>.

\par
The command <tt>make softlinks</tt> creates softlinks to the central
distribution. This facilitates cross-platform development: changes in
the central distribution are immediately effective in all build
directories. If this is not desired, <tt>make cp</tt> can be used
instead. Since Windows does not support softlinks, <tt>make copy</tt>
has to always be used.

\par
For efficient development it is important to add all header
file dependency rules to the Makefile. This can be done in
the following way:

\verbatim
        cp Makefile Makefile.nodepend
        make -f Makefile.nodepend depend > Makefile
\endverbatim

\par
If this new <tt>Makefile</tt> is used, changes to any of the
header files used will automatically trigger the recompilation of all
source code files that directly or indirectly use the modified header
files.

\par
Other commands available include:

<hr>

<dl>
<dt><tt>make clean</tt>
<dd>Remove all files that are generated by
   <tt>make</tt> (object files, executables, libraries, etc.) (Unix, Windows)

<dt><tt>make unlink</tt>
<dd>Remove all softlinks that are generated by
    <tt>make softlinks</tt>. (Unix)

<dt><tt>make rm</tt>
<dd>Remove all files that are copied by
    <tt>make cp</tt>. (Unix)

<dt><tt>make del</tt>
<dd>Remove all files that are copied by
    <tt>make copy</tt>. (Windows)

</dl>

<hr>

\section installation_cctbx cctbx installation

Assuming that the boost and %cctbx distribution is unpacked in your home
directory, the %cctbx can be installed and tested with the following
sequence of commands:

\verbatim
        mkdir cctbx
        cd cctbx
        cp ~/cctbx/build/configuration_linux_gcc configuration
        python ~/cctbx/build/boot.py
        python make.py softlinks
        python make.py compile_all
        python test.py
\endverbatim

\par
The <tt>boot.py</tt> script will create individual subdirectories for
each toolbox (currently %eltbx, %sgtbx, %uctbx) and automatically generate
Makefiles in each of these subdirectories (see below for details).

\par
Pathnames, compiler options and linker options can be adjusted by
editing the <tt>configuration</tt> file. The first line of the
<tt>configuration</tt> file is a platform identifier (e.g.
<tt>linux_gcc</tt>). The rest of the <tt>configuration</tt> file is
pasted literally into the automatically generated makefiles.
However, to simplify the configuration, two meta symbols are recognized
and replaced:

<hr>

<dl>
<dt><tt>@(ROOT)</tt>
<dd>This is replaced by the pathname of the directory
    in which the %cctbx distribution was unpacked. For example, if you
    unpacked %cctbx in your home directory, <tt>@(ROOT)</tt> will be
    substituted by the pathname of your home directory.

<dt><tt>@(CWD)</tt>
<dd>This is replaced by the pathname of the directory
    in which the <tt>configuration</tt> file is located
    ("current working directory").

</dl>

<hr>

\par
The make commands supported by the automatically generated makefiles
<i>in each subdirectory</i> (%eltbx, %sgtbx, %uctbx, examples/cpp) are a
super-set of the commands supported by the Boost.Python makefiles as
documented above.  Additional commands include:

<hr>

<dl>
<dt><tt>make libraries</tt>
<dd>Builds only the library files, e.g.
    <tt>libuctbx.a</tt>. Does not require
    Python (but then again you used Python
    to generate the makefile).

<dt><tt>make executables</tt>
<dd>Builds only the executables, if any.
    Currently the executables are trivial
    and only useful for debugging.

<dt><tt>make boost_python_modules</tt>
<dd>Builds the Python modules.
    Requires <tt>libboost_python.a</tt> (Unix)
    or <tt>boost_python.lib</tt> (Windows).

<dt><tt>make examples</tt>
<dd>Builds the examples. Similar to
    <tt>make executables</tt>, but
    links against the %cctbx libraries.

</dl>

<hr>

\par
The script <tt>make.py</tt> can be used to execute certain make
commands in all subdirectories. One example is the <tt>python make.py
softlinks</tt> command used above. Additional keywords are supported
that trigger several individual build steps (e.g. <tt>python make.py
compile_all</tt>).

\par
Keywords supported by <tt>make.py</tt> include:

<hr>

<dl>
<dt><tt>softlinks</tt>
<dt><tt>unlink</tt>
<dt><tt>cp</tt>
<dt><tt>rm</tt>
<dt><tt>copy</tt>
<dt><tt>del</tt>
<dt><tt>depend</tt>
<dd>See documentation for Boost.Python makefile.

<dt><tt>compile</tt>
<dd>Calls <tt>make</tt> (with no arguments) in
    the toolbox subdirectories (i.e. %eltbx, %sgtbx, %uctbx).

<dt><tt>libdir</tt>
<dd>Copies all %cctbx libraries (i.e. <tt>libuctbx.a</tt>)
    to the subdirectory <tt>lib</tt>.

<dt><tt>libpythondir</tt>
<dd>Copies all %cctbx Python modules (i.e. <tt>uctbx.so</tt>)
    to the subdirectory <tt>lib/python</tt>.

<dt><tt>compile_examples</tt>
<dd>Calls <tt>make</tt> (with no arguments) in
    the <tt>examples/cpp</tt> subdirectory.

<dt><tt>compile_all</tt>
<dd>Equivalent to the sequence <tt>compile</tt>,
    <tt>libdir</tt>, <tt>libpythondir</tt>, <tt>compile_examples</tt>.

</dl>

<hr>

\section development_cctbx cctbx development

The %cctbx makefiles are automatically generated by a script
<tt>makefile_generator.py</tt> in the %cctbx <tt>build</tt> directory.
This script obtains information from files <tt>Dependencies.py</tt> in
the distribution directory tree (e.g.
<tt>%cctbx/uctbx/Dependencies.py</tt>). If new files are added to a
subdirectory, the corresponding file <tt>Dependencies.py</tt> has to be
updated, and <tt>boot.py</tt> executed again in each build directory.
The structure of the <tt>Dependencies.py</tt> files is very simple.
Very basic knowledge of Python should be sufficient to understand how
to modify the files.

<hr>

\section new_platform Adding support for a new platform

In favorable cases, adding support for a new platform can be achieved
by providing a new Boost.Python makefile and a modified %cctbx
<tt>configuration</tt> file. However, in general it will be necessary
to also update the <tt>%cctbx/build/makefile_generator.py</tt> script.
This will not always be a trivial task.

\par
An alternative approach is to manually derive new %cctbx makefiles
starting from the makefiles for one of the supported platforms.  If you
do this, please e-mail the new makefiles to cctbx@cci.lbl.gov . This
will enable us to make the required modifications to the
<tt>makefile_generator.py</tt> script, and to provide future
support for your platform.

<hr>

\par
R.W. Grosse-Kunstleve, April 2001

*/
