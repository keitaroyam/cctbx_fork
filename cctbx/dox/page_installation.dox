/*! \page page_installation Installation

<hr>

\section installation_overview Overview

The cctbx is being used on these platforms:

<ul>
<li>Windows 98 and Windows 2000 with Microsoft Visual C++ 6.0 Service Pack 4
<li>Windows 98 and Windows 2000 with MINGW32 (a gcc-2.95.2 derivative)
<li>x86 RedHat Linux 6.1 with gcc-2.95.2
<li>x86 Debian Linux 2.2 with gcc-2.95.2
<li>sparc64 Debian Linux 2.2 with gcc-2.95.2
<li>Compaq Tru64 Unix with Compaq C++ V6.2 (cxx)
<li>Silicon Graphics IRIX 6.5 with MIPSpro Compilers Version 7.3.1.1m (CC)
</ul>

\par
The cctbx is written in ANSI C++ and should therefore compile on most
platforms where a standard-compliant C++ compiler is available. The
cctbx build system supports simultaneous compilation on multiple
platforms and is designed to make it easy to add support for additional
platforms.

\par
The core of the cctbx is written in pure ANSI C++ and can be used as a
pure C++ library. However, the cctbx is intended to be used in a Python
environment. This is, the cctbx also includes Python bindings for most
high-level classes.

\par
The cctbx requires the Boost library. This open-source library is a
high-quality, peer-reviewed collection of generally useful C++ template
libraries. Currently, the cctbx uses three components of Boost:

<a href="http://www.boost.org/libs/array/array.html">Boost.Array</a>,
<a href="http://www.boost.org/libs/rational/rational.html">Boost.Rational</a>,
<a href="http://www.boost.org/libs/python/doc/index.html">Boost.Python</a>.

\par
Boost.Array and Boost.Rational are required even if the cctbx is used
as a pure C++ library. However, in that case it is sufficient to add
the Boost include directory to the include path.

\par
If the cctbx Python bindings are used, the support for Boost.Python has
to be compiled before the cctbx can be linked. This is, the modules
that supply the Python bindings are linked against a file
libboost_python.a (Unix) or boost_python.lib (Microsoft Visual C++).

\par
Of course, Python itself is also required for compiling and using the
cctbx Python bindings. Currently, Python version 1.5.2 is used in the
development. Some limited testing has been done with Python 2.0. It is
expected that the cctbx is fully functional with Python 2.0.

\section installing_compilers Compilers

Each of the compilers or operating systems in the list below needs some
special attention.

\par
<strong>Please read the applicable section(s) very carefully!</strong>

<ul>
  <li>\ref compilers_vc60
  <li>\ref compilers_mingw32
  <li>\ref compilers_linux
  <li>\ref compilers_compaq_tru64
  <li>\ref compilers_silicon_graphics_irix
</ul>

\section installing_python Installing Python

In theory, installing Python is only required if the cctbx Python
bindings are to be used. However, the cctbx build system uses Python to
automatically generate Makefiles. Creating the Makefiles by hand would
be very cumbersome, especially if more than one compiler or operating
system is used. In contrast, installing Python is very easy on all the
platforms listed above. Therefore it is highly recommended to always
install Python before installing the cctbx.

\par
On RedHat and Debian Linux systems, Python 1.5.2 is part of the
operating system (<tt>/usr/bin/python</tt>). This pre-installed version
of Python can be used for installing the cctbx. Installation
instructions for other platforms are provided here:

  \ref installation_python_windows

  \ref installation_python_unix

\section installing_fast_track Fast-track installation of the cctbx including Boost

The cctbx distribution includes a set of "fast track" csh and Python
installation scripts for all supported configurations. These scripts
can be used if the following assumptions are valid:

<ul>
<li>Both the cctbx and the boost distributions are unpacked in the same
    directory, and the directory names are "cctbx" and "boost" (i.e.
    have not been changed). E.g.:<pre>
        mkdir development
        cd development
        gunzip -c boost_*.tar.gz | tar xf -
        gunzip -c cctbx_*.tar.gz | tar xf -</pre>

<li>For the configurations <tt>tru64_cxx</tt> and <tt>irix_CC</tt>,
    the missing C++ C header files are installed in the subdirectory
    <tt>C++_C_headers</tt> of the same directory where boost and cctbx
    were unpacked, e.g. <tt>development/C++_C_headers</tt> in the
    example above.

<li>Python version 1.5.2 is installed in these configuration specific
    locations:
    <ul>
      <li><tt>fast_track_vc60.py: "C:\Program files\Python"</tt>
      <li><tt>fast_track_mingw32.py: "C:\Program files\Python"</tt>
      <li><tt>fast_track_linux_gcc.csh: /usr</tt>
      <li><tt>fast_track_tru64_cxx.csh: /usr/local/Python-1.5.2</tt>
      <li><tt>fast_track_irix_CC.csh: /usr/local/Python-1.5.2</tt>
    </ul>
    See
    \ref installation_python_windows
    and
    \ref installation_python_unix
    for comments on these choices of pathnames.
</ul>

If any of the assumptions is not valid, you have to adjust the
pathnames in the Boost.Python makefile and the
<tt>configuration</tt> file for the cctbx, and execute the commands in
the fast track scripts manually. This is explained in more detail in
the \ref page_installation_advanced section.

Both Boost.Python and the cctbx can now be installed with just one
command by invoking the appropriate fast track script with the
absolute path name. For example on Linux:<pre>
        cd /scratch/build
        /home/user/development/cctbx/build/fast_track_linux_gcc.csh</pre>

The fast track script creates two subdirectories
<tt>/scratch/build/linux_gcc/boost</tt> and
<tt>/scratch/build/linux_gcc/cctbx</tt> where the libraries and Python
modules are built. Compiling the packages outside the distribution
directory trees has two important advantages:

<ul>
<li>The packages can be compiled on multiple platforms simultaneously.

<li>The compilation directory can be created on a local file system,
    as opposed to a network file system. In general this means a
    huge time saving.
</ul>

\par
The build is successful if it finishes with the following output:<pre>
11 12 13 90 100 90
x,y,z
-x,y,-z
x+1/2,y+1/2,z
-x+1/2,y+1/2,-z
11 12 13 90 100 90
x,y,z
-x,y,-z
x+1/2,y+1/2,z
-x+1/2,y+1/2,-z
Done.</pre>

\par
This is the output from <tt>getting_started.cpp</tt> and
<tt>getting_started.py</tt> in the <tt>cctbx/examples</tt> directory.

\par
In the example, the file <tt>libboost_python.a</tt> is created in
<tt>/scratch/build/linux_gcc/boost</tt>.
The cctbx libraries are created in the subdirectory
<tt>/scratch/build/linux_gcc/cctbx/lib</tt>.
The cctbx Python modules are created in the subdirectory
<tt>/scratch/build/linux_gcc/cctbx/lib/python</tt>.
All these files can be moved to convenient locations, such as
<tt>/usr/local/lib</tt>.

\par
The makefile that is created in
<tt>/scratch/build/linux_gcc/cctbx/examples/cpp</tt> can be used as a
starting point for creating makefiles for your own applications.

\par
The fast track build procedure for the other supported configurations
is very similar. The major difference is that on Windows Python is
used for the fast track script instead of csh. For example:<pre>
        cd \\scratch\\build
        python \development\cctbx\build\fast_track_vc60.py</pre>
</pre>

\par
The resulting directory structure in <tt>\\scratch\\build\\vc60</tt> is
similar to the one for the Unix systems.

<hr>

\par
R.W. Grosse-Kunstleve, April 2001

*/
