/*! \page page_installation cctbx - Installation

<hr>

\section installation_overview Overview

The %cctbx has been tested on many platforms including:

<ul>
<li>Windows 98 and Windows 2000 with Microsoft Visual C++ 6.0 Service Pack 4
<li>Windows 98 and Windows 2000 with mingw32 (a gcc-2.95.2 derivative)
<li>x86 RedHat Linux 6.1 with gcc-2.95.2 and gcc-2.95.3
<li>x86 RedHat Linux 7.x with gcc-2.96 and gcc-3.0.2
<li>Alpha RedHat Linux 7.0 with gcc-2.96
<li>x86 Debian Linux 2.2 with gcc-2.95.2
<li>sparc64 Debian Linux 2.2 with gcc-2.95.2
<li>Compaq Tru64 Unix with Compaq C++ V6.2 (cxx)
<li>Silicon Graphics IRIX 6.5 with MIPSpro Compilers Version 7.3.1.1m (CC)
</ul>

\par
<strong>Precompiled %cctbx Python modules for Windows
(<tt>cctbx_win32.exe</tt>) are available at the SourceForge
<a href="http://sourceforge.net/project/showfiles.php?group_id=24107"
>download page</a></strong>.

\par
The %cctbx is written in ISO C++ and should therefore compile on most
platforms where a standard-compliant C++ compiler is available. The
%cctbx build system supports simultaneous compilation on multiple
platforms and is designed to make it easy to add support for additional
platforms.

\par
The core of the %cctbx is written in pure ISO C++ and can be used as a
pure C++ library. However, the %cctbx is intended to be used in a Python
environment. This is, the %cctbx also includes Python bindings for most
high-level classes.

\par
The %cctbx requires the Boost library. This open-source library is a
high-quality, peer-reviewed collection of generally useful C++ template
libraries. Currently, the %cctbx uses four components of Boost:

<a href="http://www.boost.org/libs/compatibility/index.html">Boost.Compatibility</a>,
<a href="http://www.boost.org/libs/array/array.html">Boost.Array</a>,
<a href="http://www.boost.org/libs/rational/rational.html">Boost.Rational</a>,
<a href="http://www.boost.org/libs/python/doc/index.html">Boost.Python</a>.

\par
The Boost.Compatibility library provides workarounds for compiler
problems on certain platforms. Boost.Array and Boost.Rational are
required even if the %cctbx is used as a pure C++ library. However,
in that case it is sufficient to add the Boost include directory to
the include path.

\par
If the %cctbx Python bindings are used, support for Boost.Python has
to be compiled before the modules of the %cctbx can be linked. However,
this is fully integrated into the %cctbx build procedure.

\par
Of course, Python itself is also required for compiling and
using the %cctbx Python bindings. Python versions 1.5.2,
2.0.x and 2.1.x have all been used successfully. The %cctbx
build system adjusts automatically to the Python version
that it is invoked with.

<hr>

\section installing_compilers Compilers

Each of the compilers or operating systems in the list below needs some
special attention.

\par
<strong>Please read the applicable section(s) very carefully!</strong>

<ul>
  <li>\ref compilers_vc60
  <li>\ref compilers_mingw32
  <li>\ref compilers_linux
  <li>\ref compilers_compaq_tru64
  <li>\ref compilers_silicon_graphics_irix
</ul>

<hr>

\section installing_python Installing Python

In theory, installing Python is only required if the %cctbx Python
bindings are to be used. However, the %cctbx build system uses Python to
automatically generate Makefiles. Creating the Makefiles by hand would
be very cumbersome, especially if more than one compiler or operating
system is used. In contrast, installing Python is very easy on all the
platforms listed above. Therefore it is highly recommended to always
install Python before installing the %cctbx.

\par
On RedHat and Debian Linux systems, Python 1.5.2 is part of the
operating system (<tt>/usr/bin/python</tt>). This pre-installed version
of Python can be used for installing the %cctbx. Installation
instructions for other platforms are provided here:

  \ref installation_python_windows

  \ref installation_python_unix

<hr>

\section installation_directory_separation Separation of distribution and build directories

The %cctbx build system is designed to support efficient cross-platform
development. Therefore the <i>distribution directory</i> and the
<i>build directory</i> for a given platform are cleanly separated.
For example:

<ul>
<li>The Boost and %cctbx distribututions are installed in
    \c /home/user/development:
    <ul>
    <li> \c /home/user/development/boost
    <li> \c /home/user/development/cctbx
    </ul>
<li>The build directory is \c /scratch/build
</ul>

Building (i.e. compiling and linking) the %cctbx outside the
distribution directory tree has two important advantages:

<ul>
<li>The packages can be compiled on multiple platforms simultaneously.

<li>The compilation directory can be created on a local file system,
    as opposed to a network file system. In general this means a
    huge time saving.
</ul>

\par
The path names above are just examples. The distribution directory and
the build directory can be located anywhere in the file system. The
distribution directory is meant to be platform independent. The build
directory is meant to be platform dependent. Ideally, there should
only be one central distribution directory. In contrast, the number
of build directories that refer to the central distribution directory
can easily get quite large. There will be at least one build directory
for each hardware architecture or operating system. On each platform,
there could be build directories for a debug build, a release build,
different versions of Python, etc. The separation of the distribution
directory and the build directories ensures that this situation
is manageable.

<hr>

\section installation_fast_track Fast-track installation of the cctbx

The %cctbx distribution includes a "fast track" Python script for
installation on all supported configurations. This script can be
used if the following assumptions are valid:

<ul>
<li>Python version 1.5.2 or higher is installed.
<li>Both the %cctbx and the boost distributions are unpacked in the same
    directory, and the directory names are "%cctbx" and "boost". E.g.:

\verbatim
        mkdir development
        cd development
        gunzip -c boost_1_25_1.tar.gz | tar xf -
        mv boost_1_25_1 boost
        gunzip -c cctbx_1_0.tar.gz | tar xf -
        mv cctbx_1_0 cctbx
\endverbatim

    Note that both the boost and the %cctbx directory are renamed.
</ul>

If these assumptions are not valid, the pathnames in the %cctbx
<tt>configuration</tt> file have to be adjusted manually.
This is explained in the following section.

If the assumptions above are valid, the %cctbx can be installed with
just one command. For example on Linux:

Example directory structure:
<ul>
<li>The Boost and %cctbx distribututions are installed in
    \c /home/user/development
<li>The build directory is \c /scratch/build
</ul>

\verbatim
        cd /scratch/build
        /home/user/development/cctbx/build/fast_track.py unix_gcc
\endverbatim

The fast track script creates a subdirectory
<tt>/scratch/build/%cctbx</tt>
where the libraries and Python modules are built. The build is
successful if it finishes with the following output:

\verbatim
11 12 13 90 100 90
x,y,z
-x,y,-z
x+1/2,y+1/2,z
-x+1/2,y+1/2,-z
11 12 13 90 100 90
x,y,z
-x,y,-z
x+1/2,y+1/2,z
-x+1/2,y+1/2,-z
Done.
\endverbatim

\par
This is the output from <tt>getting_started.cpp</tt> and
<tt>getting_started.py</tt> in the <tt>%cctbx/examples</tt> directory.

\par
In the example, the %cctbx libraries and the (Boost.Python library) are
created in the subdirectory
<tt>/scratch/build/%cctbx/lib</tt>.
The %cctbx Python modules are created in the subdirectory
<tt>/scratch/build/%cctbx/lib_python/%cctbx</tt>.
All these files can be moved to convenient locations, such as
<tt>/usr/local/lib</tt>.

\par
To conveniently access the %cctbx Python modules, the environment
variable <tt>PYTHONPATH</tt> should be defined in, e.g. <tt>.cshrc</tt>
or <tt>C:\autoexec.bat</tt>. For example on a Unix system:

\verbatim
        setenv PYTHONPATH "/usr/local/cctbx-1.0/lib_python"
\endverbatim
Under Windows:

\verbatim
        set PYTHONPATH=C:\tools\cctbx-1.0\lib_python
\endverbatim

\par
The makefile that is created in
<tt>/scratch/build/%cctbx/examples/cpp</tt> can be used as a
starting point for creating makefiles for your own applications.

\par
The fast track build procedure for the other supported configurations
is very similar. Available configurations are:
<ul>
<li>unix_gcc
<li>irix_CC
<li>tru64_cxx
<li>vc60
<li>mingw32
</ul>

To add new configurations, copy and modify one of the
<tt>configuration_*</tt> files in the <tt>%cctbx/build</tt> directory
as described in the following section.

<hr>

\section installation_fast_track_adj Fast-track with adjustments

The fast-track procedure is only slightly more complicated if some of
the pathnames in the %cctbx <tt>configuration</tt> file need to be
adjusted, e.g. to select different comiler options.

First, copy one of the supplied %cctbx <tt>configuration</tt> files.
For example:

\verbatim
        cd /scratch/build_optimized
        cp ~/cctbx/build/configuration_unix_gcc my_configuration
\endverbatim

Edit the file <tt>my_configuration</tt> to adjust the pathnames or the
compiler and linker options. Refer to section \ref page_installation_adv
for more information.

The installation is started with the command:

\verbatim
        python ~/cctbx/build/fast_track.py my_configuration
\endverbatim

From this point on the documentation in the previous section applies.

<hr>

\par
R.W. Grosse-Kunstleve, November 2001

*/
