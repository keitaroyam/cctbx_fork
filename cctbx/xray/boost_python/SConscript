import libtbx.load_env
Import('env_etc', "env_cctbx_boost_python_ext")
env = env_cctbx_boost_python_ext.Copy()
env_etc.openmp_conf.enable_if_possible(env, target_type="shared_lib")

libs = ["cctbx"]
sources = [
  "xray_ext.cpp",
  "conversions.cpp",
  "gradient_flags.cpp",
  "gradients_direct.cpp",
  "fast_gradients.cpp",
  "minimization.cpp",
  "scatterer_flags.cpp",
  "scatterer.cpp",
  "scattering_type_registry.cpp",
  "sampling_base.cpp",
  "sampled_model_density.cpp",
  "structure_factors_direct.cpp",
  "structure_factors_simple.cpp",
  "targets.cpp",
  "f_model_bpl.cpp",
  "twin_targets.cpp",
]

raw_multithreaded_sources = [
  "raw_multithreading/structure_factors_direct.cpp",
]

if libtbx.env.build_options.enable_boost_threads:
  libs.append("boost_thread")
  sources.extend(raw_multithreaded_sources)
env.Prepend(LIBS=libs)
env.SharedLibrary(target="#lib/cctbx_xray_ext", source=sources)
